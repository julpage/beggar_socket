
chis_flash_burner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000844c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008558  08008558  00009558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c4  080085c4  0000a184  2**0
                  CONTENTS
  4 .ARM          00000000  080085c4  080085c4  0000a184  2**0
                  CONTENTS
  5 .preinit_array 00000000  080085c4  080085c4  0000a184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085c4  080085c4  000095c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080085c8  080085c8  000095c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  080085cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ce0  20000184  08008750  0000a184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e64  08008750  0000ae64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0fd  00000000  00000000  0000a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d98  00000000  00000000  000172aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000887  00000000  00000000  0001abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c7  00000000  00000000  0001b477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd69  00000000  00000000  00034d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e4f  00000000  00000000  00044aa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c98f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb0  00000000  00000000  000c993c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000cc5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	08008540 	.word	0x08008540

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	08008540 	.word	0x08008540

0800014c <cart_setDirection_ad>:

#include "main.h"
#include "cart_adapter.h"

void cart_setDirection_ad(uint8_t dir)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    if (dir == 0)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d10c      	bne.n	8000176 <cart_setDirection_ad+0x2a>
    {
        GPIOB->CRH = 0x88888888; // 8-15 上下拉输入
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <cart_setDirection_ad+0x44>)
 800015e:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000162:	605a      	str	r2, [r3, #4]
        GPIOB->CRL = 0x88888888; // 7-0  上下拉输入
 8000164:	4b0a      	ldr	r3, [pc, #40]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000166:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 800016a:	601a      	str	r2, [r3, #0]
        GPIOB->ODR = 0x0000ffff; // 15-0 上拉
 800016c:	4b08      	ldr	r3, [pc, #32]	@ (8000190 <cart_setDirection_ad+0x44>)
 800016e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000172:	60da      	str	r2, [r3, #12]
    else
    {
        GPIOB->CRH = 0x33333333; // 8-15 推挽输出, 50mhz
        GPIOB->CRL = 0x33333333; // 7-0  推挽输出, 50mhz
    }
}
 8000174:	e007      	b.n	8000186 <cart_setDirection_ad+0x3a>
        GPIOB->CRH = 0x33333333; // 8-15 推挽输出, 50mhz
 8000176:	4b06      	ldr	r3, [pc, #24]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000178:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800017c:	605a      	str	r2, [r3, #4]
        GPIOB->CRL = 0x33333333; // 7-0  推挽输出, 50mhz
 800017e:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000180:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	40010c00 	.word	0x40010c00

08000194 <cart_setDirection_a>:

void cart_setDirection_a(uint8_t dir)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
    if (dir == 0)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d107      	bne.n	80001b4 <cart_setDirection_a+0x20>
    {
        GPIOA->CRL = 0x88888888;  // 7-0 上下拉输入
 80001a4:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001a6:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 80001aa:	601a      	str	r2, [r3, #0]
        GPIOA->BSRR = 0x000000ff; // 7-0 上拉
 80001ac:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	611a      	str	r2, [r3, #16]
    }
    else
    {
        GPIOA->CRL = 0x33333333; // 7-0 推挽输出, 50mhz
    }
}
 80001b2:	e003      	b.n	80001bc <cart_setDirection_a+0x28>
        GPIOA->CRL = 0x33333333; // 7-0 推挽输出, 50mhz
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001b6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80001ba:	601a      	str	r2, [r3, #0]
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800

080001cc <cart_readBus_ad>:

uint16_t cart_readBus_ad()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
    return (GPIOB->IDR) & 0x0000ffff;
 80001d0:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <cart_readBus_ad+0x14>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	b29b      	uxth	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <cart_readBus_a>:

uint8_t cart_readBus_a()
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    return (GPIOA->IDR) & 0x000000ff;
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <cart_readBus_a+0x14>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	b2db      	uxtb	r3, r3
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800

080001fc <cart_writeBus_ad>:

void cart_writeBus_ad(uint16_t value)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
    GPIOB->ODR = value;
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <cart_writeBus_ad+0x1c>)
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40010c00 	.word	0x40010c00

0800021c <cart_writeBus_a>:

void cart_writeBus_a(uint8_t value)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
    uint32_t _ = GPIOA->ODR;
 8000226:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <cart_writeBus_a+0x28>)
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = (_ & 0xffffff00) | value;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4903      	ldr	r1, [pc, #12]	@ (8000244 <cart_writeBus_a+0x28>)
 8000236:	4313      	orrs	r3, r2
 8000238:	60cb      	str	r3, [r1, #12]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40010800 	.word	0x40010800

08000248 <cart_romRead>:

void cart_romRead(uint32_t addr, uint16_t *buf, uint16_t len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	80fb      	strh	r3, [r7, #6]
    // latch base address
    cart_setDirection_a(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f7ff ff9c 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f7ff ff75 	bl	800014c <cart_setDirection_ad>

    cart_writeBus_a((addr & 0x00ff0000) >> 16);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0c1b      	lsrs	r3, r3, #16
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffd7 	bl	800021c <cart_writeBus_a>
    cart_writeBus_ad((addr & 0x0000ffff));
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	b29b      	uxth	r3, r3
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffc2 	bl	80001fc <cart_writeBus_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <cart_romRead+0x8c>)
 800027a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800027e:	611a      	str	r2, [r3, #16]

    // read bus
    cart_setDirection_ad(0);
 8000280:	2000      	movs	r0, #0
 8000282:	f7ff ff63 	bl	800014c <cart_setDirection_ad>
    for (int i = 0; i < len; i++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e013      	b.n	80002b4 <cart_romRead+0x6c>
    {
        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <cart_romRead+0x8c>)
 800028e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000292:	611a      	str	r2, [r3, #16]

        // tOE >25ns, tACC >110ns
        *buf = cart_readBus_ad();
 8000294:	f7ff ff9a 	bl	80001cc <cart_readBus_ad>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	801a      	strh	r2, [r3, #0]
        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <cart_romRead+0x8c>)
 80002a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002a6:	611a      	str	r2, [r3, #16]

        buf++;
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	3302      	adds	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < len; i++)
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	3301      	adds	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	dbe7      	blt.n	800028c <cart_romRead+0x44>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin; // cs1=1 126ns
 80002bc:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <cart_romRead+0x8c>)
 80002be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002c2:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ff65 	bl	8000194 <cart_setDirection_a>
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800

080002d8 <cart_romWrite>:

void cart_romWrite(uint32_t addr, uint16_t *buf, uint16_t len)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	4613      	mov	r3, r2
 80002e4:	80fb      	strh	r3, [r7, #6]
    // latch base address
    cart_setDirection_a(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f7ff ff54 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ff2d 	bl	800014c <cart_setDirection_ad>

    cart_writeBus_a((addr & 0x00ff0000) >> 16);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	0c1b      	lsrs	r3, r3, #16
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff8f 	bl	800021c <cart_writeBus_a>
    cart_writeBus_ad((addr & 0x0000ffff));
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	b29b      	uxth	r3, r3
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff7a 	bl	80001fc <cart_writeBus_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000308:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <cart_romWrite+0x88>)
 800030a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800030e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	e012      	b.n	800033c <cart_romWrite+0x64>
    {
        cart_writeBus_ad(*buf);
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff6e 	bl	80001fc <cart_writeBus_ad>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000320:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <cart_romWrite+0x88>)
 8000322:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000326:	611a      	str	r2, [r3, #16]
        // data setup 30ns, we low 25ns, address hold 45ns
        wr_GPIO_Port->BSRR = wr_Pin;
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <cart_romWrite+0x88>)
 800032a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800032e:	611a      	str	r2, [r3, #16]

        buf++;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3302      	adds	r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < len; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbe8      	blt.n	8000316 <cart_romWrite+0x3e>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <cart_romWrite+0x88>)
 8000346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800034a:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff21 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000352:	2000      	movs	r0, #0
 8000354:	f7ff fefa 	bl	800014c <cart_setDirection_ad>
}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <cart_ramRead>:

void cart_ramRead(uint16_t addr, uint8_t *buf, uint16_t len)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	80fb      	strh	r3, [r7, #6]
 8000370:	4613      	mov	r3, r2
 8000372:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ff0d 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff fee6 	bl	800014c <cart_setDirection_ad>

    cs2_GPIO_Port->BSRR = cs2_Pin << 16; // cs2=0 126ns
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <cart_ramRead+0x80>)
 8000382:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000386:	611a      	str	r2, [r3, #16]

    // read bus
    for (int i = 0; i < len; i++)
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	e01a      	b.n	80003c4 <cart_ramRead+0x60>
    {
        cart_writeBus_ad(addr);
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff33 	bl	80001fc <cart_writeBus_ad>

        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <cart_ramRead+0x84>)
 8000398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800039c:	611a      	str	r2, [r3, #16]

        // address to dq 105ns, oe to dq 25ns
        *buf = cart_readBus_a();
 800039e:	f7ff ff21 	bl	80001e4 <cart_readBus_a>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	701a      	strb	r2, [r3, #0]

        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <cart_ramRead+0x84>)
 80003ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003b0:	611a      	str	r2, [r3, #16]

        addr++;
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	3301      	adds	r3, #1
 80003b6:	80fb      	strh	r3, [r7, #6]
        buf++;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	88bb      	ldrh	r3, [r7, #4]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbe0      	blt.n	800038e <cart_ramRead+0x2a>
    }

    // release bus
    cs2_GPIO_Port->BSRR = cs2_Pin; // cs2=1 126ns
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <cart_ramRead+0x80>)
 80003ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003d2:	611a      	str	r2, [r3, #16]
    cart_setDirection_ad(0);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f7ff feb9 	bl	800014c <cart_setDirection_ad>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800

080003ec <cart_ramWrite>:

void cart_ramWrite(uint16_t addr, uint8_t *buf, uint16_t len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	80fb      	strh	r3, [r7, #6]
 80003f8:	4613      	mov	r3, r2
 80003fa:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(1);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f7ff fec9 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff fea2 	bl	800014c <cart_setDirection_ad>

    cs2_GPIO_Port->BSRR = cs2_Pin << 16; // cs2=0 126ns
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <cart_ramWrite+0x84>)
 800040a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800040e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e019      	b.n	800044a <cart_ramWrite+0x5e>
    {
        cart_writeBus_ad(addr);
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff feef 	bl	80001fc <cart_writeBus_ad>
        cart_writeBus_a(*buf);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fefa 	bl	800021c <cart_writeBus_a>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <cart_ramWrite+0x88>)
 800042a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800042e:	611a      	str	r2, [r3, #16]
        // address hold 70ns, data setup 20ns, write cycle 105ns
        wr_GPIO_Port->BSRR = wr_Pin;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <cart_ramWrite+0x88>)
 8000432:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000436:	611a      	str	r2, [r3, #16]

        addr++;
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	3301      	adds	r3, #1
 800043c:	80fb      	strh	r3, [r7, #6]
        buf++;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	88bb      	ldrh	r3, [r7, #4]
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	429a      	cmp	r2, r3
 8000450:	dbe1      	blt.n	8000416 <cart_ramWrite+0x2a>
    }

    // release bus
    cs2_GPIO_Port->BSRR = cs2_Pin;
 8000452:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <cart_ramWrite+0x84>)
 8000454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000458:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff fe9a 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff fe73 	bl	800014c <cart_setDirection_ad>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40011000 	.word	0x40011000
 8000474:	40010800 	.word	0x40010800

08000478 <cart_gbcRead>:
//
// for gb/gbc
//

void cart_gbcRead(uint16_t addr, uint8_t *buf, uint16_t len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	80fb      	strh	r3, [r7, #6]
 8000484:	4613      	mov	r3, r2
 8000486:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(0);
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff fe83 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff fe5c 	bl	800014c <cart_setDirection_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <cart_gbcRead+0x80>)
 8000496:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800049a:	611a      	str	r2, [r3, #16]

    // read bus
    for (int i = 0; i < len; i++)
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e01a      	b.n	80004d8 <cart_gbcRead+0x60>
    {
        cart_writeBus_ad(addr);
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fea9 	bl	80001fc <cart_writeBus_ad>

        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <cart_gbcRead+0x80>)
 80004ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80004b0:	611a      	str	r2, [r3, #16]

        // address to dq 105ns, oe to dq 25ns
        *buf = cart_readBus_a();
 80004b2:	f7ff fe97 	bl	80001e4 <cart_readBus_a>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	701a      	strb	r2, [r3, #0]

        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <cart_gbcRead+0x80>)
 80004c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c4:	611a      	str	r2, [r3, #16]

        addr++;
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	3301      	adds	r3, #1
 80004ca:	80fb      	strh	r3, [r7, #6]
        buf++;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbe0      	blt.n	80004a2 <cart_gbcRead+0x2a>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin; // cs1=1 126ns
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <cart_gbcRead+0x80>)
 80004e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e6:	611a      	str	r2, [r3, #16]
    cart_setDirection_ad(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff fe2f 	bl	800014c <cart_setDirection_ad>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800

080004fc <cart_gbcWrite>:

void cart_gbcWrite(uint16_t addr, uint8_t *buf, uint16_t len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	4613      	mov	r3, r2
 800050a:	80bb      	strh	r3, [r7, #4]

    cart_setDirection_a(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fe41 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe1a 	bl	800014c <cart_setDirection_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs2=0 126ns
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <cart_gbcWrite+0x84>)
 800051a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800051e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e019      	b.n	800055a <cart_gbcWrite+0x5e>
    {
        cart_writeBus_ad(addr);
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe67 	bl	80001fc <cart_writeBus_ad>
        cart_writeBus_a(*buf);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe72 	bl	800021c <cart_writeBus_a>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <cart_gbcWrite+0x84>)
 800053a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800053e:	611a      	str	r2, [r3, #16]
        // address hold 70ns, data setup 20ns, write cycle 105ns
        wr_GPIO_Port->BSRR = wr_Pin;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <cart_gbcWrite+0x84>)
 8000542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000546:	611a      	str	r2, [r3, #16]

        addr++;
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	3301      	adds	r3, #1
 800054c:	80fb      	strh	r3, [r7, #6]
        buf++;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbe1      	blt.n	8000526 <cart_gbcWrite+0x2a>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin;
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <cart_gbcWrite+0x84>)
 8000564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000568:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe12 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fdeb 	bl	800014c <cart_setDirection_ad>
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010800 	.word	0x40010800

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 feea 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f807 	bl	800059e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f85c 	bl	800064c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000594:	f007 fae4 	bl	8007b60 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    uart_cmdHandler();
 8000598:	f000 fa28 	bl	80009ec <uart_cmdHandler>
 800059c:	e7fc      	b.n	8000598 <main+0x14>

0800059e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b094      	sub	sp, #80	@ 0x50
 80005a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005a8:	2228      	movs	r2, #40	@ 0x28
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f007 ff8d 	bl	80084cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ce:	2302      	movs	r3, #2
 80005d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d2:	2301      	movs	r3, #1
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2310      	movs	r3, #16
 80005d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80005de:	2300      	movs	r3, #0
 80005e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005e2:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 80005e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 ff23 	bl	8003438 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005f8:	f000 f8a6 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fc:	230f      	movs	r3, #15
 80005fe:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000600:	2302      	movs	r3, #2
 8000602:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000608:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800060c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	2101      	movs	r1, #1
 8000618:	4618      	mov	r0, r3
 800061a:	f003 f98f 	bl	800393c <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000624:	f000 f890 	bl	8000748 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000628:	2310      	movs	r3, #16
 800062a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800062c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000630:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	4618      	mov	r0, r3
 8000636:	f003 fadd 	bl	8003bf4 <HAL_RCCEx_PeriphCLKConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000640:	f000 f882 	bl	8000748 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	@ 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0310 	add.w	r3, r7, #16
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000660:	4b35      	ldr	r3, [pc, #212]	@ (8000738 <MX_GPIO_Init+0xec>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a34      	ldr	r2, [pc, #208]	@ (8000738 <MX_GPIO_Init+0xec>)
 8000666:	f043 0310 	orr.w	r3, r3, #16
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <MX_GPIO_Init+0xec>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0310 	and.w	r3, r3, #16
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <MX_GPIO_Init+0xec>)
 800067a:	699b      	ldr	r3, [r3, #24]
 800067c:	4a2e      	ldr	r2, [pc, #184]	@ (8000738 <MX_GPIO_Init+0xec>)
 800067e:	f043 0304 	orr.w	r3, r3, #4
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <MX_GPIO_Init+0xec>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f003 0304 	and.w	r3, r3, #4
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <MX_GPIO_Init+0xec>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <MX_GPIO_Init+0xec>)
 8000696:	f043 0308 	orr.w	r3, r3, #8
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <MX_GPIO_Init+0xec>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0308 	and.w	r3, r3, #8
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, cs2_Pin|led_Pin, GPIO_PIN_SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80006ae:	4823      	ldr	r0, [pc, #140]	@ (800073c <MX_GPIO_Init+0xf0>)
 80006b0:	f001 f94a 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cs1_Pin|rd_Pin|wr_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006ba:	4821      	ldr	r0, [pc, #132]	@ (8000740 <MX_GPIO_Init+0xf4>)
 80006bc:	f001 f944 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs2_Pin led_Pin */
  GPIO_InitStruct.Pin = cs2_Pin|led_Pin;
 80006c0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	4619      	mov	r1, r3
 80006d8:	4818      	ldr	r0, [pc, #96]	@ (800073c <MX_GPIO_Init+0xf0>)
 80006da:	f000 ffb1 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : a16_Pin a17_Pin a18_Pin a19_Pin
                           a20_Pin a21_Pin a22_Pin a23_Pin */
  GPIO_InitStruct.Pin = a16_Pin|a17_Pin|a18_Pin|a19_Pin
 80006de:	23ff      	movs	r3, #255	@ 0xff
 80006e0:	613b      	str	r3, [r7, #16]
                          |a20_Pin|a21_Pin|a22_Pin|a23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0310 	add.w	r3, r7, #16
 80006ee:	4619      	mov	r1, r3
 80006f0:	4813      	ldr	r0, [pc, #76]	@ (8000740 <MX_GPIO_Init+0xf4>)
 80006f2:	f000 ffa5 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : ad0_Pin ad1_Pin ad2_Pin ad10_Pin
                           ad11_Pin ad12_Pin ad13_Pin ad14_Pin
                           ad15_Pin ad3_Pin ad4_Pin ad5_Pin
                           ad6_Pin ad7_Pin ad8_Pin ad9_Pin */
  GPIO_InitStruct.Pin = ad0_Pin|ad1_Pin|ad2_Pin|ad10_Pin
 80006f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fa:	613b      	str	r3, [r7, #16]
                          |ad11_Pin|ad12_Pin|ad13_Pin|ad14_Pin
                          |ad15_Pin|ad3_Pin|ad4_Pin|ad5_Pin
                          |ad6_Pin|ad7_Pin|ad8_Pin|ad9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000700:	2301      	movs	r3, #1
 8000702:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	480e      	ldr	r0, [pc, #56]	@ (8000744 <MX_GPIO_Init+0xf8>)
 800070c:	f000 ff98 	bl	8001640 <HAL_GPIO_Init>

  /*Configure GPIO pins : cs1_Pin rd_Pin wr_Pin */
  GPIO_InitStruct.Pin = cs1_Pin|rd_Pin|wr_Pin;
 8000710:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	2301      	movs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800071e:	2303      	movs	r3, #3
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000722:	f107 0310 	add.w	r3, r7, #16
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_GPIO_Init+0xf4>)
 800072a:	f000 ff89 	bl	8001640 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000
 800073c:	40011000 	.word	0x40011000
 8000740:	40010800 	.word	0x40010800
 8000744:	40010c00 	.word	0x40010c00

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800075a:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <HAL_MspInit+0x5c>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <HAL_MspInit+0x5c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_MspInit+0x5c>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <HAL_MspInit+0x5c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	4a0e      	ldr	r2, [pc, #56]	@ (80007b0 <HAL_MspInit+0x5c>)
 8000778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077c:	61d3      	str	r3, [r2, #28]
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <HAL_MspInit+0x5c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_MspInit+0x60>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	4a04      	ldr	r2, [pc, #16]	@ (80007b4 <HAL_MspInit+0x60>)
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010000 	.word	0x40010000

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 fdf0 	bl	80013ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000816:	f001 f9cb 	bl	8001bb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000396c 	.word	0x2000396c

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <uart_setControlLine>:

    return crc;
}

void uart_setControlLine(uint8_t rts, uint8_t dtr)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
    static uint8_t currentRts = 0;
    static uint8_t currentDtr = 0;

    if (((currentRts == 0) && (rts != 0)) ||
 8000840:	4b10      	ldr	r3, [pc, #64]	@ (8000884 <uart_setControlLine+0x54>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <uart_setControlLine+0x1e>
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d106      	bne.n	800085c <uart_setControlLine+0x2c>
        ((currentDtr == 0) && (dtr != 0)))
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <uart_setControlLine+0x58>)
 8000850:	781b      	ldrb	r3, [r3, #0]
    if (((currentRts == 0) && (rts != 0)) ||
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10b      	bne.n	800086e <uart_setControlLine+0x3e>
        ((currentDtr == 0) && (dtr != 0)))
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <uart_setControlLine+0x3e>
    {
        cmdBuf_p = 0;
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <uart_setControlLine+0x5c>)
 800085e:	2200      	movs	r2, #0
 8000860:	801a      	strh	r2, [r3, #0]
        memset(cmdBuf, 0, sizeof(cmdBuf));
 8000862:	f241 527c 	movw	r2, #5500	@ 0x157c
 8000866:	2100      	movs	r1, #0
 8000868:	4809      	ldr	r0, [pc, #36]	@ (8000890 <uart_setControlLine+0x60>)
 800086a:	f007 fe2f 	bl	80084cc <memset>
    }

    currentRts = rts;
 800086e:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <uart_setControlLine+0x54>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	7013      	strb	r3, [r2, #0]
    currentDtr = dtr;
 8000874:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <uart_setControlLine+0x58>)
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	7013      	strb	r3, [r2, #0]
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20002c9d 	.word	0x20002c9d
 8000888:	20002c9e 	.word	0x20002c9e
 800088c:	200001a0 	.word	0x200001a0
 8000890:	200001a4 	.word	0x200001a4

08000894 <uart_responData>:

void uart_responData(uint8_t *dat, uint16_t len)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b086      	sub	sp, #24
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
    // uart_respon->crc16 = modbusCRC16(dat, len); // 计算crc

    if (dat != NULL)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d007      	beq.n	80008b6 <uart_responData+0x22>
        memcpy(uart_respon->payload, dat, len); // 填充数据
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <uart_responData+0x84>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	3302      	adds	r3, #2
 80008ac:	887a      	ldrh	r2, [r7, #2]
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f007 fe37 	bl	8008524 <memcpy>

    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80008b6:	4b19      	ldr	r3, [pc, #100]	@ (800091c <uart_responData+0x88>)
 80008b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80008bc:	613b      	str	r3, [r7, #16]

    // 分批发送
    uint16_t packSize = SIZE_CRC + len;
 80008be:	887b      	ldrh	r3, [r7, #2]
 80008c0:	3302      	adds	r3, #2
 80008c2:	81fb      	strh	r3, [r7, #14]
    uint16_t transCount = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	82fb      	strh	r3, [r7, #22]
    while (transCount < packSize)
 80008c8:	e01c      	b.n	8000904 <uart_responData+0x70>
    {
        uint16_t transLen = packSize - transCount;
 80008ca:	89fa      	ldrh	r2, [r7, #14]
 80008cc:	8afb      	ldrh	r3, [r7, #22]
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	82bb      	strh	r3, [r7, #20]
        if (transLen > BATCH_SIZE_RESPON)
 80008d2:	8abb      	ldrh	r3, [r7, #20]
 80008d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008d8:	d902      	bls.n	80008e0 <uart_responData+0x4c>
            transLen = BATCH_SIZE_RESPON;
 80008da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008de:	82bb      	strh	r3, [r7, #20]

        while (hcdc->TxState != 0)
 80008e0:	bf00      	nop
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1fa      	bne.n	80008e2 <uart_responData+0x4e>
            ;
        CDC_Transmit_FS(responBuf + transCount, transLen);
 80008ec:	8afb      	ldrh	r3, [r7, #22]
 80008ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000920 <uart_responData+0x8c>)
 80008f0:	4413      	add	r3, r2
 80008f2:	8aba      	ldrh	r2, [r7, #20]
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 fa0a 	bl	8007d10 <CDC_Transmit_FS>

        transCount += transLen;
 80008fc:	8afa      	ldrh	r2, [r7, #22]
 80008fe:	8abb      	ldrh	r3, [r7, #20]
 8000900:	4413      	add	r3, r2
 8000902:	82fb      	strh	r3, [r7, #22]
    while (transCount < packSize)
 8000904:	8afa      	ldrh	r2, [r7, #22]
 8000906:	89fb      	ldrh	r3, [r7, #14]
 8000908:	429a      	cmp	r2, r3
 800090a:	d3de      	bcc.n	80008ca <uart_responData+0x36>
    }
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000008 	.word	0x20000008
 800091c:	20002ca8 	.word	0x20002ca8
 8000920:	20001720 	.word	0x20001720

08000924 <uart_responAck>:

void uart_responAck()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <uart_responAck+0x30>)
 800092c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000930:	607b      	str	r3, [r7, #4]

    while (hcdc->TxState != 0)
 8000932:	bf00      	nop
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800093a:	2b00      	cmp	r3, #0
 800093c:	d1fa      	bne.n	8000934 <uart_responAck+0x10>
        ;

    uint8_t ack = 0xaa;
 800093e:	23aa      	movs	r3, #170	@ 0xaa
 8000940:	70fb      	strb	r3, [r7, #3]
    CDC_Transmit_FS(&ack, 1);
 8000942:	1cfb      	adds	r3, r7, #3
 8000944:	2101      	movs	r1, #1
 8000946:	4618      	mov	r0, r3
 8000948:	f007 f9e2 	bl	8007d10 <CDC_Transmit_FS>
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20002ca8 	.word	0x20002ca8

08000958 <uart_cmdRecv>:

// usb 接收回调
void uart_cmdRecv(uint8_t *buf, uint32_t len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
    if (busy)
 8000962:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <uart_cmdRecv+0x5c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d11c      	bne.n	80009a6 <uart_cmdRecv+0x4e>
        return;

    uint16_t remainSize = sizeof(cmdBuf) - cmdBuf_p;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <uart_cmdRecv+0x60>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	f5c3 53ab 	rsb	r3, r3, #5472	@ 0x1560
 8000974:	331c      	adds	r3, #28
 8000976:	81fb      	strh	r3, [r7, #14]
    if (len > remainSize)
 8000978:	89fb      	ldrh	r3, [r7, #14]
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	d814      	bhi.n	80009aa <uart_cmdRecv+0x52>
        return;

    memcpy(cmdBuf + cmdBuf_p, buf, len);
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <uart_cmdRecv+0x60>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <uart_cmdRecv+0x64>)
 8000988:	4413      	add	r3, r2
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f007 fdc8 	bl	8008524 <memcpy>
    cmdBuf_p += len;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b29a      	uxth	r2, r3
 8000998:	4b07      	ldr	r3, [pc, #28]	@ (80009b8 <uart_cmdRecv+0x60>)
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	4413      	add	r3, r2
 800099e:	b29a      	uxth	r2, r3
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <uart_cmdRecv+0x60>)
 80009a2:	801a      	strh	r2, [r3, #0]
 80009a4:	e002      	b.n	80009ac <uart_cmdRecv+0x54>
        return;
 80009a6:	bf00      	nop
 80009a8:	e000      	b.n	80009ac <uart_cmdRecv+0x54>
        return;
 80009aa:	bf00      	nop
}
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20002c9c 	.word	0x20002c9c
 80009b8:	200001a0 	.word	0x200001a0
 80009bc:	200001a4 	.word	0x200001a4

080009c0 <uart_clearRecvBuf>:

void uart_clearRecvBuf()
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
    cmdBuf_p = 0;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <uart_clearRecvBuf+0x20>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	801a      	strh	r2, [r3, #0]
    memset(cmdBuf, 0, sizeof(cmdBuf));
 80009ca:	f241 527c 	movw	r2, #5500	@ 0x157c
 80009ce:	2100      	movs	r1, #0
 80009d0:	4804      	ldr	r0, [pc, #16]	@ (80009e4 <uart_clearRecvBuf+0x24>)
 80009d2:	f007 fd7b 	bl	80084cc <memset>
    busy = 0;
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <uart_clearRecvBuf+0x28>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001a0 	.word	0x200001a0
 80009e4:	200001a4 	.word	0x200001a4
 80009e8:	20002c9c 	.word	0x20002c9c

080009ec <uart_cmdHandler>:

void uart_cmdHandler()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    // 判断命令结束
    if (cmdBuf_p > 2)
 80009f0:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <uart_cmdHandler+0xd4>)
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d962      	bls.n	8000abe <uart_cmdHandler+0xd2>
    {
        if (uart_cmd->cmdSize == cmdBuf_p)
 80009f8:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <uart_cmdHandler+0xd8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	881b      	ldrh	r3, [r3, #0]
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac0 <uart_cmdHandler+0xd4>)
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	d15a      	bne.n	8000abe <uart_cmdHandler+0xd2>
            // uint16_t localCrc = modbusCRC16(cmdBuf, uart_cmd->cmdSize - 2);

            // if (cmdCrc != localCrc)
            //     uart_clearRecvBuf();

            busy = 1;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac8 <uart_cmdHandler+0xdc>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a14:	482d      	ldr	r0, [pc, #180]	@ (8000acc <uart_cmdHandler+0xe0>)
 8000a16:	f000 ff97 	bl	8001948 <HAL_GPIO_WritePin>

            // execute cmd
            switch (uart_cmd->cmdCode)
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <uart_cmdHandler+0xd8>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	789b      	ldrb	r3, [r3, #2]
 8000a20:	3bf0      	subs	r3, #240	@ 0xf0
 8000a22:	2b0c      	cmp	r3, #12
 8000a24:	d843      	bhi.n	8000aae <uart_cmdHandler+0xc2>
 8000a26:	a201      	add	r2, pc, #4	@ (adr r2, 8000a2c <uart_cmdHandler+0x40>)
 8000a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2c:	08000a61 	.word	0x08000a61
 8000a30:	08000a67 	.word	0x08000a67
 8000a34:	08000a6d 	.word	0x08000a6d
 8000a38:	08000a73 	.word	0x08000a73
 8000a3c:	08000a79 	.word	0x08000a79
 8000a40:	08000a7f 	.word	0x08000a7f
 8000a44:	08000a85 	.word	0x08000a85
 8000a48:	08000a8b 	.word	0x08000a8b
 8000a4c:	08000a91 	.word	0x08000a91
 8000a50:	08000a97 	.word	0x08000a97
 8000a54:	08000a9d 	.word	0x08000a9d
 8000a58:	08000aa3 	.word	0x08000aa3
 8000a5c:	08000aa9 	.word	0x08000aa9
            {
            case 0xf0: // rom id获取
                romGetID();
 8000a60:	f000 f866 	bl	8000b30 <romGetID>
                break;
 8000a64:	e024      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf1: // rom chip擦除
                romEraseChip();
 8000a66:	f000 f8b3 	bl	8000bd0 <romEraseChip>
                break;
 8000a6a:	e021      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf2: // rom blcok擦除
                romEraseBlock();
 8000a6c:	f000 f8f1 	bl	8000c52 <romEraseBlock>
                break;
 8000a70:	e01e      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf3: // rom sector擦除
                romEraseSector();
 8000a72:	f000 f8f7 	bl	8000c64 <romEraseSector>
                break;
 8000a76:	e01b      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf4: // rom program
                romProgram();
 8000a78:	f000 f946 	bl	8000d08 <romProgram>
                break;
 8000a7c:	e018      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf5: // rom 写入透传
                romWrite();
 8000a7e:	f000 fa13 	bl	8000ea8 <romWrite>
                break;
 8000a82:	e015      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf6: // rom 读取透传
                romRead();
 8000a84:	f000 fa36 	bl	8000ef4 <romRead>
                break;
 8000a88:	e012      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf7: // ram 写入透传
                ramWrite();
 8000a8a:	f000 fa63 	bl	8000f54 <ramWrite>
                break;
 8000a8e:	e00f      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf8: // ram 读取透传
                ramRead();
 8000a90:	f000 fa86 	bl	8000fa0 <ramRead>
                break;
 8000a94:	e00c      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xf9: // 编程flash存档
                ramProgramFlash();
 8000a96:	f000 faad 	bl	8000ff4 <ramProgramFlash>
                break;
 8000a9a:	e009      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xfa: // gbc 写入透传
                gbcWrite();
 8000a9c:	f000 fb14 	bl	80010c8 <gbcWrite>
                break;
 8000aa0:	e006      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xfb: // gbc 读取透传
                gbcRead();
 8000aa2:	f000 fb37 	bl	8001114 <gbcRead>
                break;
 8000aa6:	e003      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            case 0xfc:
                gbcRomProgram(); // gbc rom编程
 8000aa8:	f000 fb5e 	bl	8001168 <gbcRomProgram>
                break;
 8000aac:	e000      	b.n	8000ab0 <uart_cmdHandler+0xc4>

            default:
                break;
 8000aae:	bf00      	nop
            }

            HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ab6:	4805      	ldr	r0, [pc, #20]	@ (8000acc <uart_cmdHandler+0xe0>)
 8000ab8:	f000 ff46 	bl	8001948 <HAL_GPIO_WritePin>
            return;
 8000abc:	bf00      	nop
        }
    }
}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200001a0 	.word	0x200001a0
 8000ac4:	20000004 	.word	0x20000004
 8000ac8:	20002c9c 	.word	0x20002c9c
 8000acc:	40011000 	.word	0x40011000

08000ad0 <romWaitForDone>:

void romWaitForDone(uint32_t addr, uint16_t expectedValue)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	807b      	strh	r3, [r7, #2]
    uint16_t value;
    while (1)
    {
        cart_romRead(addr, &value, 1);
 8000adc:	f107 030e 	add.w	r3, r7, #14
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff fbaf 	bl	8000248 <cart_romRead>
        if ((value & 0x0080) == (expectedValue & 0x0080))
 8000aea:	89fa      	ldrh	r2, [r7, #14]
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d10e      	bne.n	8000b18 <romWaitForDone+0x48>
        {
            cart_romRead(addr, &value, 1);
 8000afa:	f107 030e 	add.w	r3, r7, #14
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff fba0 	bl	8000248 <cart_romRead>
            cart_romRead(addr, &value, 1);
 8000b08:	f107 030e 	add.w	r3, r7, #14
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	4619      	mov	r1, r3
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff fb99 	bl	8000248 <cart_romRead>
            break;
 8000b16:	e005      	b.n	8000b24 <romWaitForDone+0x54>
        }
        if (cmdBuf_p == 0)
 8000b18:	4b04      	ldr	r3, [pc, #16]	@ (8000b2c <romWaitForDone+0x5c>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d000      	beq.n	8000b22 <romWaitForDone+0x52>
        cart_romRead(addr, &value, 1);
 8000b20:	e7dc      	b.n	8000adc <romWaitForDone+0xc>
        {
            break;
 8000b22:	bf00      	nop
        }
    }
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001a0 	.word	0x200001a0

08000b30 <romGetID>:
// 获取rom id
// i 2B.包大小 0xf0 2B.CRC
//   05 00 f0 61 85
// o 2B.CRC 8B.数据
void romGetID()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
    uint16_t cmd;

    /* Issue Autoselect Command Sequence */
    cmd = 0xaa;
 8000b36:	23aa      	movs	r3, #170	@ 0xaa
 8000b38:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x555, &cmd, 1);
 8000b3a:	f107 030e 	add.w	r3, r7, #14
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4619      	mov	r1, r3
 8000b42:	f240 5055 	movw	r0, #1365	@ 0x555
 8000b46:	f7ff fbc7 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000b4a:	2355      	movs	r3, #85	@ 0x55
 8000b4c:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x2aa, &cmd, 1);
 8000b4e:	f107 030e 	add.w	r3, r7, #14
 8000b52:	2201      	movs	r2, #1
 8000b54:	4619      	mov	r1, r3
 8000b56:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000b5a:	f7ff fbbd 	bl	80002d8 <cart_romWrite>
    cmd = 0x90;
 8000b5e:	2390      	movs	r3, #144	@ 0x90
 8000b60:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x555, &cmd, 1);
 8000b62:	f107 030e 	add.w	r3, r7, #14
 8000b66:	2201      	movs	r2, #1
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f240 5055 	movw	r0, #1365	@ 0x555
 8000b6e:	f7ff fbb3 	bl	80002d8 <cart_romWrite>

    uint16_t id[4];                // e.g             S29GL256S  JS28F256
    cart_romRead(0x00, id + 0, 1); // Manufacture ID  0001h      0089h
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2201      	movs	r2, #1
 8000b76:	4619      	mov	r1, r3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f7ff fb65 	bl	8000248 <cart_romRead>
    cart_romRead(0x01, id + 1, 1); // Device ID       227Eh      227Eh
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	3302      	adds	r3, #2
 8000b82:	2201      	movs	r2, #1
 8000b84:	4619      	mov	r1, r3
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff fb5e 	bl	8000248 <cart_romRead>
    cart_romRead(0x0e, id + 2, 1); // Device ID       2222h      2222h = 256 Mb
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	3304      	adds	r3, #4
 8000b90:	2201      	movs	r2, #1
 8000b92:	4619      	mov	r1, r3
 8000b94:	200e      	movs	r0, #14
 8000b96:	f7ff fb57 	bl	8000248 <cart_romRead>
    cart_romRead(0x0f, id + 3, 1); // Device ID       2201h      2201h
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	3306      	adds	r3, #6
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	200f      	movs	r0, #15
 8000ba4:	f7ff fb50 	bl	8000248 <cart_romRead>

    /* Write Software RESET command */
    cmd = 0xf0;
 8000ba8:	23f0      	movs	r3, #240	@ 0xf0
 8000baa:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0, &cmd, 1);
 8000bac:	f107 030e 	add.w	r3, r7, #14
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff fb8f 	bl	80002d8 <cart_romWrite>

    uart_clearRecvBuf();
 8000bba:	f7ff ff01 	bl	80009c0 <uart_clearRecvBuf>
    uart_responData((uint8_t *)id, 8);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fe66 	bl	8000894 <uart_responData>
}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <romEraseChip>:
// 全片抹除
// i 2B.包大小 0xf1 2B.CRC
//   05 00 f1 a0 45
// o 0xaa
void romEraseChip()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
    uint16_t cmd;

    /* Issue inlock sequence command */
    cmd = 0xaa;
 8000bd6:	23aa      	movs	r3, #170	@ 0xaa
 8000bd8:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000bda:	1dbb      	adds	r3, r7, #6
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	f240 5055 	movw	r0, #1365	@ 0x555
 8000be4:	f7ff fb78 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000be8:	2355      	movs	r3, #85	@ 0x55
 8000bea:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000bec:	1dbb      	adds	r3, r7, #6
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000bf6:	f7ff fb6f 	bl	80002d8 <cart_romWrite>
    cmd = 0x80;
 8000bfa:	2380      	movs	r3, #128	@ 0x80
 8000bfc:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000bfe:	1dbb      	adds	r3, r7, #6
 8000c00:	2201      	movs	r2, #1
 8000c02:	4619      	mov	r1, r3
 8000c04:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c08:	f7ff fb66 	bl	80002d8 <cart_romWrite>
    cmd = 0xaa;
 8000c0c:	23aa      	movs	r3, #170	@ 0xaa
 8000c0e:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c10:	1dbb      	adds	r3, r7, #6
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c1a:	f7ff fb5d 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000c1e:	2355      	movs	r3, #85	@ 0x55
 8000c20:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000c22:	1dbb      	adds	r3, r7, #6
 8000c24:	2201      	movs	r2, #1
 8000c26:	4619      	mov	r1, r3
 8000c28:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000c2c:	f7ff fb54 	bl	80002d8 <cart_romWrite>
    /* Write Chip Erase Command to Base Address */
    cmd = 0x10;
 8000c30:	2310      	movs	r3, #16
 8000c32:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c34:	1dbb      	adds	r3, r7, #6
 8000c36:	2201      	movs	r2, #1
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c3e:	f7ff fb4b 	bl	80002d8 <cart_romWrite>

    uart_clearRecvBuf();
 8000c42:	f7ff febd 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000c46:	f7ff fe6d 	bl	8000924 <uart_responAck>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <romEraseBlock>:

// 块擦除
// i 2B.包大小 0xf2 4B.BlockAddress 2B.CRC
// o 0xaa
void romEraseBlock()
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
    // 本项目无用
    uart_clearRecvBuf();
 8000c56:	f7ff feb3 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000c5a:	f7ff fe63 	bl	8000924 <uart_responAck>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <romEraseSector>:

// 扇区擦除
// i 2B.包大小 0xf3 4B.SectorAddress 2B.CRC
// o 0xaa
void romEraseSector()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000c6a:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <romEraseSector+0xa0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3303      	adds	r3, #3
 8000c70:	60fb      	str	r3, [r7, #12]

    // 扇区地址
    uint32_t sectorAddress = (desc_write->baseAddress >> 1) & 0x00ff0000;
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	085b      	lsrs	r3, r3, #1
 8000c78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000c7c:	60bb      	str	r3, [r7, #8]

    uint16_t cmd;

    /* Issue unlock sequence command */
    cmd = 0xaa;
 8000c7e:	23aa      	movs	r3, #170	@ 0xaa
 8000c80:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c8c:	f7ff fb24 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000c90:	2355      	movs	r3, #85	@ 0x55
 8000c92:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	2201      	movs	r2, #1
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000c9e:	f7ff fb1b 	bl	80002d8 <cart_romWrite>
    cmd = 0x80;
 8000ca2:	2380      	movs	r3, #128	@ 0x80
 8000ca4:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4619      	mov	r1, r3
 8000cac:	f240 5055 	movw	r0, #1365	@ 0x555
 8000cb0:	f7ff fb12 	bl	80002d8 <cart_romWrite>
    cmd = 0xaa;
 8000cb4:	23aa      	movs	r3, #170	@ 0xaa
 8000cb6:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000cb8:	1dbb      	adds	r3, r7, #6
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f240 5055 	movw	r0, #1365	@ 0x555
 8000cc2:	f7ff fb09 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000cc6:	2355      	movs	r3, #85	@ 0x55
 8000cc8:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000cca:	1dbb      	adds	r3, r7, #6
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000cd4:	f7ff fb00 	bl	80002d8 <cart_romWrite>
    /* Write Sector Erase Command to Offset */
    cmd = 0x30;
 8000cd8:	2330      	movs	r3, #48	@ 0x30
 8000cda:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(sectorAddress, &cmd, 1);
 8000cdc:	1dbb      	adds	r3, r7, #6
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f7ff faf8 	bl	80002d8 <cart_romWrite>

    romWaitForDone(sectorAddress, 0xffff);
 8000ce8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000cec:	68b8      	ldr	r0, [r7, #8]
 8000cee:	f7ff feef 	bl	8000ad0 <romWaitForDone>

    uart_clearRecvBuf();
 8000cf2:	f7ff fe65 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000cf6:	f7ff fe15 	bl	8000924 <uart_responAck>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000004 	.word	0x20000004

08000d08 <romProgram>:

// rom program
// i 2B.包大小 0xf4 4B.始地址 nB.数据 2B.CRC
// o 0xaa
void romProgram()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	@ 0x28
 8000d0c:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000d0e:	4b64      	ldr	r3, [pc, #400]	@ (8000ea0 <romProgram+0x198>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	3303      	adds	r3, #3
 8000d14:	61fb      	str	r3, [r7, #28]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
    uint32_t wordAddress = baseAddress >> 1;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_BUFF_SIZE - SIZE_CRC;
 8000d22:	4b5f      	ldr	r3, [pc, #380]	@ (8000ea0 <romProgram+0x198>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	b29b      	uxth	r3, r3
 8000d2a:	3b0b      	subs	r3, #11
 8000d2c:	827b      	strh	r3, [r7, #18]
    uint16_t wordCount = byteCount / 2;
 8000d2e:	8a7b      	ldrh	r3, [r7, #18]
 8000d30:	085b      	lsrs	r3, r3, #1
 8000d32:	823b      	strh	r3, [r7, #16]
    // 编程buff大小
    uint16_t bufferWriteBytes = *((uint16_t *)(desc_write->payload));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	3304      	adds	r3, #4
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	81fb      	strh	r3, [r7, #14]
    // 数据
    uint16_t *dataBuf = (uint16_t *)(desc_write->payload + SIZE_BUFF_SIZE);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	3304      	adds	r3, #4
 8000d40:	3302      	adds	r3, #2
 8000d42:	60bb      	str	r3, [r7, #8]

    uint32_t writtenCount = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	627b      	str	r3, [r7, #36]	@ 0x24

    while (writtenCount < wordCount)
 8000d48:	e09d      	b.n	8000e86 <romProgram+0x17e>
    {
        uint16_t cmd;
        uint32_t startingAddress = wordAddress + writtenCount;
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	4413      	add	r3, r2
 8000d50:	607b      	str	r3, [r7, #4]

        // 不能多字节编程
        if (bufferWriteBytes == 0)
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d137      	bne.n	8000dc8 <romProgram+0xc0>
        {
            /* Issue Load Write Buffer Command Sequence */
            /* Issue unlock command sequence */
            cmd = 0xaa;
 8000d58:	23aa      	movs	r3, #170	@ 0xaa
 8000d5a:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000d5c:	1cbb      	adds	r3, r7, #2
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	f240 5055 	movw	r0, #1365	@ 0x555
 8000d66:	f7ff fab7 	bl	80002d8 <cart_romWrite>
            cmd = 0x55;
 8000d6a:	2355      	movs	r3, #85	@ 0x55
 8000d6c:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x2aa, &cmd, 1);
 8000d6e:	1cbb      	adds	r3, r7, #2
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000d78:	f7ff faae 	bl	80002d8 <cart_romWrite>
            /* Write Program Command */
            cmd = 0xa0;
 8000d7c:	23a0      	movs	r3, #160	@ 0xa0
 8000d7e:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000d80:	1cbb      	adds	r3, r7, #2
 8000d82:	2201      	movs	r2, #1
 8000d84:	4619      	mov	r1, r3
 8000d86:	f240 5055 	movw	r0, #1365	@ 0x555
 8000d8a:	f7ff faa5 	bl	80002d8 <cart_romWrite>

            cart_romWrite(startingAddress,
                          dataBuf + writtenCount,
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	005b      	lsls	r3, r3, #1
            cart_romWrite(startingAddress,
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	4413      	add	r3, r2
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fa9c 	bl	80002d8 <cart_romWrite>
                          1);

            romWaitForDone(startingAddress, *(dataBuf + writtenCount));
 8000da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	68ba      	ldr	r2, [r7, #8]
 8000da6:	4413      	add	r3, r2
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fe8f 	bl	8000ad0 <romWaitForDone>
            if (cmdBuf_p == 0)
 8000db2:	4b3c      	ldr	r3, [pc, #240]	@ (8000ea4 <romProgram+0x19c>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d102      	bne.n	8000dc0 <romProgram+0xb8>
            {
                uart_clearRecvBuf();
 8000dba:	f7ff fe01 	bl	80009c0 <uart_clearRecvBuf>
                return;
 8000dbe:	e06b      	b.n	8000e98 <romProgram+0x190>
            }

            writtenCount++;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dc6:	e05e      	b.n	8000e86 <romProgram+0x17e>
        // 可以多字节编程
        else
        {
            // 5.4.1.2
            // Write Buffer Programming allows up to 512 bytes to be programmed in one operation.
            uint16_t writeLen = wordCount - writtenCount;
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	8a3a      	ldrh	r2, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (writeLen > (bufferWriteBytes / 2))
 8000dd2:	89fb      	ldrh	r3, [r7, #14]
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d902      	bls.n	8000de4 <romProgram+0xdc>
                writeLen = (bufferWriteBytes / 2);
 8000dde:	89fb      	ldrh	r3, [r7, #14]
 8000de0:	085b      	lsrs	r3, r3, #1
 8000de2:	847b      	strh	r3, [r7, #34]	@ 0x22
            // uint32_t sectorAddress = startingAddress & 0xffff0000;

            /* Issue Load Write Buffer Command Sequence */
            /* Issue unlock command sequence */
            cmd = 0xaa;
 8000de4:	23aa      	movs	r3, #170	@ 0xaa
 8000de6:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000de8:	1cbb      	adds	r3, r7, #2
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	f240 5055 	movw	r0, #1365	@ 0x555
 8000df2:	f7ff fa71 	bl	80002d8 <cart_romWrite>
            cmd = 0x55;
 8000df6:	2355      	movs	r3, #85	@ 0x55
 8000df8:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x2aa, &cmd, 1);
 8000dfa:	1cbb      	adds	r3, r7, #2
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000e04:	f7ff fa68 	bl	80002d8 <cart_romWrite>
            /* Issue Write to Buffer Command at Sector Address */
            cmd = 0x25;
 8000e08:	2325      	movs	r3, #37	@ 0x25
 8000e0a:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000e0c:	1cbb      	adds	r3, r7, #2
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4619      	mov	r1, r3
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fa60 	bl	80002d8 <cart_romWrite>

            /* Write Number of Locations to program */
            cmd = writeLen - 1;
 8000e18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000e20:	1cbb      	adds	r3, r7, #2
 8000e22:	2201      	movs	r2, #1
 8000e24:	4619      	mov	r1, r3
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff fa56 	bl	80002d8 <cart_romWrite>

            /* Load Data into Buffer */
            cart_romWrite(startingAddress,
                          dataBuf + writtenCount,
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2e:	005b      	lsls	r3, r3, #1
            cart_romWrite(startingAddress,
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	4413      	add	r3, r2
 8000e34:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e36:	4619      	mov	r1, r3
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fa4d 	bl	80002d8 <cart_romWrite>
                          writeLen);

            /* Issue Program Buffer to Flash command */
            cmd = 0x29;
 8000e3e:	2329      	movs	r3, #41	@ 0x29
 8000e40:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000e42:	1cbb      	adds	r3, r7, #2
 8000e44:	2201      	movs	r2, #1
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fa45 	bl	80002d8 <cart_romWrite>

            romWaitForDone(startingAddress + writeLen - 1, *(dataBuf + writtenCount + writeLen - 1));
 8000e4e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4413      	add	r3, r2
 8000e54:	1e58      	subs	r0, r3, #1
 8000e56:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000e60:	3b01      	subs	r3, #1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	4413      	add	r3, r2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fe30 	bl	8000ad0 <romWaitForDone>
            if (cmdBuf_p == 0)
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <romProgram+0x19c>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <romProgram+0x176>
            {
                uart_clearRecvBuf();
 8000e78:	f7ff fda2 	bl	80009c0 <uart_clearRecvBuf>
                return;
 8000e7c:	e00c      	b.n	8000e98 <romProgram+0x190>
            }

            writtenCount += writeLen;
 8000e7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e82:	4413      	add	r3, r2
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    while (writtenCount < wordCount)
 8000e86:	8a3b      	ldrh	r3, [r7, #16]
 8000e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f4ff af5d 	bcc.w	8000d4a <romProgram+0x42>
        }
    }

    uart_clearRecvBuf();
 8000e90:	f7ff fd96 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000e94:	f7ff fd46 	bl	8000924 <uart_responAck>
}
 8000e98:	3728      	adds	r7, #40	@ 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	200001a0 	.word	0x200001a0

08000ea8 <romWrite>:

// rom写入透传
// i 2B.包大小 0xf5 4B.始地址 nB.数据 2B.CRC
// o 0xaa
void romWrite()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <romWrite+0x48>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3303      	adds	r3, #3
 8000eb4:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <romWrite+0x48>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3b09      	subs	r3, #9
 8000ec6:	80fb      	strh	r3, [r7, #6]
    uint16_t wordCount = byteCount / 2;
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	085b      	lsrs	r3, r3, #1
 8000ecc:	80bb      	strh	r3, [r7, #4]
    // 数据
    uint16_t *dataBuf = (uint16_t *)desc_write->payload;
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	603b      	str	r3, [r7, #0]

    cart_romWrite(baseAddress,
 8000ed4:	88bb      	ldrh	r3, [r7, #4]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	68b8      	ldr	r0, [r7, #8]
 8000edc:	f7ff f9fc 	bl	80002d8 <cart_romWrite>
                  dataBuf,
                  wordCount);

    uart_clearRecvBuf();
 8000ee0:	f7ff fd6e 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000ee4:	f7ff fd1e 	bl	8000924 <uart_responAck>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <romRead>:

// rom 读取透传
// i 2B.包大小 0xf6 4B.始地址 2B.读取数量 2B.CRC
// o 2B.CRC nB.数据
void romRead()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <romRead+0x58>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3303      	adds	r3, #3
 8000f00:	617b      	str	r3, [r7, #20]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
    uint32_t wordAddress = baseAddress >> 1;
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	085b      	lsrs	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	791a      	ldrb	r2, [r3, #4]
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	4313      	orrs	r3, r2
 8000f18:	817b      	strh	r3, [r7, #10]
    uint16_t wordCount = byteCount / 2;
 8000f1a:	897b      	ldrh	r3, [r7, #10]
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	813b      	strh	r3, [r7, #8]
    // 数据
    uint16_t *dataBuf = (uint16_t *)uart_respon->payload;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <romRead+0x5c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3302      	adds	r3, #2
 8000f26:	607b      	str	r3, [r7, #4]

    cart_romRead(
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	68f8      	ldr	r0, [r7, #12]
 8000f30:	f7ff f98a 	bl	8000248 <cart_romRead>
        wordAddress,
        dataBuf,
        wordCount);

    // 返回数据
    uart_clearRecvBuf();
 8000f34:	f7ff fd44 	bl	80009c0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 8000f38:	897b      	ldrh	r3, [r7, #10]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fca9 	bl	8000894 <uart_responData>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000008 	.word	0x20000008

08000f54 <ramWrite>:

// ram写入
// i 2B.包大小 0xf7 4B.基地址 nB.写入数据 2B.CRC
// o 0xaa
void ramWrite()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <ramWrite+0x48>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3303      	adds	r3, #3
 8000f60:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <ramWrite+0x48>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	3b09      	subs	r3, #9
 8000f74:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	603b      	str	r3, [r7, #0]
    //     bank = 1;
    // else
    //     bank = 0;
    // cart_romWrite(0x800000, &bank, 1);

    cart_ramWrite((uint16_t)baseAddress, dataBuf, byteCount);
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	6839      	ldr	r1, [r7, #0]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa31 	bl	80003ec <cart_ramWrite>

    // 回复ack
    uart_clearRecvBuf();
 8000f8a:	f7ff fd19 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8000f8e:	f7ff fcc9 	bl	8000924 <uart_responAck>
}
 8000f92:	bf00      	nop
 8000f94:	3710      	adds	r7, #16
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <ramRead>:

// ram 读取
// i 2B.包大小 0xf8 4B.基地址 2B.读取数量 2B.CRC
// o 2B.CRC nB.数据
void ramRead()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 8000fa6:	4b11      	ldr	r3, [pc, #68]	@ (8000fec <ramRead+0x4c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3303      	adds	r3, #3
 8000fac:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	791a      	ldrb	r2, [r3, #4]
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <ramRead+0x50>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	603b      	str	r3, [r7, #0]
    //     bank = 1;
    // else
    //     bank = 0;
    // cart_romWrite(0x800000, &bank, 1);

    cart_ramRead((uint16_t)baseAddress, dataBuf, byteCount);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	88fa      	ldrh	r2, [r7, #6]
 8000fce:	6839      	ldr	r1, [r7, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f9c7 	bl	8000364 <cart_ramRead>

    // 返回数据
    uart_clearRecvBuf();
 8000fd6:	f7ff fcf3 	bl	80009c0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 8000fda:	88fb      	ldrh	r3, [r7, #6]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f7ff fc58 	bl	8000894 <uart_responData>
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000004 	.word	0x20000004
 8000ff0:	20000008 	.word	0x20000008

08000ff4 <ramProgramFlash>:

void ramProgramFlash()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000ffa:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <ramProgramFlash+0xcc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3303      	adds	r3, #3
 8001000:	613b      	str	r3, [r7, #16]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b29b      	uxth	r3, r3
 8001008:	60fb      	str	r3, [r7, #12]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 800100a:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <ramProgramFlash+0xcc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	3b09      	subs	r3, #9
 8001014:	817b      	strh	r3, [r7, #10]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	3304      	adds	r3, #4
 800101a:	607b      	str	r3, [r7, #4]

    // 切bank在上位机完成

    // 逐字节写入
    uint8_t cmd;
    for (int i = 0; i < byteCount; i++)
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	e043      	b.n	80010aa <ramProgramFlash+0xb6>
    {
        cmd = 0xaa;
 8001022:	23aa      	movs	r3, #170	@ 0xaa
 8001024:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x5555, &cmd, 1);
 8001026:	1cfb      	adds	r3, r7, #3
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f245 5055 	movw	r0, #21845	@ 0x5555
 8001030:	f7ff f9dc 	bl	80003ec <cart_ramWrite>
        cmd = 0x55;
 8001034:	2355      	movs	r3, #85	@ 0x55
 8001036:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x2aaa, &cmd, 1);
 8001038:	1cfb      	adds	r3, r7, #3
 800103a:	2201      	movs	r2, #1
 800103c:	4619      	mov	r1, r3
 800103e:	f642 20aa 	movw	r0, #10922	@ 0x2aaa
 8001042:	f7ff f9d3 	bl	80003ec <cart_ramWrite>
        cmd = 0xa0;
 8001046:	23a0      	movs	r3, #160	@ 0xa0
 8001048:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x5555, &cmd, 1); // FLASH_COMMAND_PROGRAM
 800104a:	1cfb      	adds	r3, r7, #3
 800104c:	2201      	movs	r2, #1
 800104e:	4619      	mov	r1, r3
 8001050:	f245 5055 	movw	r0, #21845	@ 0x5555
 8001054:	f7ff f9ca 	bl	80003ec <cart_ramWrite>
        cart_ramWrite((uint16_t)(baseAddress + i), dataBuf + i, 1);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	b29a      	uxth	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	b29b      	uxth	r3, r3
 8001060:	4413      	add	r3, r2
 8001062:	b298      	uxth	r0, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	2201      	movs	r2, #1
 800106c:	4619      	mov	r1, r3
 800106e:	f7ff f9bd 	bl	80003ec <cart_ramWrite>

        // wait for done
        uint8_t temp;
        do
        {
            cart_ramRead((uint16_t)(baseAddress + i), &temp, 1);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	b29a      	uxth	r2, r3
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29b      	uxth	r3, r3
 800107e:	1cb9      	adds	r1, r7, #2
 8001080:	2201      	movs	r2, #1
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f96e 	bl	8000364 <cart_ramRead>
            if (cmdBuf_p == 0)
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <ramProgramFlash+0xd0>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <ramProgramFlash+0xa2>
            {
                uart_clearRecvBuf();
 8001090:	f7ff fc96 	bl	80009c0 <uart_clearRecvBuf>
 8001094:	e011      	b.n	80010ba <ramProgramFlash+0xc6>
                return;
            }
        } while (temp != dataBuf[i]);
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	78bb      	ldrb	r3, [r7, #2]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d1e6      	bne.n	8001072 <ramProgramFlash+0x7e>
    for (int i = 0; i < byteCount; i++)
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	3301      	adds	r3, #1
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	897b      	ldrh	r3, [r7, #10]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	dbb7      	blt.n	8001022 <ramProgramFlash+0x2e>
    }

    // 回复ack
    uart_clearRecvBuf();
 80010b2:	f7ff fc85 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 80010b6:	f7ff fc35 	bl	8000924 <uart_responAck>
}
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000004 	.word	0x20000004
 80010c4:	200001a0 	.word	0x200001a0

080010c8 <gbcWrite>:
////////////////////////////////////////////////////////////
/// 下面是gbc的功能
////////////////////////////////////////////////////////////

void gbcWrite()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <gbcWrite+0x48>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3303      	adds	r3, #3
 80010d4:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 80010de:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <gbcWrite+0x48>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3b09      	subs	r3, #9
 80010e8:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3304      	adds	r3, #4
 80010ee:	603b      	str	r3, [r7, #0]

    cart_gbcWrite((uint16_t)baseAddress, dataBuf, byteCount);
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	88fa      	ldrh	r2, [r7, #6]
 80010f6:	6839      	ldr	r1, [r7, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff f9ff 	bl	80004fc <cart_gbcWrite>

    // 回复ack
    uart_clearRecvBuf();
 80010fe:	f7ff fc5f 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8001102:	f7ff fc0f 	bl	8000924 <uart_responAck>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000004 	.word	0x20000004

08001114 <gbcRead>:

void gbcRead()
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <gbcRead+0x4c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	3303      	adds	r3, #3
 8001120:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	791a      	ldrb	r2, [r3, #4]
 800112c:	795b      	ldrb	r3, [r3, #5]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	4313      	orrs	r3, r2
 8001132:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <gbcRead+0x50>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3302      	adds	r3, #2
 800113a:	603b      	str	r3, [r7, #0]

    cart_gbcRead((uint16_t)baseAddress, dataBuf, byteCount);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	b29b      	uxth	r3, r3
 8001140:	88fa      	ldrh	r2, [r7, #6]
 8001142:	6839      	ldr	r1, [r7, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f997 	bl	8000478 <cart_gbcRead>

    // 返回数据
    uart_clearRecvBuf();
 800114a:	f7ff fc39 	bl	80009c0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4619      	mov	r1, r3
 8001152:	2000      	movs	r0, #0
 8001154:	f7ff fb9e 	bl	8000894 <uart_responData>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000004 	.word	0x20000004
 8001164:	20000008 	.word	0x20000008

08001168 <gbcRomProgram>:

void gbcRomProgram()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 800116e:	4b67      	ldr	r3, [pc, #412]	@ (800130c <gbcRomProgram+0x1a4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3303      	adds	r3, #3
 8001174:	617b      	str	r3, [r7, #20]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	613b      	str	r3, [r7, #16]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_BUFF_SIZE - SIZE_CRC;
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <gbcRomProgram+0x1a4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	881b      	ldrh	r3, [r3, #0]
 8001184:	b29b      	uxth	r3, r3
 8001186:	3b0b      	subs	r3, #11
 8001188:	81fb      	strh	r3, [r7, #14]
    // 编程buff大小
    uint16_t bufferWriteBytes = *((uint16_t *)(desc_write->payload));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	3304      	adds	r3, #4
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	81bb      	strh	r3, [r7, #12]
    // 数据
    uint8_t *dataBuf = desc_write->payload + SIZE_BUFF_SIZE;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3304      	adds	r3, #4
 8001196:	3302      	adds	r3, #2
 8001198:	60bb      	str	r3, [r7, #8]

    uint32_t writtenCount = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]

    while (writtenCount < byteCount)
 800119e:	e0a8      	b.n	80012f2 <gbcRomProgram+0x18a>
    {
        uint8_t cmd;
        uint32_t startingAddress = baseAddress + writtenCount;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	4413      	add	r3, r2
 80011a6:	607b      	str	r3, [r7, #4]

        // 不能多字节编程编程
        if (bufferWriteBytes == 0)
 80011a8:	89bb      	ldrh	r3, [r7, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d13c      	bne.n	8001228 <gbcRomProgram+0xc0>
        {

            cmd = 0xaa;
 80011ae:	23aa      	movs	r3, #170	@ 0xaa
 80011b0:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1);
 80011b2:	1cfb      	adds	r3, r7, #3
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 80011bc:	f7ff f99e 	bl	80004fc <cart_gbcWrite>
            cmd = 0x55;
 80011c0:	2355      	movs	r3, #85	@ 0x55
 80011c2:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0x555, &cmd, 1);
 80011c4:	1cfb      	adds	r3, r7, #3
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f240 5055 	movw	r0, #1365	@ 0x555
 80011ce:	f7ff f995 	bl	80004fc <cart_gbcWrite>
            cmd = 0xa0;
 80011d2:	23a0      	movs	r3, #160	@ 0xa0
 80011d4:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1); // FLASH_COMMAND_PROGRAM
 80011d6:	1cfb      	adds	r3, r7, #3
 80011d8:	2201      	movs	r2, #1
 80011da:	4619      	mov	r1, r3
 80011dc:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 80011e0:	f7ff f98c 	bl	80004fc <cart_gbcWrite>
            cart_gbcWrite((uint16_t)(startingAddress), dataBuf + writtenCount, 1);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	b298      	uxth	r0, r3
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	4413      	add	r3, r2
 80011ee:	2201      	movs	r2, #1
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff f983 	bl	80004fc <cart_gbcWrite>

            // wait for done
            uint8_t temp;
            do
            {
                cart_gbcRead((uint16_t)(startingAddress), &temp, 1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	1cb9      	adds	r1, r7, #2
 80011fc:	2201      	movs	r2, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f93a 	bl	8000478 <cart_gbcRead>
                if (cmdBuf_p == 0)
 8001204:	4b42      	ldr	r3, [pc, #264]	@ (8001310 <gbcRomProgram+0x1a8>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <gbcRomProgram+0xaa>
                {
                    uart_clearRecvBuf();
 800120c:	f7ff fbd8 	bl	80009c0 <uart_clearRecvBuf>
 8001210:	e078      	b.n	8001304 <gbcRomProgram+0x19c>
                    return;
                }
            } while (temp != dataBuf[writtenCount]);
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	4413      	add	r3, r2
 8001218:	781a      	ldrb	r2, [r3, #0]
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	429a      	cmp	r2, r3
 800121e:	d1ea      	bne.n	80011f6 <gbcRomProgram+0x8e>

            writtenCount++;
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	e064      	b.n	80012f2 <gbcRomProgram+0x18a>
        }
        // 可以多字节编程
        else
        {
            uint16_t writeLen = byteCount - writtenCount;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	b29b      	uxth	r3, r3
 800122c:	89fa      	ldrh	r2, [r7, #14]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	837b      	strh	r3, [r7, #26]
            if (writeLen > bufferWriteBytes)
 8001232:	8b7a      	ldrh	r2, [r7, #26]
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	429a      	cmp	r2, r3
 8001238:	d901      	bls.n	800123e <gbcRomProgram+0xd6>
                writeLen = bufferWriteBytes;
 800123a:	89bb      	ldrh	r3, [r7, #12]
 800123c:	837b      	strh	r3, [r7, #26]
            // uint32_t sectorAddress = startingAddress & 0xffff0000;

            cmd = 0xaa;
 800123e:	23aa      	movs	r3, #170	@ 0xaa
 8001240:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1);
 8001242:	1cfb      	adds	r3, r7, #3
 8001244:	2201      	movs	r2, #1
 8001246:	4619      	mov	r1, r3
 8001248:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 800124c:	f7ff f956 	bl	80004fc <cart_gbcWrite>
            cmd = 0x55;
 8001250:	2355      	movs	r3, #85	@ 0x55
 8001252:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0x555, &cmd, 1);
 8001254:	1cfb      	adds	r3, r7, #3
 8001256:	2201      	movs	r2, #1
 8001258:	4619      	mov	r1, r3
 800125a:	f240 5055 	movw	r0, #1365	@ 0x555
 800125e:	f7ff f94d 	bl	80004fc <cart_gbcWrite>
            cmd = 0x25;
 8001262:	2325      	movs	r3, #37	@ 0x25
 8001264:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	1cf9      	adds	r1, r7, #3
 800126c:	2201      	movs	r2, #1
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f944 	bl	80004fc <cart_gbcWrite>

            cmd = writeLen - 1;
 8001274:	8b7b      	ldrh	r3, [r7, #26]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	3b01      	subs	r3, #1
 800127a:	b2db      	uxtb	r3, r3
 800127c:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	b29b      	uxth	r3, r3
 8001282:	1cf9      	adds	r1, r7, #3
 8001284:	2201      	movs	r2, #1
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f938 	bl	80004fc <cart_gbcWrite>

            cart_gbcWrite(startingAddress,
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	b298      	uxth	r0, r3
 8001290:	68ba      	ldr	r2, [r7, #8]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4413      	add	r3, r2
 8001296:	8b7a      	ldrh	r2, [r7, #26]
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff f92f 	bl	80004fc <cart_gbcWrite>
                          dataBuf + writtenCount,
                          writeLen);

            cmd = 0x29;
 800129e:	2329      	movs	r3, #41	@ 0x29
 80012a0:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	1cf9      	adds	r1, r7, #3
 80012a8:	2201      	movs	r2, #1
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f926 	bl	80004fc <cart_gbcWrite>

            // wait for done
            uint8_t temp;
            do
            {
                cart_gbcRead((uint16_t)(startingAddress + writeLen - 1), &temp, 1);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	8b7b      	ldrh	r3, [r7, #26]
 80012b6:	4413      	add	r3, r2
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29b      	uxth	r3, r3
 80012be:	1c79      	adds	r1, r7, #1
 80012c0:	2201      	movs	r2, #1
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8d8 	bl	8000478 <cart_gbcRead>
                if (cmdBuf_p == 0)
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <gbcRomProgram+0x1a8>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <gbcRomProgram+0x16e>
                {
                    uart_clearRecvBuf();
 80012d0:	f7ff fb76 	bl	80009c0 <uart_clearRecvBuf>
 80012d4:	e016      	b.n	8001304 <gbcRomProgram+0x19c>
                    return;
                }
            } while (temp != *(dataBuf + writtenCount + writeLen - 1));
 80012d6:	8b7a      	ldrh	r2, [r7, #26]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	4413      	add	r3, r2
 80012dc:	3b01      	subs	r3, #1
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d1e2      	bne.n	80012b0 <gbcRomProgram+0x148>

            writtenCount += writeLen;
 80012ea:	8b7b      	ldrh	r3, [r7, #26]
 80012ec:	69fa      	ldr	r2, [r7, #28]
 80012ee:	4413      	add	r3, r2
 80012f0:	61fb      	str	r3, [r7, #28]
    while (writtenCount < byteCount)
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	69fa      	ldr	r2, [r7, #28]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f4ff af52 	bcc.w	80011a0 <gbcRomProgram+0x38>
        }
    }

    // 回复ack
    uart_clearRecvBuf();
 80012fc:	f7ff fb60 	bl	80009c0 <uart_clearRecvBuf>
    uart_responAck();
 8001300:	f7ff fb10 	bl	8000924 <uart_responAck>
}
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000004 	.word	0x20000004
 8001310:	200001a0 	.word	0x200001a0

08001314 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001314:	f7ff fa86 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480b      	ldr	r0, [pc, #44]	@ (8001348 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800131a:	490c      	ldr	r1, [pc, #48]	@ (800134c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800131c:	4a0c      	ldr	r2, [pc, #48]	@ (8001350 <LoopFillZerobss+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a09      	ldr	r2, [pc, #36]	@ (8001354 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001330:	4c09      	ldr	r4, [pc, #36]	@ (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800133e:	f007 f8cd 	bl	80084dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001342:	f7ff f91f 	bl	8000584 <main>
  bx lr
 8001346:	4770      	bx	lr
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001350:	080085cc 	.word	0x080085cc
  ldr r2, =_sbss
 8001354:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001358:	20003e64 	.word	0x20003e64

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>
	...

08001360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_Init+0x28>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_Init+0x28>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f923 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001376:	200f      	movs	r0, #15
 8001378:	f000 f808 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800137c:	f7ff f9ea 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40022000 	.word	0x40022000

0800138c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_InitTick+0x54>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <HAL_InitTick+0x58>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f93b 	bl	8001626 <HAL_SYSTICK_Config>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00e      	b.n	80013d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d80a      	bhi.n	80013d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f903 	bl	80015d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <HAL_InitTick+0x5c>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000000 	.word	0x20000000
 80013e4:	20000010 	.word	0x20000010
 80013e8:	2000000c 	.word	0x2000000c

080013ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_IncTick+0x1c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_IncTick+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	4a03      	ldr	r2, [pc, #12]	@ (800140c <HAL_IncTick+0x20>)
 80013fe:	6013      	str	r3, [r2, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000010 	.word	0x20000010
 800140c:	20002ca0 	.word	0x20002ca0

08001410 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b02      	ldr	r3, [pc, #8]	@ (8001420 <HAL_GetTick+0x10>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr
 8001420:	20002ca0 	.word	0x20002ca0

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4906      	ldr	r1, [pc, #24]	@ (80014bc <__NVIC_EnableIRQ+0x34>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	@ (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	@ (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff90 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff2d 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff42 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff35 	bl	8001488 <__NVIC_EnableIRQ>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ffa2 	bl	8001578 <SysTick_Config>
 8001634:	4603      	mov	r3, r0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001640:	b480      	push	{r7}
 8001642:	b08b      	sub	sp, #44	@ 0x2c
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800164a:	2300      	movs	r3, #0
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800164e:	2300      	movs	r3, #0
 8001650:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001652:	e169      	b.n	8001928 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001654:	2201      	movs	r2, #1
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 8158 	bne.w	8001922 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4a9a      	ldr	r2, [pc, #616]	@ (80018e0 <HAL_GPIO_Init+0x2a0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d05e      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 800167c:	4a98      	ldr	r2, [pc, #608]	@ (80018e0 <HAL_GPIO_Init+0x2a0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d875      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 8001682:	4a98      	ldr	r2, [pc, #608]	@ (80018e4 <HAL_GPIO_Init+0x2a4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d058      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001688:	4a96      	ldr	r2, [pc, #600]	@ (80018e4 <HAL_GPIO_Init+0x2a4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d86f      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800168e:	4a96      	ldr	r2, [pc, #600]	@ (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d052      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 8001694:	4a94      	ldr	r2, [pc, #592]	@ (80018e8 <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d869      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 800169a:	4a94      	ldr	r2, [pc, #592]	@ (80018ec <HAL_GPIO_Init+0x2ac>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d04c      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016a0:	4a92      	ldr	r2, [pc, #584]	@ (80018ec <HAL_GPIO_Init+0x2ac>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d863      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016a6:	4a92      	ldr	r2, [pc, #584]	@ (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d046      	beq.n	800173a <HAL_GPIO_Init+0xfa>
 80016ac:	4a90      	ldr	r2, [pc, #576]	@ (80018f0 <HAL_GPIO_Init+0x2b0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d85d      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d82a      	bhi.n	800170c <HAL_GPIO_Init+0xcc>
 80016b6:	2b12      	cmp	r3, #18
 80016b8:	d859      	bhi.n	800176e <HAL_GPIO_Init+0x12e>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <HAL_GPIO_Init+0x80>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	0800173b 	.word	0x0800173b
 80016c4:	08001715 	.word	0x08001715
 80016c8:	08001727 	.word	0x08001727
 80016cc:	08001769 	.word	0x08001769
 80016d0:	0800176f 	.word	0x0800176f
 80016d4:	0800176f 	.word	0x0800176f
 80016d8:	0800176f 	.word	0x0800176f
 80016dc:	0800176f 	.word	0x0800176f
 80016e0:	0800176f 	.word	0x0800176f
 80016e4:	0800176f 	.word	0x0800176f
 80016e8:	0800176f 	.word	0x0800176f
 80016ec:	0800176f 	.word	0x0800176f
 80016f0:	0800176f 	.word	0x0800176f
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	0800176f 	.word	0x0800176f
 80016fc:	0800176f 	.word	0x0800176f
 8001700:	0800176f 	.word	0x0800176f
 8001704:	0800171d 	.word	0x0800171d
 8001708:	08001731 	.word	0x08001731
 800170c:	4a79      	ldr	r2, [pc, #484]	@ (80018f4 <HAL_GPIO_Init+0x2b4>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001712:	e02c      	b.n	800176e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e029      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	3304      	adds	r3, #4
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e024      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	3308      	adds	r3, #8
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e01f      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	330c      	adds	r3, #12
 8001736:	623b      	str	r3, [r7, #32]
          break;
 8001738:	e01a      	b.n	8001770 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d102      	bne.n	8001748 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001742:	2304      	movs	r3, #4
 8001744:	623b      	str	r3, [r7, #32]
          break;
 8001746:	e013      	b.n	8001770 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001750:	2308      	movs	r3, #8
 8001752:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	69fa      	ldr	r2, [r7, #28]
 8001758:	611a      	str	r2, [r3, #16]
          break;
 800175a:	e009      	b.n	8001770 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	615a      	str	r2, [r3, #20]
          break;
 8001766:	e003      	b.n	8001770 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e000      	b.n	8001770 <HAL_GPIO_Init+0x130>
          break;
 800176e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2bff      	cmp	r3, #255	@ 0xff
 8001774:	d801      	bhi.n	800177a <HAL_GPIO_Init+0x13a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	e001      	b.n	800177e <HAL_GPIO_Init+0x13e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3304      	adds	r3, #4
 800177e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	2bff      	cmp	r3, #255	@ 0xff
 8001784:	d802      	bhi.n	800178c <HAL_GPIO_Init+0x14c>
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0x152>
 800178c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178e:	3b08      	subs	r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	210f      	movs	r1, #15
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	fa01 f303 	lsl.w	r3, r1, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	6a39      	ldr	r1, [r7, #32]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	431a      	orrs	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80b1 	beq.w	8001922 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017c0:	4b4d      	ldr	r3, [pc, #308]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6193      	str	r3, [r2, #24]
 80017cc:	4b4a      	ldr	r3, [pc, #296]	@ (80018f8 <HAL_GPIO_Init+0x2b8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017d8:	4a48      	ldr	r2, [pc, #288]	@ (80018fc <HAL_GPIO_Init+0x2bc>)
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	089b      	lsrs	r3, r3, #2
 80017de:	3302      	adds	r3, #2
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4013      	ands	r3, r2
 80017fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	@ (8001900 <HAL_GPIO_Init+0x2c0>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d013      	beq.n	800182c <HAL_GPIO_Init+0x1ec>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a3f      	ldr	r2, [pc, #252]	@ (8001904 <HAL_GPIO_Init+0x2c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00d      	beq.n	8001828 <HAL_GPIO_Init+0x1e8>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a3e      	ldr	r2, [pc, #248]	@ (8001908 <HAL_GPIO_Init+0x2c8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d007      	beq.n	8001824 <HAL_GPIO_Init+0x1e4>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a3d      	ldr	r2, [pc, #244]	@ (800190c <HAL_GPIO_Init+0x2cc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_GPIO_Init+0x1e0>
 800181c:	2303      	movs	r3, #3
 800181e:	e006      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001820:	2304      	movs	r3, #4
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001824:	2302      	movs	r3, #2
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1ee>
 800182c:	2300      	movs	r3, #0
 800182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183e:	492f      	ldr	r1, [pc, #188]	@ (80018fc <HAL_GPIO_Init+0x2bc>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001858:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	492c      	ldr	r1, [pc, #176]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4928      	ldr	r1, [pc, #160]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001870:	4013      	ands	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	4922      	ldr	r1, [pc, #136]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	491e      	ldr	r1, [pc, #120]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 8001898:	4013      	ands	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a8:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4918      	ldr	r1, [pc, #96]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4914      	ldr	r1, [pc, #80]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d021      	beq.n	8001914 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	490e      	ldr	r1, [pc, #56]	@ (8001910 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e021      	b.n	8001922 <HAL_GPIO_Init+0x2e2>
 80018de:	bf00      	nop
 80018e0:	10320000 	.word	0x10320000
 80018e4:	10310000 	.word	0x10310000
 80018e8:	10220000 	.word	0x10220000
 80018ec:	10210000 	.word	0x10210000
 80018f0:	10120000 	.word	0x10120000
 80018f4:	10110000 	.word	0x10110000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_GPIO_Init+0x304>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	43db      	mvns	r3, r3
 800191c:	4909      	ldr	r1, [pc, #36]	@ (8001944 <HAL_GPIO_Init+0x304>)
 800191e:	4013      	ands	r3, r2
 8001920:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	3301      	adds	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	fa22 f303 	lsr.w	r3, r2, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	f47f ae8e 	bne.w	8001654 <HAL_GPIO_Init+0x14>
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	372c      	adds	r7, #44	@ 0x2c
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
 8001954:	4613      	mov	r3, r2
 8001956:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001958:	787b      	ldrb	r3, [r7, #1]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001964:	e003      	b.n	800196e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	041a      	lsls	r2, r3, #16
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0e8      	b.n	8001b5c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d106      	bne.n	80019a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f006 faea 	bl	8007f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2203      	movs	r2, #3
 80019a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 f9f5 	bl	8003da6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6818      	ldr	r0, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c6:	f002 f9cb 	bl	8003d60 <USB_CoreInit>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0bf      	b.n	8001b5c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 f9f9 	bl	8003dda <USB_SetCurrentMode>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0b0      	b.n	8001b5c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	73fb      	strb	r3, [r7, #15]
 80019fe:	e03e      	b.n	8001a7e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a00:	7bfa      	ldrb	r2, [r7, #15]
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3311      	adds	r3, #17
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	440b      	add	r3, r1
 8001a22:	3310      	adds	r3, #16
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	440b      	add	r3, r1
 8001a36:	3313      	adds	r3, #19
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a3c:	7bfa      	ldrb	r2, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3320      	adds	r3, #32
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3324      	adds	r3, #36	@ 0x24
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	1c5a      	adds	r2, r3, #1
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	4413      	add	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	440b      	add	r3, r1
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	7bfa      	ldrb	r2, [r7, #15]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d3bb      	bcc.n	8001a00 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	73fb      	strb	r3, [r7, #15]
 8001a8c:	e044      	b.n	8001b18 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a8e:	7bfa      	ldrb	r2, [r7, #15]
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001aa4:	7bfa      	ldrb	r2, [r7, #15]
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ab6:	7bfa      	ldrb	r2, [r7, #15]
 8001ab8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001aba:	7bfa      	ldrb	r2, [r7, #15]
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ad0:	7bfa      	ldrb	r2, [r7, #15]
 8001ad2:	6879      	ldr	r1, [r7, #4]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	791b      	ldrb	r3, [r3, #4]
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3b5      	bcc.n	8001a8e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b2c:	f002 f961 	bl	8003df2 <USB_DevInit>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d005      	beq.n	8001b42 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00c      	b.n	8001b5c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2200      	movs	r2, #0
 8001b46:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f004 fbe0 	bl	800631a <USB_DevDisconnect>

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_Start+0x16>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e016      	b.n	8001ba8 <HAL_PCD_Start+0x44>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 f8f7 	bl	8003d7a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f006 fc65 	bl	800845e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f004 fbb4 	bl	8006306 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f004 fbb6 	bl	800632e <USB_ReadInterrupts>
 8001bc2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fb1a 	bl	8002208 <PCD_EP_ISR_Handler>

    return;
 8001bd4:	e119      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bf2:	b292      	uxth	r2, r2
 8001bf4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f006 fa38 	bl	800806e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 f905 	bl	8001e10 <HAL_PCD_SetAddress>

    return;
 8001c06:	e100      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c24:	b292      	uxth	r2, r2
 8001c26:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c2a:	e0ee      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c48:	b292      	uxth	r2, r2
 8001c4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001c4e:	e0dc      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d027      	beq.n	8001caa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0204 	bic.w	r2, r2, #4
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0208 	bic.w	r2, r2, #8
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f006 fa28 	bl	80080e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ca2:	b292      	uxth	r2, r2
 8001ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ca8:	e0af      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8083 	beq.w	8001dbc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	77fb      	strb	r3, [r7, #31]
 8001cba:	e010      	b.n	8001cde <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	441a      	add	r2, r3
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	8812      	ldrh	r2, [r2, #0]
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	3320      	adds	r3, #32
 8001cd2:	443b      	add	r3, r7
 8001cd4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001cd8:	7ffb      	ldrb	r3, [r7, #31]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	77fb      	strb	r3, [r7, #31]
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b07      	cmp	r3, #7
 8001ce2:	d9eb      	bls.n	8001cbc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0201 	bic.w	r2, r2, #1
 8001d0e:	b292      	uxth	r2, r2
 8001d10:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001d14:	bf00      	nop
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f6      	beq.n	8001d16 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d3a:	b292      	uxth	r2, r2
 8001d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	77fb      	strb	r3, [r7, #31]
 8001d44:	e00f      	b.n	8001d66 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001d46:	7ffb      	ldrb	r3, [r7, #31]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	7ffa      	ldrb	r2, [r7, #31]
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	440a      	add	r2, r1
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	3320      	adds	r3, #32
 8001d58:	443b      	add	r3, r7
 8001d5a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001d5e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	3301      	adds	r3, #1
 8001d64:	77fb      	strb	r3, [r7, #31]
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	2b07      	cmp	r3, #7
 8001d6a:	d9ec      	bls.n	8001d46 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	b292      	uxth	r2, r2
 8001d80:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d96:	b292      	uxth	r2, r2
 8001d98:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0204 	orr.w	r2, r2, #4
 8001dae:	b292      	uxth	r2, r2
 8001db0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f006 f979 	bl	80080ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001dba:	e026      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00f      	beq.n	8001de6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f006 f937 	bl	8008052 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001de4:	e011      	b.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00c      	beq.n	8001e0a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e02:	b292      	uxth	r2, r2
 8001e04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001e08:	bf00      	nop
  }
}
 8001e0a:	3720      	adds	r7, #32
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_PCD_SetAddress+0x1a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e012      	b.n	8001e50 <HAL_PCD_SetAddress+0x40>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f004 fa4d 	bl	80062e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	4608      	mov	r0, r1
 8001e62:	4611      	mov	r1, r2
 8001e64:	461a      	mov	r2, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	70fb      	strb	r3, [r7, #3]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	803b      	strh	r3, [r7, #0]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da0e      	bge.n	8001e9c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	f003 0207 	and.w	r2, r3, #7
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00e      	b.n	8001eba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 0207 	and.w	r2, r3, #7
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ec6:	883a      	ldrh	r2, [r7, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	78ba      	ldrb	r2, [r7, #2]
 8001ed0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ed2:	78bb      	ldrb	r3, [r7, #2]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_PCD_EP_Open+0x94>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e00e      	b.n	8001f0a <HAL_PCD_EP_Open+0xb2>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f001 ff96 	bl	8003e2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8001f08:	7afb      	ldrb	r3, [r7, #11]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b084      	sub	sp, #16
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da0e      	bge.n	8001f44 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	f003 0207 	and.w	r2, r3, #7
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	3310      	adds	r3, #16
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	705a      	strb	r2, [r3, #1]
 8001f42:	e00e      	b.n	8001f62 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	f003 0207 	and.w	r2, r3, #7
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_PCD_EP_Close+0x6a>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e00e      	b.n	8001f9a <HAL_PCD_EP_Close+0x88>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68f9      	ldr	r1, [r7, #12]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 fb0e 	bl	80045ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0207 	and.w	r2, r3, #7
 8001fb8:	4613      	mov	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fe2:	7afb      	ldrb	r3, [r7, #11]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6979      	ldr	r1, [r7, #20]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fcc5 	bl	8004984 <USB_EPStartXfer>

  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 0207 	and.w	r2, r3, #7
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	607a      	str	r2, [r7, #4]
 800203c:	603b      	str	r3, [r7, #0]
 800203e:	460b      	mov	r3, r1
 8002040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002042:	7afb      	ldrb	r3, [r7, #11]
 8002044:	f003 0207 	and.w	r2, r3, #7
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	3310      	adds	r3, #16
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4413      	add	r3, r2
 8002056:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2200      	movs	r2, #0
 8002076:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2201      	movs	r2, #1
 800207c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800207e:	7afb      	ldrb	r3, [r7, #11]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	b2da      	uxtb	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6979      	ldr	r1, [r7, #20]
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fc77 	bl	8004984 <USB_EPStartXfer>

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	7912      	ldrb	r2, [r2, #4]
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e04c      	b.n	8002158 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da0e      	bge.n	80020e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 0207 	and.w	r2, r3, #7
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	3310      	adds	r3, #16
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2201      	movs	r2, #1
 80020e0:	705a      	strb	r2, [r3, #1]
 80020e2:	e00c      	b.n	80020fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2201      	movs	r2, #1
 8002102:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	b2da      	uxtb	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_PCD_EP_SetStall+0x7e>
 800211a:	2302      	movs	r3, #2
 800211c:	e01c      	b.n	8002158 <HAL_PCD_EP_SetStall+0xb8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68f9      	ldr	r1, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f003 ffda 	bl	80060e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f004 f8ff 	bl	800634c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	7912      	ldrb	r2, [r2, #4]
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e040      	b.n	8002200 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800217e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	da0e      	bge.n	80021a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 0207 	and.w	r2, r3, #7
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	3310      	adds	r3, #16
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	705a      	strb	r2, [r3, #1]
 80021a2:	e00e      	b.n	80021c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a4:	78fb      	ldrb	r3, [r7, #3]
 80021a6:	f003 0207 	and.w	r2, r3, #7
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_EP_ClrStall+0x82>
 80021de:	2302      	movs	r3, #2
 80021e0:	e00e      	b.n	8002200 <HAL_PCD_EP_ClrStall+0xa0>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68f9      	ldr	r1, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f003 ffc8 	bl	8006186 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b096      	sub	sp, #88	@ 0x58
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002210:	e3bb      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800221a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800221e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800222c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 8175 	bne.w	8002520 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002236:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d14e      	bne.n	80022e0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	81fb      	strh	r3, [r7, #14]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800225e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002262:	b29b      	uxth	r3, r3
 8002264:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3310      	adds	r3, #16
 800226a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	3302      	adds	r3, #2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002296:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229a:	695a      	ldr	r2, [r3, #20]
 800229c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	441a      	add	r2, r3
 80022a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022a6:	2100      	movs	r1, #0
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f005 feb8 	bl	800801e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7b5b      	ldrb	r3, [r3, #13]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 8368 	beq.w	800298a <PCD_EP_ISR_Handler+0x782>
 80022ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f040 8363 	bne.w	800298a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b5b      	ldrb	r3, [r3, #13]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	735a      	strb	r2, [r3, #13]
 80022de:	e354      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	881b      	ldrh	r3, [r3, #0]
 80022ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80022f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d034      	beq.n	8002368 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	3306      	adds	r3, #6
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6812      	ldr	r2, [r2, #0]
 800231a:	4413      	add	r3, r2
 800231c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002328:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002336:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800233c:	b29b      	uxth	r3, r3
 800233e:	f004 f855 	bl	80063ec <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29a      	uxth	r2, r3
 800234a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800234e:	4013      	ands	r3, r2
 8002350:	823b      	strh	r3, [r7, #16]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	8a3a      	ldrh	r2, [r7, #16]
 8002358:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800235c:	b292      	uxth	r2, r2
 800235e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f005 fe2f 	bl	8007fc4 <HAL_PCD_SetupStageCallback>
 8002366:	e310      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002368:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800236c:	2b00      	cmp	r3, #0
 800236e:	f280 830c 	bge.w	800298a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29a      	uxth	r2, r3
 800237a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800237e:	4013      	ands	r3, r2
 8002380:	83fb      	strh	r3, [r7, #30]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	8bfa      	ldrh	r2, [r7, #30]
 8002388:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800238c:	b292      	uxth	r2, r2
 800238e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002398:	b29b      	uxth	r3, r3
 800239a:	461a      	mov	r2, r3
 800239c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	4413      	add	r3, r2
 80023a4:	3306      	adds	r3, #6
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d019      	beq.n	80023f8 <PCD_EP_ISR_Handler+0x1f0>
 80023c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d015      	beq.n	80023f8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d2:	6959      	ldr	r1, [r3, #20]
 80023d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023d6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80023d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023da:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f004 f805 	bl	80063ec <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	441a      	add	r2, r3
 80023ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023ee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f005 fdf8 	bl	8007fe8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	881b      	ldrh	r3, [r3, #0]
 80023fe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002402:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002406:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 82bd 	bne.w	800298a <PCD_EP_ISR_Handler+0x782>
 8002410:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002414:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002418:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800241c:	f000 82b5 	beq.w	800298a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	61bb      	str	r3, [r7, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800242e:	b29b      	uxth	r3, r3
 8002430:	461a      	mov	r2, r3
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4413      	add	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800244a:	b29a      	uxth	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	801a      	strh	r2, [r3, #0]
 8002450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b3e      	cmp	r3, #62	@ 0x3e
 8002456:	d91d      	bls.n	8002494 <PCD_EP_ISR_Handler+0x28c>
 8002458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 031f 	and.w	r3, r3, #31
 8002468:	2b00      	cmp	r3, #0
 800246a:	d102      	bne.n	8002472 <PCD_EP_ISR_Handler+0x26a>
 800246c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246e:	3b01      	subs	r3, #1
 8002470:	647b      	str	r3, [r7, #68]	@ 0x44
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	b29a      	uxth	r2, r3
 8002478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800247a:	b29b      	uxth	r3, r3
 800247c:	029b      	lsls	r3, r3, #10
 800247e:	b29b      	uxth	r3, r3
 8002480:	4313      	orrs	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800248c:	b29a      	uxth	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e026      	b.n	80024e2 <PCD_EP_ISR_Handler+0x2da>
 8002494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10a      	bne.n	80024b2 <PCD_EP_ISR_Handler+0x2aa>
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e017      	b.n	80024e2 <PCD_EP_ISR_Handler+0x2da>
 80024b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	085b      	lsrs	r3, r3, #1
 80024b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <PCD_EP_ISR_Handler+0x2c4>
 80024c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024c8:	3301      	adds	r3, #1
 80024ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	881b      	ldrh	r3, [r3, #0]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4313      	orrs	r3, r2
 80024dc:	b29a      	uxth	r2, r3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80024ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024f2:	827b      	strh	r3, [r7, #18]
 80024f4:	8a7b      	ldrh	r3, [r7, #18]
 80024f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80024fa:	827b      	strh	r3, [r7, #18]
 80024fc:	8a7b      	ldrh	r3, [r7, #18]
 80024fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002502:	827b      	strh	r3, [r7, #18]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	8a7b      	ldrh	r3, [r7, #18]
 800250a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800250e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]
 800251e:	e234      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4413      	add	r3, r2
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002534:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002538:	2b00      	cmp	r3, #0
 800253a:	f280 80fc 	bge.w	8002736 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	b29a      	uxth	r2, r3
 8002550:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002554:	4013      	ands	r3, r2
 8002556:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	461a      	mov	r2, r3
 8002560:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800256c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002570:	b292      	uxth	r2, r2
 8002572:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002574:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4413      	add	r3, r2
 8002588:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800258a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800258c:	7b1b      	ldrb	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d125      	bne.n	80025de <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	4413      	add	r3, r2
 80025a6:	3306      	adds	r3, #6
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80025be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8092 	beq.w	80026ec <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6818      	ldr	r0, [r3, #0]
 80025cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ce:	6959      	ldr	r1, [r3, #20]
 80025d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d2:	88da      	ldrh	r2, [r3, #6]
 80025d4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80025d8:	f003 ff08 	bl	80063ec <USB_ReadPMA>
 80025dc:	e086      	b.n	80026ec <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80025de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025e0:	78db      	ldrb	r3, [r3, #3]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d10a      	bne.n	80025fc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80025e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025ea:	461a      	mov	r2, r3
 80025ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9d9 	bl	80029a6 <HAL_PCD_EP_DB_Receive>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80025fa:	e077      	b.n	80026ec <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	b29b      	uxth	r3, r3
 800260e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002616:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	461a      	mov	r2, r3
 8002620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	441a      	add	r2, r3
 8002628:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800262c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002630:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002634:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002638:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800263c:	b29b      	uxth	r3, r3
 800263e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d024      	beq.n	80026a4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002662:	b29b      	uxth	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	3302      	adds	r3, #2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002682:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002686:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800268a:	2b00      	cmp	r3, #0
 800268c:	d02e      	beq.n	80026ec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002694:	6959      	ldr	r1, [r3, #20]
 8002696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002698:	891a      	ldrh	r2, [r3, #8]
 800269a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800269e:	f003 fea5 	bl	80063ec <USB_ReadPMA>
 80026a2:	e023      	b.n	80026ec <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	3306      	adds	r3, #6
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80026d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026de:	6959      	ldr	r1, [r3, #20]
 80026e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e2:	895a      	ldrh	r2, [r3, #10]
 80026e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026e8:	f003 fe80 	bl	80063ec <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80026ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80026f4:	441a      	add	r2, r3
 80026f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80026fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002702:	441a      	add	r2, r3
 8002704:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002706:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <PCD_EP_ISR_Handler+0x514>
 8002710:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	429a      	cmp	r2, r3
 800271a:	d206      	bcs.n	800272a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	4619      	mov	r1, r3
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f005 fc60 	bl	8007fe8 <HAL_PCD_DataOutStageCallback>
 8002728:	e005      	b.n	8002736 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002730:	4618      	mov	r0, r3
 8002732:	f002 f927 	bl	8004984 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002736:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8123 	beq.w	800298a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002744:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	3310      	adds	r3, #16
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	461a      	mov	r2, r3
 800275e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800276e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002772:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800278c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002790:	b29b      	uxth	r3, r3
 8002792:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002796:	78db      	ldrb	r3, [r3, #3]
 8002798:	2b01      	cmp	r3, #1
 800279a:	f040 80a2 	bne.w	80028e2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800279e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a0:	2200      	movs	r2, #0
 80027a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80027a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a6:	7b1b      	ldrb	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8093 	beq.w	80028d4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80027b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d046      	beq.n	8002848 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d126      	bne.n	8002810 <PCD_EP_ISR_Handler+0x608>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	4413      	add	r3, r2
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	011a      	lsls	r2, r3, #4
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80027e8:	623b      	str	r3, [r7, #32]
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002808:	b29a      	uxth	r2, r3
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	e061      	b.n	80028d4 <PCD_EP_ISR_Handler+0x6cc>
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002812:	785b      	ldrb	r3, [r3, #1]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d15d      	bne.n	80028d4 <PCD_EP_ISR_Handler+0x6cc>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002826:	b29b      	uxth	r3, r3
 8002828:	461a      	mov	r2, r3
 800282a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282c:	4413      	add	r3, r2
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002830:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	011a      	lsls	r2, r3, #4
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	4413      	add	r3, r2
 800283a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800283e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002842:	2200      	movs	r2, #0
 8002844:	801a      	strh	r2, [r3, #0]
 8002846:	e045      	b.n	80028d4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800284e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002850:	785b      	ldrb	r3, [r3, #1]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d126      	bne.n	80028a4 <PCD_EP_ISR_Handler+0x69c>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	637b      	str	r3, [r7, #52]	@ 0x34
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002864:	b29b      	uxth	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800286a:	4413      	add	r3, r2
 800286c:	637b      	str	r3, [r7, #52]	@ 0x34
 800286e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	011a      	lsls	r2, r3, #4
 8002874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002876:	4413      	add	r3, r2
 8002878:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800287c:	633b      	str	r3, [r7, #48]	@ 0x30
 800287e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	b29b      	uxth	r3, r3
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	b29a      	uxth	r2, r3
 800288a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800288c:	801a      	strh	r2, [r3, #0]
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289c:	b29a      	uxth	r2, r3
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	801a      	strh	r2, [r3, #0]
 80028a2:	e017      	b.n	80028d4 <PCD_EP_ISR_Handler+0x6cc>
 80028a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028a6:	785b      	ldrb	r3, [r3, #1]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d113      	bne.n	80028d4 <PCD_EP_ISR_Handler+0x6cc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	461a      	mov	r2, r3
 80028b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ba:	4413      	add	r3, r2
 80028bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	011a      	lsls	r2, r3, #4
 80028c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80028cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	2200      	movs	r2, #0
 80028d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f005 fb9f 	bl	800801e <HAL_PCD_DataInStageCallback>
 80028e0:	e053      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80028e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80028e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d146      	bne.n	800297c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4413      	add	r3, r2
 8002902:	3302      	adds	r3, #2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002916:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800291a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002922:	429a      	cmp	r2, r3
 8002924:	d907      	bls.n	8002936 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800292e:	1ad2      	subs	r2, r2, r3
 8002930:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002932:	619a      	str	r2, [r3, #24]
 8002934:	e002      	b.n	800293c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002938:	2200      	movs	r2, #0
 800293a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800293c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d106      	bne.n	8002952 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4619      	mov	r1, r3
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f005 fb67 	bl	800801e <HAL_PCD_DataInStageCallback>
 8002950:	e01b      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800295a:	441a      	add	r2, r3
 800295c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800295e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002962:	69da      	ldr	r2, [r3, #28]
 8002964:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002968:	441a      	add	r2, r3
 800296a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800296c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002974:	4618      	mov	r0, r3
 8002976:	f002 f805 	bl	8004984 <USB_EPStartXfer>
 800297a:	e006      	b.n	800298a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800297c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002980:	461a      	mov	r2, r3
 8002982:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f91b 	bl	8002bc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002992:	b29b      	uxth	r3, r3
 8002994:	b21b      	sxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	f6ff ac3b 	blt.w	8002212 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3758      	adds	r7, #88	@ 0x58
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d07e      	beq.n	8002abc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	3302      	adds	r3, #2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80029e0:	881b      	ldrh	r3, [r3, #0]
 80029e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	699a      	ldr	r2, [r3, #24]
 80029ec:	8b7b      	ldrh	r3, [r7, #26]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d306      	bcc.n	8002a00 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	699a      	ldr	r2, [r3, #24]
 80029f6:	8b7b      	ldrh	r3, [r7, #26]
 80029f8:	1ad2      	subs	r2, r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	619a      	str	r2, [r3, #24]
 80029fe:	e002      	b.n	8002a06 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d123      	bne.n	8002a56 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a28:	833b      	strh	r3, [r7, #24]
 8002a2a:	8b3b      	ldrh	r3, [r7, #24]
 8002a2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002a30:	833b      	strh	r3, [r7, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	441a      	add	r2, r3
 8002a40:	8b3b      	ldrh	r3, [r7, #24]
 8002a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01f      	beq.n	8002aa0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a7a:	82fb      	strh	r3, [r7, #22]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	441a      	add	r2, r3
 8002a8a:	8afb      	ldrh	r3, [r7, #22]
 8002a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002a94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002aa0:	8b7b      	ldrh	r3, [r7, #26]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8087 	beq.w	8002bb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	6959      	ldr	r1, [r3, #20]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	891a      	ldrh	r2, [r3, #8]
 8002ab4:	8b7b      	ldrh	r3, [r7, #26]
 8002ab6:	f003 fc99 	bl	80063ec <USB_ReadPMA>
 8002aba:	e07c      	b.n	8002bb6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	3306      	adds	r3, #6
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ae4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d306      	bcc.n	8002afe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	619a      	str	r2, [r3, #24]
 8002afc:	e002      	b.n	8002b04 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d123      	bne.n	8002b54 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b26:	83fb      	strh	r3, [r7, #30]
 8002b28:	8bfb      	ldrh	r3, [r7, #30]
 8002b2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002b2e:	83fb      	strh	r3, [r7, #30]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	441a      	add	r2, r3
 8002b3e:	8bfb      	ldrh	r3, [r7, #30]
 8002b40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11f      	bne.n	8002b9e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b78:	83bb      	strh	r3, [r7, #28]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	441a      	add	r2, r3
 8002b88:	8bbb      	ldrh	r3, [r7, #28]
 8002b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002b92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002b9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	895a      	ldrh	r2, [r3, #10]
 8002bb0:	8b7b      	ldrh	r3, [r7, #26]
 8002bb2:	f003 fc1b 	bl	80063ec <USB_ReadPMA>
    }
  }

  return count;
 8002bb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b0a4      	sub	sp, #144	@ 0x90
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 81dd 	beq.w	8002f94 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3302      	adds	r3, #2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d907      	bls.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e002      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80b9 	bne.w	8002da4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c4e:	4413      	add	r3, r2
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011a      	lsls	r2, r3, #4
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	e01a      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d116      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	4413      	add	r3, r2
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002cb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d126      	bne.n	8002d1a <HAL_PCD_EP_DB_Transmit+0x15a>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	011a      	lsls	r2, r3, #4
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	e017      	b.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	785b      	ldrb	r3, [r3, #1]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d113      	bne.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	4413      	add	r3, r2
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002d42:	623b      	str	r3, [r7, #32]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f005 f964 	bl	800801e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 82fc 	beq.w	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d7c:	82fb      	strh	r3, [r7, #22]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	441a      	add	r2, r3
 8002d8c:	8afb      	ldrh	r3, [r7, #22]
 8002d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8013      	strh	r3, [r2, #0]
 8002da2:	e2da      	b.n	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d021      	beq.n	8002df2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	441a      	add	r2, r3
 8002dda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8002dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002de6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	f040 82ae 	bne.w	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e06:	441a      	add	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e14:	441a      	add	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	6a1a      	ldr	r2, [r3, #32]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d30b      	bcc.n	8002e3e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6a1a      	ldr	r2, [r3, #32]
 8002e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e36:	1ad2      	subs	r2, r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	621a      	str	r2, [r3, #32]
 8002e3c:	e017      	b.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d108      	bne.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002e46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002e4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002e56:	e00a      	b.n	8002e6e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	785b      	ldrb	r3, [r3, #1]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d165      	bne.n	8002f42 <HAL_PCD_EP_DB_Transmit+0x382>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e8a:	4413      	add	r3, r2
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	011a      	lsls	r2, r3, #4
 8002e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e96:	4413      	add	r3, r2
 8002e98:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eac:	801a      	strh	r2, [r3, #0]
 8002eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8002eb4:	d91d      	bls.n	8002ef2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d102      	bne.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x310>
 8002eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	029b      	lsls	r3, r3, #10
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eee:	801a      	strh	r2, [r3, #0]
 8002ef0:	e044      	b.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_PCD_EP_DB_Transmit+0x350>
 8002efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	e035      	b.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x36a>
 8002f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f26:	3301      	adds	r3, #1
 8002f28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2c:	881b      	ldrh	r3, [r3, #0]
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3e:	801a      	strh	r2, [r3, #0]
 8002f40:	e01c      	b.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	785b      	ldrb	r3, [r3, #1]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d118      	bne.n	8002f7c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5e:	4413      	add	r3, r2
 8002f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	011a      	lsls	r2, r3, #4
 8002f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f70:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f7a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	6959      	ldr	r1, [r3, #20]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	891a      	ldrh	r2, [r3, #8]
 8002f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f003 f9e8 	bl	8006362 <USB_WritePMA>
 8002f92:	e1e2      	b.n	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3306      	adds	r3, #6
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	6812      	ldr	r2, [r2, #0]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fbc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d307      	bcc.n	8002fdc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002fd4:	1ad2      	subs	r2, r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	619a      	str	r2, [r3, #24]
 8002fda:	e002      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f040 80c0 	bne.w	800316c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	785b      	ldrb	r3, [r3, #1]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d126      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x482>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003002:	b29b      	uxth	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003008:	4413      	add	r3, r2
 800300a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	011a      	lsls	r2, r3, #4
 8003012:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003014:	4413      	add	r3, r2
 8003016:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800301a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800301c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003026:	b29a      	uxth	r2, r3
 8003028:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800302a:	801a      	strh	r2, [r3, #0]
 800302c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	b29b      	uxth	r3, r3
 8003032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800303a:	b29a      	uxth	r2, r3
 800303c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800303e:	801a      	strh	r2, [r3, #0]
 8003040:	e01a      	b.n	8003078 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d116      	bne.n	8003078 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800305e:	4413      	add	r3, r2
 8003060:	667b      	str	r3, [r7, #100]	@ 0x64
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	011a      	lsls	r2, r3, #4
 8003068:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800306a:	4413      	add	r3, r2
 800306c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003070:	663b      	str	r3, [r7, #96]	@ 0x60
 8003072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	677b      	str	r3, [r7, #116]	@ 0x74
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d12b      	bne.n	80030de <HAL_PCD_EP_DB_Transmit+0x51e>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800309a:	4413      	add	r3, r2
 800309c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a6:	4413      	add	r3, r2
 80030a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80030ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80030b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030bc:	b29a      	uxth	r2, r3
 80030be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030da:	801a      	strh	r2, [r3, #0]
 80030dc:	e017      	b.n	800310e <HAL_PCD_EP_DB_Transmit+0x54e>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d113      	bne.n	800310e <HAL_PCD_EP_DB_Transmit+0x54e>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	461a      	mov	r2, r3
 80030f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80030f4:	4413      	add	r3, r2
 80030f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	011a      	lsls	r2, r3, #4
 80030fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003100:	4413      	add	r3, r2
 8003102:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003106:	673b      	str	r3, [r7, #112]	@ 0x70
 8003108:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800310a:	2200      	movs	r2, #0
 800310c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f004 ff82 	bl	800801e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 811a 	bne.w	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800313c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003140:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800315a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800315e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003166:	b29b      	uxth	r3, r3
 8003168:	8013      	strh	r3, [r2, #0]
 800316a:	e0f6      	b.n	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800316c:	88fb      	ldrh	r3, [r7, #6]
 800316e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800318c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003190:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80031a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80031aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80031ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 80ca 	bne.w	800335a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031ce:	441a      	add	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	69da      	ldr	r2, [r3, #28]
 80031d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80031dc:	441a      	add	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	6a1a      	ldr	r2, [r3, #32]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d30b      	bcc.n	8003206 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031fe:	1ad2      	subs	r2, r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	621a      	str	r2, [r3, #32]
 8003204:	e017      	b.n	8003236 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d108      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800320e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800321e:	e00a      	b.n	8003236 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	657b      	str	r3, [r7, #84]	@ 0x54
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d165      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x750>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003252:	b29b      	uxth	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003258:	4413      	add	r3, r2
 800325a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	011a      	lsls	r2, r3, #4
 8003262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003264:	4413      	add	r3, r2
 8003266:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800326a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800326c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003276:	b29a      	uxth	r2, r3
 8003278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003280:	2b3e      	cmp	r3, #62	@ 0x3e
 8003282:	d91d      	bls.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x700>
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800328c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2b00      	cmp	r3, #0
 8003296:	d102      	bne.n	800329e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800329a:	3b01      	subs	r3, #1
 800329c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800329e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	029b      	lsls	r3, r3, #10
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	e041      	b.n	8003344 <HAL_PCD_EP_DB_Transmit+0x784>
 80032c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <HAL_PCD_EP_DB_Transmit+0x71e>
 80032c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032da:	801a      	strh	r2, [r3, #0]
 80032dc:	e032      	b.n	8003344 <HAL_PCD_EP_DB_Transmit+0x784>
 80032de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x738>
 80032f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f4:	3301      	adds	r3, #1
 80032f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003300:	b29b      	uxth	r3, r3
 8003302:	029b      	lsls	r3, r3, #10
 8003304:	b29b      	uxth	r3, r3
 8003306:	4313      	orrs	r3, r2
 8003308:	b29a      	uxth	r2, r3
 800330a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e019      	b.n	8003344 <HAL_PCD_EP_DB_Transmit+0x784>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d115      	bne.n	8003344 <HAL_PCD_EP_DB_Transmit+0x784>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003320:	b29b      	uxth	r3, r3
 8003322:	461a      	mov	r2, r3
 8003324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003326:	4413      	add	r3, r2
 8003328:	657b      	str	r3, [r7, #84]	@ 0x54
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	011a      	lsls	r2, r3, #4
 8003330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003332:	4413      	add	r3, r2
 8003334:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003338:	653b      	str	r3, [r7, #80]	@ 0x50
 800333a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800333e:	b29a      	uxth	r2, r3
 8003340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003342:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6959      	ldr	r1, [r3, #20]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	895a      	ldrh	r2, [r3, #10]
 8003350:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003354:	b29b      	uxth	r3, r3
 8003356:	f003 f804 	bl	8006362 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	b29b      	uxth	r3, r3
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003374:	82bb      	strh	r3, [r7, #20]
 8003376:	8abb      	ldrh	r3, [r7, #20]
 8003378:	f083 0310 	eor.w	r3, r3, #16
 800337c:	82bb      	strh	r3, [r7, #20]
 800337e:	8abb      	ldrh	r3, [r7, #20]
 8003380:	f083 0320 	eor.w	r3, r3, #32
 8003384:	82bb      	strh	r3, [r7, #20]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	441a      	add	r2, r3
 8003394:	8abb      	ldrh	r3, [r7, #20]
 8003396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800339a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800339e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3790      	adds	r7, #144	@ 0x90
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	460b      	mov	r3, r1
 80033c0:	817b      	strh	r3, [r7, #10]
 80033c2:	4613      	mov	r3, r2
 80033c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d2:	897b      	ldrh	r3, [r7, #10]
 80033d4:	f003 0207 	and.w	r2, r3, #7
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	3310      	adds	r3, #16
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4413      	add	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e009      	b.n	80033fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033ea:	897a      	ldrh	r2, [r7, #10]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033fe:	893b      	ldrh	r3, [r7, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	b29a      	uxth	r2, r3
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	80da      	strh	r2, [r3, #6]
 8003412:	e00b      	b.n	800342c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2201      	movs	r2, #1
 8003418:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	b29a      	uxth	r2, r3
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0c1b      	lsrs	r3, r3, #16
 8003426:	b29a      	uxth	r2, r3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	371c      	adds	r7, #28
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e272      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8087 	beq.w	8003566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003458:	4b92      	ldr	r3, [pc, #584]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00c      	beq.n	800347e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003464:	4b8f      	ldr	r3, [pc, #572]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d112      	bne.n	8003496 <HAL_RCC_OscConfig+0x5e>
 8003470:	4b8c      	ldr	r3, [pc, #560]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b89      	ldr	r3, [pc, #548]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06c      	beq.n	8003564 <HAL_RCC_OscConfig+0x12c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d168      	bne.n	8003564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e24c      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x76>
 80034a0:	4b80      	ldr	r3, [pc, #512]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a7f      	ldr	r2, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e02e      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b7b      	ldr	r3, [pc, #492]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7a      	ldr	r2, [pc, #488]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b78      	ldr	r3, [pc, #480]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xbc>
 80034da:	4b72      	ldr	r3, [pc, #456]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a71      	ldr	r2, [pc, #452]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b6f      	ldr	r3, [pc, #444]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6e      	ldr	r2, [pc, #440]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034f4:	4b6b      	ldr	r3, [pc, #428]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6a      	ldr	r2, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b68      	ldr	r3, [pc, #416]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a67      	ldr	r2, [pc, #412]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7fd ff7c 	bl	8001410 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7fd ff78 	bl	8001410 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e200      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b5d      	ldr	r3, [pc, #372]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xe4>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd ff68 	bl	8001410 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7fd ff64 	bl	8001410 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1ec      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x10c>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800357e:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x18c>
 800358a:	4b46      	ldr	r3, [pc, #280]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x176>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e1c0      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ae:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4939      	ldr	r1, [pc, #228]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e03a      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b36      	ldr	r3, [pc, #216]	@ (80036a8 <HAL_RCC_OscConfig+0x270>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7fd ff1d 	bl	8001410 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035da:	f7fd ff19 	bl	8001410 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1a1      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4927      	ldr	r1, [pc, #156]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <HAL_RCC_OscConfig+0x270>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7fd fefc 	bl	8001410 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7fd fef8 	bl	8001410 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e180      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d03a      	beq.n	80036bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d019      	beq.n	8003682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <HAL_RCC_OscConfig+0x274>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003654:	f7fd fedc 	bl	8001410 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365c:	f7fd fed8 	bl	8001410 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e160      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800367a:	2001      	movs	r0, #1
 800367c:	f000 fa9c 	bl	8003bb8 <RCC_Delay>
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_RCC_OscConfig+0x274>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003688:	f7fd fec2 	bl	8001410 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368e:	e00f      	b.n	80036b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7fd febe 	bl	8001410 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e146      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	42420000 	.word	0x42420000
 80036ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	4b92      	ldr	r3, [pc, #584]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e9      	bne.n	8003690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a6 	beq.w	8003816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b8b      	ldr	r3, [pc, #556]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a87      	ldr	r2, [pc, #540]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]
 80036e6:	4b85      	ldr	r3, [pc, #532]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b82      	ldr	r3, [pc, #520]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003702:	4b7f      	ldr	r3, [pc, #508]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7e      	ldr	r2, [pc, #504]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7fd fe7f 	bl	8001410 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7fd fe7b 	bl	8001410 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	@ 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e103      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	4b75      	ldr	r3, [pc, #468]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x312>
 800373c:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6213      	str	r3, [r2, #32]
 8003748:	e02d      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x334>
 8003752:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a69      	ldr	r2, [pc, #420]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	4b67      	ldr	r3, [pc, #412]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a66      	ldr	r2, [pc, #408]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	e01c      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d10c      	bne.n	800378e <HAL_RCC_OscConfig+0x356>
 8003774:	4b61      	ldr	r3, [pc, #388]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4a60      	ldr	r2, [pc, #384]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6213      	str	r3, [r2, #32]
 8003780:	4b5e      	ldr	r3, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4a5d      	ldr	r2, [pc, #372]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6213      	str	r3, [r2, #32]
 800378c:	e00b      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800378e:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a5a      	ldr	r2, [pc, #360]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	4b58      	ldr	r3, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a57      	ldr	r2, [pc, #348]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fe2f 	bl	8001410 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7fd fe2b 	bl	8001410 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0b1      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	4b4b      	ldr	r3, [pc, #300]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ee      	beq.n	80037b6 <HAL_RCC_OscConfig+0x37e>
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7fd fe19 	bl	8001410 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7fd fe15 	bl	8001410 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e09b      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	4b40      	ldr	r3, [pc, #256]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b3c      	ldr	r3, [pc, #240]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4a3b      	ldr	r2, [pc, #236]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8087 	beq.w	800392e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	4b36      	ldr	r3, [pc, #216]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d061      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d146      	bne.n	80038c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fd fde9 	bl	8001410 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7fd fde5 	bl	8001410 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e06d      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003868:	d108      	bne.n	800387c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4921      	ldr	r1, [pc, #132]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387c:	4b1f      	ldr	r3, [pc, #124]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a19      	ldr	r1, [r3, #32]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	430b      	orrs	r3, r1
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7fd fdb9 	bl	8001410 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fd fdb5 	bl	8001410 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e03d      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x46a>
 80038c0:	e035      	b.n	800392e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd fda2 	bl	8001410 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd fd9e 	bl	8001410 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e026      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x498>
 80038ee:	e01e      	b.n	800392e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e019      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
 8003904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_OscConfig+0x500>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d0      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b6a      	ldr	r3, [pc, #424]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4965      	ldr	r1, [pc, #404]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a52      	ldr	r2, [pc, #328]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d040      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b41      	ldr	r3, [pc, #260]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e073      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4936      	ldr	r1, [pc, #216]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fd fcf0 	bl	8001410 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fd fcec 	bl	8001410 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e053      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b27      	ldr	r3, [pc, #156]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d210      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4922      	ldr	r1, [pc, #136]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490a      	ldr	r1, [pc, #40]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	@ (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fd fc4e 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	080085a0 	.word	0x080085a0
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	2000000c 	.word	0x2000000c

08003b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d002      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x30>
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x36>
 8003b3e:	e027      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b40:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b42:	613b      	str	r3, [r7, #16]
      break;
 8003b44:	e027      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0c9b      	lsrs	r3, r3, #18
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0c5b      	lsrs	r3, r3, #17
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	4a11      	ldr	r2, [pc, #68]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b72:	fb03 f202 	mul.w	r2, r3, r2
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e004      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b92:	613b      	str	r3, [r7, #16]
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	693b      	ldr	r3, [r7, #16]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	007a1200 	.word	0x007a1200
 8003bac:	080085b0 	.word	0x080085b0
 8003bb0:	080085c0 	.word	0x080085c0
 8003bb4:	003d0900 	.word	0x003d0900

08003bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <RCC_Delay+0x34>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <RCC_Delay+0x38>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0a5b      	lsrs	r3, r3, #9
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bd4:	bf00      	nop
  }
  while (Delay --);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	60fa      	str	r2, [r7, #12]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f9      	bne.n	8003bd4 <RCC_Delay+0x1c>
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	10624dd3 	.word	0x10624dd3

08003bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	2300      	movs	r3, #0
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d07d      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c10:	2300      	movs	r3, #0
 8003c12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c14:	4b4f      	ldr	r3, [pc, #316]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	69db      	ldr	r3, [r3, #28]
 8003c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10d      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c20:	4b4c      	ldr	r3, [pc, #304]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	4a4b      	ldr	r2, [pc, #300]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	61d3      	str	r3, [r2, #28]
 8003c2c:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c34:	60bb      	str	r3, [r7, #8]
 8003c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c3c:	4b46      	ldr	r3, [pc, #280]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d118      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c48:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a42      	ldr	r2, [pc, #264]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c54:	f7fd fbdc 	bl	8001410 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fd fbd8 	bl	8001410 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e06d      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7a:	4b36      	ldr	r3, [pc, #216]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d02e      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d027      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c98:	4b2e      	ldr	r3, [pc, #184]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b2e      	ldr	r3, [pc, #184]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cae:	4a29      	ldr	r2, [pc, #164]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d014      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fd fba7 	bl	8001410 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fd fba3 	bl	8001410 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e036      	b.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	6a1b      	ldr	r3, [r3, #32]
 8003cec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	4917      	ldr	r1, [pc, #92]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a13      	ldr	r2, [pc, #76]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d18:	4b0e      	ldr	r3, [pc, #56]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	490b      	ldr	r1, [pc, #44]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4904      	ldr	r1, [pc, #16]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42420440 	.word	0x42420440

08003d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	4638      	mov	r0, r7
 8003d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc80      	pop	{r7}
 8003d78:	4770      	bx	lr

08003d7a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003d8a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003d8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr

08003da6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003da6:	b480      	push	{r7}
 8003da8:	b085      	sub	sp, #20
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003dae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003db2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bc80      	pop	{r7}
 8003dd8:	4770      	bx	lr

08003dda <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	460b      	mov	r3, r1
 8003de4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b085      	sub	sp, #20
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	60f8      	str	r0, [r7, #12]
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr

08003e2c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b09d      	sub	sp, #116	@ 0x74
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8003e4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d81f      	bhi.n	8003e9e <USB_ActivateEndpoint+0x72>
 8003e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <USB_ActivateEndpoint+0x38>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003ea7 	.word	0x08003ea7
 8003e70:	08003e83 	.word	0x08003e83
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003e74:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e80:	e012      	b.n	8003ea8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003e82:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e86:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8003e8a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e8e:	e00b      	b.n	8003ea8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003e90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003e94:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8003e9c:	e004      	b.n	8003ea8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8003ea4:	e000      	b.n	8003ea8 <USB_ActivateEndpoint+0x7c>
      break;
 8003ea6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003eb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003eba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	7812      	ldrb	r2, [r2, #0]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	441a      	add	r2, r3
 8003ef6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8003efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	7b1b      	ldrb	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f040 8178 	bne.w	8004208 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8084 	beq.w	800402a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	4413      	add	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	011a      	lsls	r2, r3, #4
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	88db      	ldrh	r3, [r3, #6]
 8003f4a:	085b      	lsrs	r3, r3, #1
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	827b      	strh	r3, [r7, #18]
 8003f64:	8a7b      	ldrh	r3, [r7, #18]
 8003f66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01b      	beq.n	8003fa6 <USB_ActivateEndpoint+0x17a>
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f84:	823b      	strh	r3, [r7, #16]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	441a      	add	r2, r3
 8003f90:	8a3b      	ldrh	r3, [r7, #16]
 8003f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	78db      	ldrb	r3, [r3, #3]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d020      	beq.n	8003ff0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fc4:	81bb      	strh	r3, [r7, #12]
 8003fc6:	89bb      	ldrh	r3, [r7, #12]
 8003fc8:	f083 0320 	eor.w	r3, r3, #32
 8003fcc:	81bb      	strh	r3, [r7, #12]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	441a      	add	r2, r3
 8003fd8:	89bb      	ldrh	r3, [r7, #12]
 8003fda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	8013      	strh	r3, [r2, #0]
 8003fee:	e2d5      	b.n	800459c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004006:	81fb      	strh	r3, [r7, #14]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	89fb      	ldrh	r3, [r7, #14]
 8004014:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004018:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800401c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004020:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004024:	b29b      	uxth	r3, r3
 8004026:	8013      	strh	r3, [r2, #0]
 8004028:	e2b8      	b.n	800459c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	633b      	str	r3, [r7, #48]	@ 0x30
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004034:	b29b      	uxth	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	4413      	add	r3, r2
 800403c:	633b      	str	r3, [r7, #48]	@ 0x30
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	011a      	lsls	r2, r3, #4
 8004044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004046:	4413      	add	r3, r2
 8004048:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	88db      	ldrh	r3, [r3, #6]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	b29a      	uxth	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004068:	b29b      	uxth	r3, r3
 800406a:	461a      	mov	r2, r3
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	4413      	add	r3, r2
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	011a      	lsls	r2, r3, #4
 8004078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800407a:	4413      	add	r3, r2
 800407c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800408c:	b29a      	uxth	r2, r3
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	2b3e      	cmp	r3, #62	@ 0x3e
 8004098:	d91d      	bls.n	80040d6 <USB_ActivateEndpoint+0x2aa>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 031f 	and.w	r3, r3, #31
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <USB_ActivateEndpoint+0x288>
 80040ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b0:	3b01      	subs	r3, #1
 80040b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040bc:	b29b      	uxth	r3, r3
 80040be:	029b      	lsls	r3, r3, #10
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	801a      	strh	r2, [r3, #0]
 80040d4:	e026      	b.n	8004124 <USB_ActivateEndpoint+0x2f8>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <USB_ActivateEndpoint+0x2c8>
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	801a      	strh	r2, [r3, #0]
 80040f2:	e017      	b.n	8004124 <USB_ActivateEndpoint+0x2f8>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	085b      	lsrs	r3, r3, #1
 80040fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <USB_ActivateEndpoint+0x2e2>
 8004108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800410a:	3301      	adds	r3, #1
 800410c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800410e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29a      	uxth	r2, r3
 8004114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004116:	b29b      	uxth	r3, r3
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	b29b      	uxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b29a      	uxth	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004122:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	4413      	add	r3, r2
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <USB_ActivateEndpoint+0x348>
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800414e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004152:	843b      	strh	r3, [r7, #32]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	441a      	add	r2, r3
 800415e:	8c3b      	ldrh	r3, [r7, #32]
 8004160:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004164:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800416c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004170:	b29b      	uxth	r3, r3
 8004172:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d124      	bne.n	80041c6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800418e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004192:	83bb      	strh	r3, [r7, #28]
 8004194:	8bbb      	ldrh	r3, [r7, #28]
 8004196:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800419a:	83bb      	strh	r3, [r7, #28]
 800419c:	8bbb      	ldrh	r3, [r7, #28]
 800419e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041a2:	83bb      	strh	r3, [r7, #28]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	441a      	add	r2, r3
 80041ae:	8bbb      	ldrh	r3, [r7, #28]
 80041b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	8013      	strh	r3, [r2, #0]
 80041c4:	e1ea      	b.n	800459c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80041d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041dc:	83fb      	strh	r3, [r7, #30]
 80041de:	8bfb      	ldrh	r3, [r7, #30]
 80041e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80041e4:	83fb      	strh	r3, [r7, #30]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	441a      	add	r2, r3
 80041f0:	8bfb      	ldrh	r3, [r7, #30]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
 8004206:	e1c9      	b.n	800459c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	78db      	ldrb	r3, [r3, #3]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d11e      	bne.n	800424e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004226:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	441a      	add	r2, r3
 8004234:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800423c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004240:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]
 800424c:	e01d      	b.n	800428a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004260:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004264:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004276:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800427a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004294:	b29b      	uxth	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429a:	4413      	add	r3, r2
 800429c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	011a      	lsls	r2, r3, #4
 80042a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	891b      	ldrh	r3, [r3, #8]
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042bc:	801a      	strh	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	4413      	add	r3, r2
 80042d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	011a      	lsls	r2, r3, #4
 80042d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80042e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	895b      	ldrh	r3, [r3, #10]
 80042e6:	085b      	lsrs	r3, r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042f0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f040 8093 	bne.w	8004422 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800430c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01b      	beq.n	8004350 <USB_ActivateEndpoint+0x524>
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	881b      	ldrh	r3, [r3, #0]
 800435c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800435e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01b      	beq.n	80043a0 <USB_ActivateEndpoint+0x574>
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004394:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004398:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043b6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80043b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80043be:	873b      	strh	r3, [r7, #56]	@ 0x38
 80043c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043c6:	873b      	strh	r3, [r7, #56]	@ 0x38
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	441a      	add	r2, r3
 80043d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80043d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	441a      	add	r2, r3
 800440a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800440c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004414:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800441c:	b29b      	uxth	r3, r3
 800441e:	8013      	strh	r3, [r2, #0]
 8004420:	e0bc      	b.n	800459c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4413      	add	r3, r2
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004432:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01d      	beq.n	800447a <USB_ActivateEndpoint+0x64e>
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004450:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004454:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	441a      	add	r2, r3
 8004462:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800446a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800446e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004476:	b29b      	uxth	r3, r3
 8004478:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800448a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01d      	beq.n	80044d2 <USB_ActivateEndpoint+0x6a6>
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ac:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	441a      	add	r2, r3
 80044ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80044be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	78db      	ldrb	r3, [r3, #3]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d024      	beq.n	8004524 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	881b      	ldrh	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044f0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80044f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80044f8:	f083 0320 	eor.w	r3, r3, #32
 80044fc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004536:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800453a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	441a      	add	r2, r3
 8004548:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800454c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004550:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004558:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800455c:	b29b      	uxth	r3, r3
 800455e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	881b      	ldrh	r3, [r3, #0]
 800456c:	b29b      	uxth	r3, r3
 800456e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004576:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	441a      	add	r2, r3
 8004584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800458c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004598:	b29b      	uxth	r3, r3
 800459a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800459c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3774      	adds	r7, #116	@ 0x74
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop

080045ac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b08d      	sub	sp, #52	@ 0x34
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	7b1b      	ldrb	r3, [r3, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	f040 808e 	bne.w	80046dc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	785b      	ldrb	r3, [r3, #1]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d044      	beq.n	8004652 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	81bb      	strh	r3, [r7, #12]
 80045d6:	89bb      	ldrh	r3, [r7, #12]
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d01b      	beq.n	8004618 <USB_DeactivateEndpoint+0x6c>
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045f6:	817b      	strh	r3, [r7, #10]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800460c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004610:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004614:	b29b      	uxth	r3, r3
 8004616:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	881b      	ldrh	r3, [r3, #0]
 8004624:	b29b      	uxth	r3, r3
 8004626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800462a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800462e:	813b      	strh	r3, [r7, #8]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	441a      	add	r2, r3
 800463a:	893b      	ldrh	r3, [r7, #8]
 800463c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	b29b      	uxth	r3, r3
 800464e:	8013      	strh	r3, [r2, #0]
 8004650:	e192      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	827b      	strh	r3, [r7, #18]
 8004660:	8a7b      	ldrh	r3, [r7, #18]
 8004662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01b      	beq.n	80046a2 <USB_DeactivateEndpoint+0xf6>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004680:	823b      	strh	r3, [r7, #16]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8a3b      	ldrh	r3, [r7, #16]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004696:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800469a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046b8:	81fb      	strh	r3, [r7, #14]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	441a      	add	r2, r3
 80046c4:	89fb      	ldrh	r3, [r7, #14]
 80046c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	8013      	strh	r3, [r2, #0]
 80046da:	e14d      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 80a5 	bne.w	8004830 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	843b      	strh	r3, [r7, #32]
 80046f4:	8c3b      	ldrh	r3, [r7, #32]
 80046f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d01b      	beq.n	8004736 <USB_DeactivateEndpoint+0x18a>
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004714:	83fb      	strh	r3, [r7, #30]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	441a      	add	r2, r3
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800472a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800472e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004732:	b29b      	uxth	r3, r3
 8004734:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	83bb      	strh	r3, [r7, #28]
 8004744:	8bbb      	ldrh	r3, [r7, #28]
 8004746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d01b      	beq.n	8004786 <USB_DeactivateEndpoint+0x1da>
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	b29b      	uxth	r3, r3
 800475c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004764:	837b      	strh	r3, [r7, #26]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	441a      	add	r2, r3
 8004770:	8b7b      	ldrh	r3, [r7, #26]
 8004772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800477a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800477e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004782:	b29b      	uxth	r3, r3
 8004784:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b29b      	uxth	r3, r3
 8004794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800479c:	833b      	strh	r3, [r7, #24]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	8b3b      	ldrh	r3, [r7, #24]
 80047aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d4:	82fb      	strh	r3, [r7, #22]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	441a      	add	r2, r3
 80047e0:	8afb      	ldrh	r3, [r7, #22]
 80047e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480c:	82bb      	strh	r3, [r7, #20]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	441a      	add	r2, r3
 8004818:	8abb      	ldrh	r3, [r7, #20]
 800481a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800481e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800482a:	b29b      	uxth	r3, r3
 800482c:	8013      	strh	r3, [r2, #0]
 800482e:	e0a3      	b.n	8004978 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800483e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01b      	beq.n	8004880 <USB_DeactivateEndpoint+0x2d4>
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800485a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800485e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800486c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004874:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800488e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <USB_DeactivateEndpoint+0x324>
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ae:	853b      	strh	r3, [r7, #40]	@ 0x28
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80048bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	441a      	add	r2, r3
 80048f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80048f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004904:	b29b      	uxth	r3, r3
 8004906:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800491a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800491e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800492c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004930:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004934:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493c:	b29b      	uxth	r3, r3
 800493e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004956:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	441a      	add	r2, r3
 8004962:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800496c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004974:	b29b      	uxth	r3, r3
 8004976:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3734      	adds	r7, #52	@ 0x34
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b0c2      	sub	sp, #264	@ 0x108
 8004988:	af00      	add	r7, sp, #0
 800498a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800498e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004992:	6018      	str	r0, [r3, #0]
 8004994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800499c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800499e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	f040 86b7 	bne.w	800571e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80049b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d908      	bls.n	80049de <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80049cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049dc:	e007      	b.n	80049ee <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80049de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80049ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80049f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	7b1b      	ldrb	r3, [r3, #12]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13a      	bne.n	8004a74 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80049fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6959      	ldr	r1, [r3, #20]
 8004a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	88da      	ldrh	r2, [r3, #6]
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004a20:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004a24:	6800      	ldr	r0, [r0, #0]
 8004a26:	f001 fc9c 	bl	8006362 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
 8004a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	801a      	strh	r2, [r3, #0]
 8004a70:	f000 be1f 	b.w	80056b2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	78db      	ldrb	r3, [r3, #3]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	f040 8462 	bne.w	800534a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a1a      	ldr	r2, [r3, #32]
 8004a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	f240 83df 	bls.w	8005262 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004aa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aca:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004adc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	441a      	add	r2, r3
 8004ae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004af4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004b00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6a1a      	ldr	r2, [r3, #32]
 8004b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b10:	1ad2      	subs	r2, r2, r3
 8004b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004b1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 81c7 	beq.w	8004ed4 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d177      	bne.n	8004c52 <USB_EPStartXfer+0x2ce>
 8004b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	4413      	add	r3, r2
 8004b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	011a      	lsls	r2, r3, #4
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bb4:	d921      	bls.n	8004bfa <USB_EPStartXfer+0x276>
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <USB_EPStartXfer+0x252>
 8004bcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	029b      	lsls	r3, r3, #10
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	4313      	orrs	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf6:	801a      	strh	r2, [r3, #0]
 8004bf8:	e050      	b.n	8004c9c <USB_EPStartXfer+0x318>
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <USB_EPStartXfer+0x294>
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	e041      	b.n	8004c9c <USB_EPStartXfer+0x318>
 8004c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1c:	085b      	lsrs	r3, r3, #1
 8004c1e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <USB_EPStartXfer+0x2b4>
 8004c2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c32:	3301      	adds	r3, #1
 8004c34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	029b      	lsls	r3, r3, #10
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e024      	b.n	8004c9c <USB_EPStartXfer+0x318>
 8004c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d11c      	bne.n	8004c9c <USB_EPStartXfer+0x318>
 8004c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	4413      	add	r3, r2
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	011a      	lsls	r2, r3, #4
 8004c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c9a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	895b      	ldrh	r3, [r3, #10]
 8004ca8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6959      	ldr	r1, [r3, #20]
 8004cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004cc2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004cc6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004cca:	6800      	ldr	r0, [r0, #0]
 8004ccc:	f001 fb49 	bl	8006362 <USB_WritePMA>
            ep->xfer_buff += len;
 8004cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695a      	ldr	r2, [r3, #20]
 8004cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ce0:	441a      	add	r2, r3
 8004ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a1a      	ldr	r2, [r3, #32]
 8004cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d90f      	bls.n	8004d2a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6a1a      	ldr	r2, [r3, #32]
 8004d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	621a      	str	r2, [r3, #32]
 8004d28:	e00e      	b.n	8004d48 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d177      	bne.n	8004e48 <USB_EPStartXfer+0x4c4>
 8004d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	4413      	add	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	011a      	lsls	r2, r3, #4
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da8:	2b3e      	cmp	r3, #62	@ 0x3e
 8004daa:	d921      	bls.n	8004df0 <USB_EPStartXfer+0x46c>
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dba:	f003 031f 	and.w	r3, r3, #31
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d104      	bne.n	8004dcc <USB_EPStartXfer+0x448>
 8004dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	029b      	lsls	r3, r3, #10
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	e056      	b.n	8004e9e <USB_EPStartXfer+0x51a>
 8004df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <USB_EPStartXfer+0x48a>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	881b      	ldrh	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	801a      	strh	r2, [r3, #0]
 8004e0c:	e047      	b.n	8004e9e <USB_EPStartXfer+0x51a>
 8004e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <USB_EPStartXfer+0x4aa>
 8004e24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e28:	3301      	adds	r3, #1
 8004e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	029b      	lsls	r3, r3, #10
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e02a      	b.n	8004e9e <USB_EPStartXfer+0x51a>
 8004e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	785b      	ldrb	r3, [r3, #1]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d122      	bne.n	8004e9e <USB_EPStartXfer+0x51a>
 8004e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	623b      	str	r3, [r7, #32]
 8004e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	461a      	mov	r2, r3
 8004e76:	6a3b      	ldr	r3, [r7, #32]
 8004e78:	4413      	add	r3, r2
 8004e7a:	623b      	str	r3, [r7, #32]
 8004e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	011a      	lsls	r2, r3, #4
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	891b      	ldrh	r3, [r3, #8]
 8004eaa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6959      	ldr	r1, [r3, #20]
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004ec4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004ec8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f001 fa48 	bl	8006362 <USB_WritePMA>
 8004ed2:	e3ee      	b.n	80056b2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	785b      	ldrb	r3, [r3, #1]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d177      	bne.n	8004fd4 <USB_EPStartXfer+0x650>
 8004ee4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ee8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ef4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f04:	4413      	add	r3, r2
 8004f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	011a      	lsls	r2, r3, #4
 8004f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f18:	4413      	add	r3, r2
 8004f1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004f1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f34:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f36:	d921      	bls.n	8004f7c <USB_EPStartXfer+0x5f8>
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d104      	bne.n	8004f58 <USB_EPStartXfer+0x5d4>
 8004f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f52:	3b01      	subs	r3, #1
 8004f54:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f5a:	881b      	ldrh	r3, [r3, #0]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f78:	801a      	strh	r2, [r3, #0]
 8004f7a:	e056      	b.n	800502a <USB_EPStartXfer+0x6a6>
 8004f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <USB_EPStartXfer+0x616>
 8004f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f96:	801a      	strh	r2, [r3, #0]
 8004f98:	e047      	b.n	800502a <USB_EPStartXfer+0x6a6>
 8004f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d004      	beq.n	8004fba <USB_EPStartXfer+0x636>
 8004fb0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	029b      	lsls	r3, r3, #10
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	e02a      	b.n	800502a <USB_EPStartXfer+0x6a6>
 8004fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	785b      	ldrb	r3, [r3, #1]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d122      	bne.n	800502a <USB_EPStartXfer+0x6a6>
 8004fe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	461a      	mov	r2, r3
 8005002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005004:	4413      	add	r3, r2
 8005006:	653b      	str	r3, [r7, #80]	@ 0x50
 8005008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800500c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	011a      	lsls	r2, r3, #4
 8005016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005018:	4413      	add	r3, r2
 800501a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800501e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005024:	b29a      	uxth	r2, r3
 8005026:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005028:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800502a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800502e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	891b      	ldrh	r3, [r3, #8]
 8005036:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800503a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6959      	ldr	r1, [r3, #20]
 8005046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504a:	b29b      	uxth	r3, r3
 800504c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005050:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005054:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	f001 f982 	bl	8006362 <USB_WritePMA>
            ep->xfer_buff += len;
 800505e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	441a      	add	r2, r3
 8005070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800507c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800508c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d90f      	bls.n	80050b8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800509c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1a      	ldr	r2, [r3, #32]
 80050a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	621a      	str	r2, [r3, #32]
 80050b6:	e00e      	b.n	80050d6 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80050b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80050c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80050d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80050e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	785b      	ldrb	r3, [r3, #1]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d177      	bne.n	80051e2 <USB_EPStartXfer+0x85e>
 80050f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005102:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510c:	b29b      	uxth	r3, r3
 800510e:	461a      	mov	r2, r3
 8005110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005112:	4413      	add	r3, r2
 8005114:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005116:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800511a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	011a      	lsls	r2, r3, #4
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	4413      	add	r3, r2
 8005128:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800512c:	637b      	str	r3, [r7, #52]	@ 0x34
 800512e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005138:	b29a      	uxth	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800513c:	801a      	strh	r2, [r3, #0]
 800513e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005142:	2b3e      	cmp	r3, #62	@ 0x3e
 8005144:	d921      	bls.n	800518a <USB_EPStartXfer+0x806>
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005154:	f003 031f 	and.w	r3, r3, #31
 8005158:	2b00      	cmp	r3, #0
 800515a:	d104      	bne.n	8005166 <USB_EPStartXfer+0x7e2>
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	3b01      	subs	r3, #1
 8005162:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	b29a      	uxth	r2, r3
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	b29b      	uxth	r3, r3
 8005172:	029b      	lsls	r3, r3, #10
 8005174:	b29b      	uxth	r3, r3
 8005176:	4313      	orrs	r3, r2
 8005178:	b29b      	uxth	r3, r3
 800517a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005182:	b29a      	uxth	r2, r3
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	801a      	strh	r2, [r3, #0]
 8005188:	e050      	b.n	800522c <USB_EPStartXfer+0x8a8>
 800518a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <USB_EPStartXfer+0x824>
 8005192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a4:	801a      	strh	r2, [r3, #0]
 80051a6:	e041      	b.n	800522c <USB_EPStartXfer+0x8a8>
 80051a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ac:	085b      	lsrs	r3, r3, #1
 80051ae:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <USB_EPStartXfer+0x844>
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c2:	3301      	adds	r3, #1
 80051c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80051c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	029b      	lsls	r3, r3, #10
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	4313      	orrs	r3, r2
 80051da:	b29a      	uxth	r2, r3
 80051dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051de:	801a      	strh	r2, [r3, #0]
 80051e0:	e024      	b.n	800522c <USB_EPStartXfer+0x8a8>
 80051e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d11c      	bne.n	800522c <USB_EPStartXfer+0x8a8>
 80051f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005200:	b29b      	uxth	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005206:	4413      	add	r3, r2
 8005208:	643b      	str	r3, [r7, #64]	@ 0x40
 800520a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800520e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	011a      	lsls	r2, r3, #4
 8005218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521a:	4413      	add	r3, r2
 800521c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005226:	b29a      	uxth	r2, r3
 8005228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800522a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800522c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	895b      	ldrh	r3, [r3, #10]
 8005238:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800523c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6959      	ldr	r1, [r3, #20]
 8005248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800524c:	b29b      	uxth	r3, r3
 800524e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005252:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005256:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800525a:	6800      	ldr	r0, [r0, #0]
 800525c:	f001 f881 	bl	8006362 <USB_WritePMA>
 8005260:	e227      	b.n	80056b2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	4413      	add	r3, r2
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	b29b      	uxth	r3, r3
 8005290:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005294:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005298:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800529c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80052ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	461a      	mov	r2, r3
 80052ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052ee:	4413      	add	r3, r2
 80052f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	011a      	lsls	r2, r3, #4
 8005300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005302:	4413      	add	r3, r2
 8005304:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800530a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800530e:	b29a      	uxth	r2, r3
 8005310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	891b      	ldrh	r3, [r3, #8]
 8005320:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6959      	ldr	r1, [r3, #20]
 8005330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005334:	b29b      	uxth	r3, r3
 8005336:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800533a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800533e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005342:	6800      	ldr	r0, [r0, #0]
 8005344:	f001 f80d 	bl	8006362 <USB_WritePMA>
 8005348:	e1b3      	b.n	80056b2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800534a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80c6 	beq.w	800551c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	673b      	str	r3, [r7, #112]	@ 0x70
 800539c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d177      	bne.n	800549c <USB_EPStartXfer+0xb18>
 80053ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	461a      	mov	r2, r3
 80053ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053cc:	4413      	add	r3, r2
 80053ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	011a      	lsls	r2, r3, #4
 80053de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053e0:	4413      	add	r3, r2
 80053e2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80053e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80053fe:	d921      	bls.n	8005444 <USB_EPStartXfer+0xac0>
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800540a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540e:	f003 031f 	and.w	r3, r3, #31
 8005412:	2b00      	cmp	r3, #0
 8005414:	d104      	bne.n	8005420 <USB_EPStartXfer+0xa9c>
 8005416:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800541a:	3b01      	subs	r3, #1
 800541c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005420:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29a      	uxth	r2, r3
 8005426:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800542a:	b29b      	uxth	r3, r3
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	b29b      	uxth	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543c:	b29a      	uxth	r2, r3
 800543e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	e050      	b.n	80054e6 <USB_EPStartXfer+0xb62>
 8005444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <USB_EPStartXfer+0xade>
 800544c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e041      	b.n	80054e6 <USB_EPStartXfer+0xb62>
 8005462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800546c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <USB_EPStartXfer+0xafe>
 8005478:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800547c:	3301      	adds	r3, #1
 800547e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005482:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005484:	881b      	ldrh	r3, [r3, #0]
 8005486:	b29a      	uxth	r2, r3
 8005488:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800548c:	b29b      	uxth	r3, r3
 800548e:	029b      	lsls	r3, r3, #10
 8005490:	b29b      	uxth	r3, r3
 8005492:	4313      	orrs	r3, r2
 8005494:	b29a      	uxth	r2, r3
 8005496:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005498:	801a      	strh	r2, [r3, #0]
 800549a:	e024      	b.n	80054e6 <USB_EPStartXfer+0xb62>
 800549c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	785b      	ldrb	r3, [r3, #1]
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d11c      	bne.n	80054e6 <USB_EPStartXfer+0xb62>
 80054ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054c0:	4413      	add	r3, r2
 80054c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	011a      	lsls	r2, r3, #4
 80054d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054d4:	4413      	add	r3, r2
 80054d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	895b      	ldrh	r3, [r3, #10]
 80054f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6959      	ldr	r1, [r3, #20]
 8005502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005506:	b29b      	uxth	r3, r3
 8005508:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800550c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005510:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005514:	6800      	ldr	r0, [r0, #0]
 8005516:	f000 ff24 	bl	8006362 <USB_WritePMA>
 800551a:	e0ca      	b.n	80056b2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800551c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d177      	bne.n	800561c <USB_EPStartXfer+0xc98>
 800552c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800554c:	4413      	add	r3, r2
 800554e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005560:	4413      	add	r3, r2
 8005562:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005566:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005568:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005572:	b29a      	uxth	r2, r3
 8005574:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800557c:	2b3e      	cmp	r3, #62	@ 0x3e
 800557e:	d921      	bls.n	80055c4 <USB_EPStartXfer+0xc40>
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800558a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800558e:	f003 031f 	and.w	r3, r3, #31
 8005592:	2b00      	cmp	r3, #0
 8005594:	d104      	bne.n	80055a0 <USB_EPStartXfer+0xc1c>
 8005596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800559a:	3b01      	subs	r3, #1
 800559c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	4313      	orrs	r3, r2
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055c0:	801a      	strh	r2, [r3, #0]
 80055c2:	e05c      	b.n	800567e <USB_EPStartXfer+0xcfa>
 80055c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <USB_EPStartXfer+0xc5e>
 80055cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055da:	b29a      	uxth	r2, r3
 80055dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	e04d      	b.n	800567e <USB_EPStartXfer+0xcfa>
 80055e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <USB_EPStartXfer+0xc7e>
 80055f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29a      	uxth	r2, r3
 8005608:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800560c:	b29b      	uxth	r3, r3
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	b29b      	uxth	r3, r3
 8005612:	4313      	orrs	r3, r2
 8005614:	b29a      	uxth	r2, r3
 8005616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005618:	801a      	strh	r2, [r3, #0]
 800561a:	e030      	b.n	800567e <USB_EPStartXfer+0xcfa>
 800561c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	785b      	ldrb	r3, [r3, #1]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d128      	bne.n	800567e <USB_EPStartXfer+0xcfa>
 800562c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800563a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800563e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005648:	b29b      	uxth	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005650:	4413      	add	r3, r2
 8005652:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800565a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	011a      	lsls	r2, r3, #4
 8005664:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005668:	4413      	add	r3, r2
 800566a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800566e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005676:	b29a      	uxth	r2, r3
 8005678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800567c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800567e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	891b      	ldrh	r3, [r3, #8]
 800568a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800568e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6959      	ldr	r1, [r3, #20]
 800569a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569e:	b29b      	uxth	r3, r3
 80056a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80056a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80056a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80056ac:	6800      	ldr	r0, [r0, #0]
 80056ae:	f000 fe58 	bl	8006362 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80056b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d8:	817b      	strh	r3, [r7, #10]
 80056da:	897b      	ldrh	r3, [r7, #10]
 80056dc:	f083 0310 	eor.w	r3, r3, #16
 80056e0:	817b      	strh	r3, [r7, #10]
 80056e2:	897b      	ldrh	r3, [r7, #10]
 80056e4:	f083 0320 	eor.w	r3, r3, #32
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	441a      	add	r2, r3
 8005704:	897b      	ldrh	r3, [r7, #10]
 8005706:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800570a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800570e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005716:	b29b      	uxth	r3, r3
 8005718:	8013      	strh	r3, [r2, #0]
 800571a:	f000 bcde 	b.w	80060da <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800571e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	7b1b      	ldrb	r3, [r3, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f040 80bb 	bne.w	80058a6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699a      	ldr	r2, [r3, #24]
 800573c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	429a      	cmp	r2, r3
 800574a:	d917      	bls.n	800577c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800574c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	699a      	ldr	r2, [r3, #24]
 8005768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576c:	1ad2      	subs	r2, r2, r3
 800576e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	619a      	str	r2, [r3, #24]
 800577a:	e00e      	b.n	800579a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800577c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800578c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2200      	movs	r2, #0
 8005798:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800579a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800579e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057be:	4413      	add	r3, r2
 80057c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80057d6:	4413      	add	r3, r2
 80057d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80057dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80057e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057f2:	801a      	strh	r2, [r3, #0]
 80057f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80057fa:	d924      	bls.n	8005846 <USB_EPStartXfer+0xec2>
 80057fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2b00      	cmp	r3, #0
 8005810:	d104      	bne.n	800581c <USB_EPStartXfer+0xe98>
 8005812:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005816:	3b01      	subs	r3, #1
 8005818:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800581c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	b29a      	uxth	r2, r3
 8005824:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29b      	uxth	r3, r3
 800582e:	4313      	orrs	r3, r2
 8005830:	b29b      	uxth	r3, r3
 8005832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800583a:	b29a      	uxth	r2, r3
 800583c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005840:	801a      	strh	r2, [r3, #0]
 8005842:	f000 bc10 	b.w	8006066 <USB_EPStartXfer+0x16e2>
 8005846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10c      	bne.n	8005868 <USB_EPStartXfer+0xee4>
 800584e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	b29b      	uxth	r3, r3
 8005856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800585a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800585e:	b29a      	uxth	r2, r3
 8005860:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	e3fe      	b.n	8006066 <USB_EPStartXfer+0x16e2>
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586c:	085b      	lsrs	r3, r3, #1
 800586e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d004      	beq.n	8005888 <USB_EPStartXfer+0xf04>
 800587e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005882:	3301      	adds	r3, #1
 8005884:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29a      	uxth	r2, r3
 800589e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	e3df      	b.n	8006066 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	78db      	ldrb	r3, [r3, #3]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	f040 8218 	bne.w	8005ce8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f040 809d 	bne.w	8005a04 <USB_EPStartXfer+0x1080>
 80058ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058ee:	4413      	add	r3, r2
 80058f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80058f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	011a      	lsls	r2, r3, #4
 8005902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005906:	4413      	add	r3, r2
 8005908:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800590c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800591c:	b29a      	uxth	r2, r3
 800591e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b3e      	cmp	r3, #62	@ 0x3e
 8005932:	d92b      	bls.n	800598c <USB_EPStartXfer+0x1008>
 8005934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005938:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	095b      	lsrs	r3, r3, #5
 8005942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 031f 	and.w	r3, r3, #31
 8005956:	2b00      	cmp	r3, #0
 8005958:	d104      	bne.n	8005964 <USB_EPStartXfer+0xfe0>
 800595a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800595e:	3b01      	subs	r3, #1
 8005960:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005970:	b29b      	uxth	r3, r3
 8005972:	029b      	lsls	r3, r3, #10
 8005974:	b29b      	uxth	r3, r3
 8005976:	4313      	orrs	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e070      	b.n	8005a6e <USB_EPStartXfer+0x10ea>
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10c      	bne.n	80059b6 <USB_EPStartXfer+0x1032>
 800599c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e05b      	b.n	8005a6e <USB_EPStartXfer+0x10ea>
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	085b      	lsrs	r3, r3, #1
 80059c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <USB_EPStartXfer+0x1062>
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	029b      	lsls	r3, r3, #10
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4313      	orrs	r3, r2
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	e034      	b.n	8005a6e <USB_EPStartXfer+0x10ea>
 8005a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	785b      	ldrb	r3, [r3, #1]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d12c      	bne.n	8005a6e <USB_EPStartXfer+0x10ea>
 8005a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a38:	4413      	add	r3, r2
 8005a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	011a      	lsls	r2, r3, #4
 8005a4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a50:	4413      	add	r3, r2
 8005a52:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a6c:	801a      	strh	r2, [r3, #0]
 8005a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f040 809d 	bne.w	8005bc8 <USB_EPStartXfer+0x1244>
 8005a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aa0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	011a      	lsls	r2, r3, #4
 8005ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005aca:	4413      	add	r3, r2
 8005acc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ad0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ad4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005af6:	d92b      	bls.n	8005b50 <USB_EPStartXfer+0x11cc>
 8005af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d104      	bne.n	8005b28 <USB_EPStartXfer+0x11a4>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b22:	3b01      	subs	r3, #1
 8005b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	e069      	b.n	8005c24 <USB_EPStartXfer+0x12a0>
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10c      	bne.n	8005b7a <USB_EPStartXfer+0x11f6>
 8005b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e054      	b.n	8005c24 <USB_EPStartXfer+0x12a0>
 8005b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	085b      	lsrs	r3, r3, #1
 8005b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <USB_EPStartXfer+0x1226>
 8005ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	029b      	lsls	r3, r3, #10
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bc4:	801a      	strh	r2, [r3, #0]
 8005bc6:	e02d      	b.n	8005c24 <USB_EPStartXfer+0x12a0>
 8005bc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d125      	bne.n	8005c24 <USB_EPStartXfer+0x12a0>
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bee:	4413      	add	r3, r2
 8005bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	011a      	lsls	r2, r3, #4
 8005c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c06:	4413      	add	r3, r2
 8005c08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c22:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8218 	beq.w	8006066 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c56:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <USB_EPStartXfer+0x12ea>
 8005c62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10d      	bne.n	8005c8a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c6e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 81f5 	bne.w	8006066 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005c7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 81ee 	bne.w	8006066 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4413      	add	r3, r2
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005cb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cde:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	8013      	strh	r3, [r2, #0]
 8005ce6:	e1be      	b.n	8006066 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	78db      	ldrb	r3, [r3, #3]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	f040 81b4 	bne.w	8006062 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699a      	ldr	r2, [r3, #24]
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d917      	bls.n	8005d46 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d36:	1ad2      	subs	r2, r2, r3
 8005d38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	619a      	str	r2, [r3, #24]
 8005d44:	e00e      	b.n	8005d64 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2200      	movs	r2, #0
 8005d62:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f040 8085 	bne.w	8005e80 <USB_EPStartXfer+0x14fc>
 8005d76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	011a      	lsls	r2, r3, #4
 8005dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005db2:	4413      	add	r3, r2
 8005db4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005db8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dd6:	d923      	bls.n	8005e20 <USB_EPStartXfer+0x149c>
 8005dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005de6:	f003 031f 	and.w	r3, r3, #31
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <USB_EPStartXfer+0x1474>
 8005dee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005df2:	3b01      	subs	r3, #1
 8005df4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005df8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	029b      	lsls	r3, r3, #10
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e060      	b.n	8005ee2 <USB_EPStartXfer+0x155e>
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10c      	bne.n	8005e42 <USB_EPStartXfer+0x14be>
 8005e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e3e:	801a      	strh	r2, [r3, #0]
 8005e40:	e04f      	b.n	8005ee2 <USB_EPStartXfer+0x155e>
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d004      	beq.n	8005e62 <USB_EPStartXfer+0x14de>
 8005e58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	b29a      	uxth	r2, r3
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	4313      	orrs	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005e7c:	801a      	strh	r2, [r3, #0]
 8005e7e:	e030      	b.n	8005ee2 <USB_EPStartXfer+0x155e>
 8005e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	785b      	ldrb	r3, [r3, #1]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d128      	bne.n	8005ee2 <USB_EPStartXfer+0x155e>
 8005e90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ebe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	011a      	lsls	r2, r3, #4
 8005ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ecc:	4413      	add	r3, r2
 8005ece:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005ee0:	801a      	strh	r2, [r3, #0]
 8005ee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8085 	bne.w	800600c <USB_EPStartXfer+0x1688>
 8005f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	461a      	mov	r2, r3
 8005f22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f26:	4413      	add	r3, r2
 8005f28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	011a      	lsls	r2, r3, #4
 8005f3a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005f3e:	4413      	add	r3, r2
 8005f40:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f5a:	801a      	strh	r2, [r3, #0]
 8005f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f60:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f62:	d923      	bls.n	8005fac <USB_EPStartXfer+0x1628>
 8005f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f68:	095b      	lsrs	r3, r3, #5
 8005f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f72:	f003 031f 	and.w	r3, r3, #31
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <USB_EPStartXfer+0x1600>
 8005f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	b29a      	uxth	r2, r3
 8005f8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	029b      	lsls	r3, r3, #10
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fa8:	801a      	strh	r2, [r3, #0]
 8005faa:	e05c      	b.n	8006066 <USB_EPStartXfer+0x16e2>
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10c      	bne.n	8005fce <USB_EPStartXfer+0x164a>
 8005fb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fb8:	881b      	ldrh	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005fca:	801a      	strh	r2, [r3, #0]
 8005fcc:	e04b      	b.n	8006066 <USB_EPStartXfer+0x16e2>
 8005fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <USB_EPStartXfer+0x166a>
 8005fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fe8:	3301      	adds	r3, #1
 8005fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	029b      	lsls	r3, r3, #10
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	4313      	orrs	r3, r2
 8006002:	b29a      	uxth	r2, r3
 8006004:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006008:	801a      	strh	r2, [r3, #0]
 800600a:	e02c      	b.n	8006066 <USB_EPStartXfer+0x16e2>
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d124      	bne.n	8006066 <USB_EPStartXfer+0x16e2>
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006032:	4413      	add	r3, r2
 8006034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800604a:	4413      	add	r3, r2
 800604c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006050:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e001      	b.n	8006066 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e03a      	b.n	80060dc <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800606a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	b29b      	uxth	r3, r3
 8006084:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006088:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800608c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006090:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006094:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006098:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800609c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80060a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80060a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d020      	beq.n	800613a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	81bb      	strh	r3, [r7, #12]
 8006110:	89bb      	ldrh	r3, [r7, #12]
 8006112:	f083 0310 	eor.w	r3, r3, #16
 8006116:	81bb      	strh	r3, [r7, #12]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	89bb      	ldrh	r3, [r7, #12]
 8006124:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006128:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800612c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006130:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006134:	b29b      	uxth	r3, r3
 8006136:	8013      	strh	r3, [r2, #0]
 8006138:	e01f      	b.n	800617a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800614c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006150:	81fb      	strh	r3, [r7, #14]
 8006152:	89fb      	ldrh	r3, [r7, #14]
 8006154:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006158:	81fb      	strh	r3, [r7, #14]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	89fb      	ldrh	r3, [r7, #14]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bc80      	pop	{r7}
 8006184:	4770      	bx	lr

08006186 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006186:	b480      	push	{r7}
 8006188:	b087      	sub	sp, #28
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	7b1b      	ldrb	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 809d 	bne.w	80062d4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	785b      	ldrb	r3, [r3, #1]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d04c      	beq.n	800623c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	823b      	strh	r3, [r7, #16]
 80061b0:	8a3b      	ldrh	r3, [r7, #16]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01b      	beq.n	80061f2 <USB_EPClearStall+0x6c>
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d0:	81fb      	strh	r3, [r7, #14]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	441a      	add	r2, r3
 80061dc:	89fb      	ldrh	r3, [r7, #14]
 80061de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ea:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	78db      	ldrb	r3, [r3, #3]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d06c      	beq.n	80062d4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	881b      	ldrh	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006210:	81bb      	strh	r3, [r7, #12]
 8006212:	89bb      	ldrh	r3, [r7, #12]
 8006214:	f083 0320 	eor.w	r3, r3, #32
 8006218:	81bb      	strh	r3, [r7, #12]
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	441a      	add	r2, r3
 8006224:	89bb      	ldrh	r3, [r7, #12]
 8006226:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800622e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006236:	b29b      	uxth	r3, r3
 8006238:	8013      	strh	r3, [r2, #0]
 800623a:	e04b      	b.n	80062d4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	82fb      	strh	r3, [r7, #22]
 800624a:	8afb      	ldrh	r3, [r7, #22]
 800624c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <USB_EPClearStall+0x106>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	82bb      	strh	r3, [r7, #20]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	8abb      	ldrh	r3, [r7, #20]
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	827b      	strh	r3, [r7, #18]
 80062a4:	8a7b      	ldrh	r3, [r7, #18]
 80062a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062aa:	827b      	strh	r3, [r7, #18]
 80062ac:	8a7b      	ldrh	r3, [r7, #18]
 80062ae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062b2:	827b      	strh	r3, [r7, #18]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	8a7b      	ldrh	r3, [r7, #18]
 80062c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	460b      	mov	r3, r1
 80062ea:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80062ec:	78fb      	ldrb	r3, [r7, #3]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d103      	bne.n	80062fa <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2280      	movs	r2, #128	@ 0x80
 80062f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr

0800632e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800632e:	b480      	push	{r7}
 8006330:	b085      	sub	sp, #20
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800633c:	b29b      	uxth	r3, r3
 800633e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	bc80      	pop	{r7}
 8006360:	4770      	bx	lr

08006362 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006362:	b480      	push	{r7}
 8006364:	b08b      	sub	sp, #44	@ 0x2c
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	4611      	mov	r1, r2
 800636e:	461a      	mov	r2, r3
 8006370:	460b      	mov	r3, r1
 8006372:	80fb      	strh	r3, [r7, #6]
 8006374:	4613      	mov	r3, r2
 8006376:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006378:	88bb      	ldrh	r3, [r7, #4]
 800637a:	3301      	adds	r3, #1
 800637c:	085b      	lsrs	r3, r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	005a      	lsls	r2, r3, #1
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006394:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
 800639a:	e01e      	b.n	80063da <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	3301      	adds	r3, #1
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	b21a      	sxth	r2, r3
 80063ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	8a7a      	ldrh	r2, [r7, #18]
 80063ba:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	3302      	adds	r3, #2
 80063c0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	3302      	adds	r3, #2
 80063c6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	3301      	adds	r3, #1
 80063cc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80063ce:	69fb      	ldr	r3, [r7, #28]
 80063d0:	3301      	adds	r3, #1
 80063d2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80063d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d6:	3b01      	subs	r3, #1
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1dd      	bne.n	800639c <USB_WritePMA+0x3a>
  }
}
 80063e0:	bf00      	nop
 80063e2:	bf00      	nop
 80063e4:	372c      	adds	r7, #44	@ 0x2c
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b08b      	sub	sp, #44	@ 0x2c
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	4611      	mov	r1, r2
 80063f8:	461a      	mov	r2, r3
 80063fa:	460b      	mov	r3, r1
 80063fc:	80fb      	strh	r3, [r7, #6]
 80063fe:	4613      	mov	r3, r2
 8006400:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006402:	88bb      	ldrh	r3, [r7, #4]
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	b29b      	uxth	r3, r3
 8006408:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006412:	88fb      	ldrh	r3, [r7, #6]
 8006414:	005a      	lsls	r2, r3, #1
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800641e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
 8006424:	e01b      	b.n	800645e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	3302      	adds	r3, #2
 8006432:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	0a1b      	lsrs	r3, r3, #8
 8006446:	b2da      	uxtb	r2, r3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	3302      	adds	r3, #2
 8006456:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	3b01      	subs	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1e0      	bne.n	8006426 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006464:	88bb      	ldrh	r3, [r7, #4]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	b29b      	uxth	r3, r3
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	701a      	strb	r2, [r3, #0]
  }
}
 8006480:	bf00      	nop
 8006482:	372c      	adds	r7, #44	@ 0x2c
 8006484:	46bd      	mov	sp, r7
 8006486:	bc80      	pop	{r7}
 8006488:	4770      	bx	lr

0800648a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	460b      	mov	r3, r1
 8006494:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	7c1b      	ldrb	r3, [r3, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d115      	bne.n	80064ce <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064a6:	2202      	movs	r2, #2
 80064a8:	2181      	movs	r1, #129	@ 0x81
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fe9b 	bl	80081e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064ba:	2202      	movs	r2, #2
 80064bc:	2101      	movs	r1, #1
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f001 fe91 	bl	80081e6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80064cc:	e012      	b.n	80064f4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064ce:	2340      	movs	r3, #64	@ 0x40
 80064d0:	2202      	movs	r2, #2
 80064d2:	2181      	movs	r1, #129	@ 0x81
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fe86 	bl	80081e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064e0:	2340      	movs	r3, #64	@ 0x40
 80064e2:	2202      	movs	r2, #2
 80064e4:	2101      	movs	r1, #1
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f001 fe7d 	bl	80081e6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80064f4:	2308      	movs	r3, #8
 80064f6:	2203      	movs	r2, #3
 80064f8:	2182      	movs	r1, #130	@ 0x82
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fe73 	bl	80081e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006506:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800650a:	f001 ff93 	bl	8008434 <USBD_static_malloc>
 800650e:	4602      	mov	r2, r0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d102      	bne.n	8006526 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e026      	b.n	8006574 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800652c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2200      	movs	r2, #0
 8006544:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7c1b      	ldrb	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800655a:	2101      	movs	r1, #1
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 ff32 	bl	80083c6 <USBD_LL_PrepareReceive>
 8006562:	e007      	b.n	8006574 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800656a:	2340      	movs	r3, #64	@ 0x40
 800656c:	2101      	movs	r1, #1
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f001 ff29 	bl	80083c6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800658e:	2181      	movs	r1, #129	@ 0x81
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f001 fe4e 	bl	8008232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800659c:	2101      	movs	r1, #1
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f001 fe47 	bl	8008232 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065ac:	2182      	movs	r1, #130	@ 0x82
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 fe3f 	bl	8008232 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00e      	beq.n	80065e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065d4:	4618      	mov	r0, r3
 80065d6:	f001 ff39 	bl	800844c <USBD_static_free>
    pdev->pClassData = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006602:	2300      	movs	r3, #0
 8006604:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006612:	2b00      	cmp	r3, #0
 8006614:	d039      	beq.n	800668a <USBD_CDC_Setup+0x9e>
 8006616:	2b20      	cmp	r3, #32
 8006618:	d17f      	bne.n	800671a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	88db      	ldrh	r3, [r3, #6]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d029      	beq.n	8006676 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	b25b      	sxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	da11      	bge.n	8006650 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006638:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	88d2      	ldrh	r2, [r2, #6]
 800663e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006640:	6939      	ldr	r1, [r7, #16]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	88db      	ldrh	r3, [r3, #6]
 8006646:	461a      	mov	r2, r3
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f001 fa05 	bl	8007a58 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800664e:	e06b      	b.n	8006728 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	785a      	ldrb	r2, [r3, #1]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	88db      	ldrh	r3, [r3, #6]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006666:	6939      	ldr	r1, [r7, #16]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	88db      	ldrh	r3, [r3, #6]
 800666c:	461a      	mov	r2, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f001 fa20 	bl	8007ab4 <USBD_CtlPrepareRx>
      break;
 8006674:	e058      	b.n	8006728 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	7850      	ldrb	r0, [r2, #1]
 8006682:	2200      	movs	r2, #0
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	4798      	blx	r3
      break;
 8006688:	e04e      	b.n	8006728 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b0b      	cmp	r3, #11
 8006690:	d02e      	beq.n	80066f0 <USBD_CDC_Setup+0x104>
 8006692:	2b0b      	cmp	r3, #11
 8006694:	dc38      	bgt.n	8006708 <USBD_CDC_Setup+0x11c>
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <USBD_CDC_Setup+0xb4>
 800669a:	2b0a      	cmp	r3, #10
 800669c:	d014      	beq.n	80066c8 <USBD_CDC_Setup+0xdc>
 800669e:	e033      	b.n	8006708 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d107      	bne.n	80066ba <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066aa:	f107 030c 	add.w	r3, r7, #12
 80066ae:	2202      	movs	r2, #2
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f9d0 	bl	8007a58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b8:	e02e      	b.n	8006718 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 f961 	bl	8007984 <USBD_CtlError>
            ret = USBD_FAIL;
 80066c2:	2302      	movs	r3, #2
 80066c4:	75fb      	strb	r3, [r7, #23]
          break;
 80066c6:	e027      	b.n	8006718 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d107      	bne.n	80066e2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80066d2:	f107 030f 	add.w	r3, r7, #15
 80066d6:	2201      	movs	r2, #1
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 f9bc 	bl	8007a58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066e0:	e01a      	b.n	8006718 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 f94d 	bl	8007984 <USBD_CtlError>
            ret = USBD_FAIL;
 80066ea:	2302      	movs	r3, #2
 80066ec:	75fb      	strb	r3, [r7, #23]
          break;
 80066ee:	e013      	b.n	8006718 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d00d      	beq.n	8006716 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f001 f941 	bl	8007984 <USBD_CtlError>
            ret = USBD_FAIL;
 8006702:	2302      	movs	r3, #2
 8006704:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006706:	e006      	b.n	8006716 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f001 f93a 	bl	8007984 <USBD_CtlError>
          ret = USBD_FAIL;
 8006710:	2302      	movs	r3, #2
 8006712:	75fb      	strb	r3, [r7, #23]
          break;
 8006714:	e000      	b.n	8006718 <USBD_CDC_Setup+0x12c>
          break;
 8006716:	bf00      	nop
      }
      break;
 8006718:	e006      	b.n	8006728 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 f931 	bl	8007984 <USBD_CtlError>
      ret = USBD_FAIL;
 8006722:	2302      	movs	r3, #2
 8006724:	75fb      	strb	r3, [r7, #23]
      break;
 8006726:	bf00      	nop
  }

  return ret;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006744:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800674c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d03a      	beq.n	80067ce <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4613      	mov	r3, r2
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	331c      	adds	r3, #28
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d029      	beq.n	80067c2 <USBD_CDC_DataIn+0x90>
 800676e:	78fa      	ldrb	r2, [r7, #3]
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	440b      	add	r3, r1
 800677c:	331c      	adds	r3, #28
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	78f9      	ldrb	r1, [r7, #3]
 8006782:	68b8      	ldr	r0, [r7, #8]
 8006784:	460b      	mov	r3, r1
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	440b      	add	r3, r1
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4403      	add	r3, r0
 800678e:	3320      	adds	r3, #32
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	fbb2 f1f3 	udiv	r1, r2, r3
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d110      	bne.n	80067c2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80067a0:	78fa      	ldrb	r2, [r7, #3]
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	331c      	adds	r3, #28
 80067b0:	2200      	movs	r2, #0
 80067b2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067b4:	78f9      	ldrb	r1, [r7, #3]
 80067b6:	2300      	movs	r3, #0
 80067b8:	2200      	movs	r2, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fde0 	bl	8008380 <USBD_LL_Transmit>
 80067c0:	e003      	b.n	80067ca <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	4619      	mov	r1, r3
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fe0b 	bl	800840c <USBD_LL_GetRxDataSize>
 80067f6:	4602      	mov	r2, r0
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800681c:	4611      	mov	r1, r2
 800681e:	4798      	blx	r3

    return USBD_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	e000      	b.n	8006826 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006824:	2302      	movs	r3, #2
  }
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800683c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006844:	2b00      	cmp	r3, #0
 8006846:	d014      	beq.n	8006872 <USBD_CDC_EP0_RxReady+0x44>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800684e:	2bff      	cmp	r3, #255	@ 0xff
 8006850:	d00f      	beq.n	8006872 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006860:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006868:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	@ 0xff
 800686e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2243      	movs	r2, #67	@ 0x43
 8006888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800688a:	4b03      	ldr	r3, [pc, #12]	@ (8006898 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	2000009c 	.word	0x2000009c

0800689c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2243      	movs	r2, #67	@ 0x43
 80068a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80068aa:	4b03      	ldr	r3, [pc, #12]	@ (80068b8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	20000058 	.word	0x20000058

080068bc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2243      	movs	r2, #67	@ 0x43
 80068c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80068ca:	4b03      	ldr	r3, [pc, #12]	@ (80068d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc80      	pop	{r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	200000e0 	.word	0x200000e0

080068dc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	220a      	movs	r2, #10
 80068e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80068ea:	4b03      	ldr	r3, [pc, #12]	@ (80068f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	20000014 	.word	0x20000014

080068fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006906:	2302      	movs	r3, #2
 8006908:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	bc80      	pop	{r7}
 8006926:	4770      	bx	lr

08006928 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006928:	b480      	push	{r7}
 800692a:	b087      	sub	sp, #28
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	4613      	mov	r3, r2
 8006934:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800693c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	371c      	adds	r7, #28
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
 8006962:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800696a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	bc80      	pop	{r7}
 800697e:	4770      	bx	lr

08006980 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d01c      	beq.n	80069d4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d115      	bne.n	80069d0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	2181      	movs	r1, #129	@ 0x81
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fcda 	bl	8008380 <USBD_LL_Transmit>

      return USBD_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	e002      	b.n	80069d6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80069d4:	2302      	movs	r3, #2
  }
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3710      	adds	r7, #16
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}

080069de <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d017      	beq.n	8006a28 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	7c1b      	ldrb	r3, [r3, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d109      	bne.n	8006a14 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 fcda 	bl	80083c6 <USBD_LL_PrepareReceive>
 8006a12:	e007      	b.n	8006a24 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a1a:	2340      	movs	r3, #64	@ 0x40
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fcd1 	bl	80083c6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a24:	2300      	movs	r3, #0
 8006a26:	e000      	b.n	8006a2a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b084      	sub	sp, #16
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	60b9      	str	r1, [r7, #8]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006a46:	2302      	movs	r3, #2
 8006a48:	e01a      	b.n	8006a80 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d003      	beq.n	8006a6a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	68ba      	ldr	r2, [r7, #8]
 8006a66:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	79fa      	ldrb	r2, [r7, #7]
 8006a76:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f001 fb3f 	bl	80080fc <USBD_LL_Init>

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	73fb      	strb	r3, [r7, #15]
 8006aa8:	e001      	b.n	8006aae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bc80      	pop	{r7}
 8006ab8:	4770      	bx	lr

08006aba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b082      	sub	sp, #8
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fb74 	bl	80081b0 <USBD_LL_Start>

  return USBD_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bc80      	pop	{r7}
 8006ae4:	4770      	bx	lr

08006ae6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006af2:	2302      	movs	r3, #2
 8006af4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	4611      	mov	r1, r2
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	4798      	blx	r3
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	78fa      	ldrb	r2, [r7, #3]
 8006b3a:	4611      	mov	r1, r2
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	4798      	blx	r3

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fed8 	bl	8007912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006b70:	461a      	mov	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d016      	beq.n	8006bb4 <USBD_LL_SetupStage+0x6a>
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d81c      	bhi.n	8006bc4 <USBD_LL_SetupStage+0x7a>
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <USBD_LL_SetupStage+0x4a>
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d008      	beq.n	8006ba4 <USBD_LL_SetupStage+0x5a>
 8006b92:	e017      	b.n	8006bc4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f9cb 	bl	8006f38 <USBD_StdDevReq>
      break;
 8006ba2:	e01a      	b.n	8006bda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fa2d 	bl	800700c <USBD_StdItfReq>
      break;
 8006bb2:	e012      	b.n	8006bda <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006bba:	4619      	mov	r1, r3
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa6d 	bl	800709c <USBD_StdEPReq>
      break;
 8006bc2:	e00a      	b.n	8006bda <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006bca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f001 fb4c 	bl	8008270 <USBD_LL_StallEP>
      break;
 8006bd8:	bf00      	nop
  }

  return USBD_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b086      	sub	sp, #24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	460b      	mov	r3, r1
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d14b      	bne.n	8006c90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006bfe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d134      	bne.n	8006c74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	68da      	ldr	r2, [r3, #12]
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d919      	bls.n	8006c4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	68da      	ldr	r2, [r3, #12]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	1ad2      	subs	r2, r2, r3
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d203      	bcs.n	8006c38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	e002      	b.n	8006c3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 ff54 	bl	8007af0 <USBD_CtlContinueRx>
 8006c48:	e038      	b.n	8006cbc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	d105      	bne.n	8006c6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 ff51 	bl	8007b14 <USBD_CtlSendStatus>
 8006c72:	e023      	b.n	8006cbc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d11e      	bne.n	8006cbc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006c86:	2100      	movs	r1, #0
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f001 faf1 	bl	8008270 <USBD_LL_StallEP>
 8006c8e:	e015      	b.n	8006cbc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d00d      	beq.n	8006cb8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d108      	bne.n	8006cb8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	7afa      	ldrb	r2, [r7, #11]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	4798      	blx	r3
 8006cb6:	e001      	b.n	8006cbc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e000      	b.n	8006cbe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b086      	sub	sp, #24
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006cd4:	7afb      	ldrb	r3, [r7, #11]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d17f      	bne.n	8006dda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d15c      	bne.n	8006da4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d915      	bls.n	8006d22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6879      	ldr	r1, [r7, #4]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 febe 	bl	8007a90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d14:	2300      	movs	r3, #0
 8006d16:	2200      	movs	r2, #0
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f001 fb53 	bl	80083c6 <USBD_LL_PrepareReceive>
 8006d20:	e04e      	b.n	8006dc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	6912      	ldr	r2, [r2, #16]
 8006d2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d2e:	fb01 f202 	mul.w	r2, r1, r2
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11c      	bne.n	8006d72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d316      	bcc.n	8006d72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d20f      	bcs.n	8006d72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d52:	2200      	movs	r2, #0
 8006d54:	2100      	movs	r1, #0
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f000 fe9a 	bl	8007a90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d64:	2300      	movs	r3, #0
 8006d66:	2200      	movs	r2, #0
 8006d68:	2100      	movs	r1, #0
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f001 fb2b 	bl	80083c6 <USBD_LL_PrepareReceive>
 8006d70:	e026      	b.n	8006dc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006d84:	2b03      	cmp	r3, #3
 8006d86:	d105      	bne.n	8006d94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d94:	2180      	movs	r1, #128	@ 0x80
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f001 fa6a 	bl	8008270 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 fecc 	bl	8007b3a <USBD_CtlReceiveStatus>
 8006da2:	e00d      	b.n	8006dc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d004      	beq.n	8006db8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006db8:	2180      	movs	r1, #128	@ 0x80
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f001 fa58 	bl	8008270 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d11d      	bne.n	8006e06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff fe81 	bl	8006ad2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006dd8:	e015      	b.n	8006e06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00d      	beq.n	8006e02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006dec:	2b03      	cmp	r3, #3
 8006dee:	d108      	bne.n	8006e02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	7afa      	ldrb	r2, [r7, #11]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	4798      	blx	r3
 8006e00:	e001      	b.n	8006e06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e02:	2302      	movs	r3, #2
 8006e04:	e000      	b.n	8006e08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e18:	2340      	movs	r3, #64	@ 0x40
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f001 f9e1 	bl	80081e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2240      	movs	r2, #64	@ 0x40
 8006e30:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e34:	2340      	movs	r3, #64	@ 0x40
 8006e36:	2200      	movs	r2, #0
 8006e38:	2180      	movs	r1, #128	@ 0x80
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f001 f9d3 	bl	80081e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2240      	movs	r2, #64	@ 0x40
 8006e4a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6852      	ldr	r2, [r2, #4]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	4611      	mov	r1, r2
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	4798      	blx	r3
  }

  return USBD_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bc80      	pop	{r7}
 8006eae:	4770      	bx	lr

08006eb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bc80      	pop	{r7}
 8006ed6:	4770      	bx	lr

08006ed8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	d105      	bne.n	8006ef6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bc80      	pop	{r7}
 8006f00:	4770      	bx	lr

08006f02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d10b      	bne.n	8006f2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
 8006f40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f4e:	2b40      	cmp	r3, #64	@ 0x40
 8006f50:	d005      	beq.n	8006f5e <USBD_StdDevReq+0x26>
 8006f52:	2b40      	cmp	r3, #64	@ 0x40
 8006f54:	d84f      	bhi.n	8006ff6 <USBD_StdDevReq+0xbe>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <USBD_StdDevReq+0x36>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d14b      	bne.n	8006ff6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	4798      	blx	r3
      break;
 8006f6c:	e048      	b.n	8007000 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b09      	cmp	r3, #9
 8006f74:	d839      	bhi.n	8006fea <USBD_StdDevReq+0xb2>
 8006f76:	a201      	add	r2, pc, #4	@ (adr r2, 8006f7c <USBD_StdDevReq+0x44>)
 8006f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7c:	08006fcd 	.word	0x08006fcd
 8006f80:	08006fe1 	.word	0x08006fe1
 8006f84:	08006feb 	.word	0x08006feb
 8006f88:	08006fd7 	.word	0x08006fd7
 8006f8c:	08006feb 	.word	0x08006feb
 8006f90:	08006faf 	.word	0x08006faf
 8006f94:	08006fa5 	.word	0x08006fa5
 8006f98:	08006feb 	.word	0x08006feb
 8006f9c:	08006fc3 	.word	0x08006fc3
 8006fa0:	08006fb9 	.word	0x08006fb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f9dc 	bl	8007364 <USBD_GetDescriptor>
          break;
 8006fac:	e022      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb3f 	bl	8007634 <USBD_SetAddress>
          break;
 8006fb6:	e01d      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb7e 	bl	80076bc <USBD_SetConfig>
          break;
 8006fc0:	e018      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fc07 	bl	80077d8 <USBD_GetConfig>
          break;
 8006fca:	e013      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fc37 	bl	8007842 <USBD_GetStatus>
          break;
 8006fd4:	e00e      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fc65 	bl	80078a8 <USBD_SetFeature>
          break;
 8006fde:	e009      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fc74 	bl	80078d0 <USBD_ClrFeature>
          break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fcc9 	bl	8007984 <USBD_CtlError>
          break;
 8006ff2:	bf00      	nop
      }
      break;
 8006ff4:	e004      	b.n	8007000 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fcc3 	bl	8007984 <USBD_CtlError>
      break;
 8006ffe:	bf00      	nop
  }

  return ret;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007022:	2b40      	cmp	r3, #64	@ 0x40
 8007024:	d005      	beq.n	8007032 <USBD_StdItfReq+0x26>
 8007026:	2b40      	cmp	r3, #64	@ 0x40
 8007028:	d82e      	bhi.n	8007088 <USBD_StdItfReq+0x7c>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <USBD_StdItfReq+0x26>
 800702e:	2b20      	cmp	r3, #32
 8007030:	d12a      	bne.n	8007088 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007038:	3b01      	subs	r3, #1
 800703a:	2b02      	cmp	r3, #2
 800703c:	d81d      	bhi.n	800707a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	2b01      	cmp	r3, #1
 8007046:	d813      	bhi.n	8007070 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
 8007056:	4603      	mov	r3, r0
 8007058:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	88db      	ldrh	r3, [r3, #6]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d110      	bne.n	8007084 <USBD_StdItfReq+0x78>
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10d      	bne.n	8007084 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fd53 	bl	8007b14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800706e:	e009      	b.n	8007084 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fc86 	bl	8007984 <USBD_CtlError>
          break;
 8007078:	e004      	b.n	8007084 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fc81 	bl	8007984 <USBD_CtlError>
          break;
 8007082:	e000      	b.n	8007086 <USBD_StdItfReq+0x7a>
          break;
 8007084:	bf00      	nop
      }
      break;
 8007086:	e004      	b.n	8007092 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007088:	6839      	ldr	r1, [r7, #0]
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fc7a 	bl	8007984 <USBD_CtlError>
      break;
 8007090:	bf00      	nop
  }

  return USBD_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	889b      	ldrh	r3, [r3, #4]
 80070ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070b8:	2b40      	cmp	r3, #64	@ 0x40
 80070ba:	d007      	beq.n	80070cc <USBD_StdEPReq+0x30>
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	f200 8146 	bhi.w	800734e <USBD_StdEPReq+0x2b2>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <USBD_StdEPReq+0x40>
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	f040 8141 	bne.w	800734e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      break;
 80070da:	e13d      	b.n	8007358 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070e4:	2b20      	cmp	r3, #32
 80070e6:	d10a      	bne.n	80070fe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]

        return ret;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	e12d      	b.n	800735a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d007      	beq.n	8007116 <USBD_StdEPReq+0x7a>
 8007106:	2b03      	cmp	r3, #3
 8007108:	f300 811b 	bgt.w	8007342 <USBD_StdEPReq+0x2a6>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d072      	beq.n	80071f6 <USBD_StdEPReq+0x15a>
 8007110:	2b01      	cmp	r3, #1
 8007112:	d03a      	beq.n	800718a <USBD_StdEPReq+0xee>
 8007114:	e115      	b.n	8007342 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800711c:	2b02      	cmp	r3, #2
 800711e:	d002      	beq.n	8007126 <USBD_StdEPReq+0x8a>
 8007120:	2b03      	cmp	r3, #3
 8007122:	d015      	beq.n	8007150 <USBD_StdEPReq+0xb4>
 8007124:	e02b      	b.n	800717e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <USBD_StdEPReq+0xaa>
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	2b80      	cmp	r3, #128	@ 0x80
 8007130:	d009      	beq.n	8007146 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007132:	7bbb      	ldrb	r3, [r7, #14]
 8007134:	4619      	mov	r1, r3
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 f89a 	bl	8008270 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800713c:	2180      	movs	r1, #128	@ 0x80
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 f896 	bl	8008270 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007144:	e020      	b.n	8007188 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fc1b 	bl	8007984 <USBD_CtlError>
              break;
 800714e:	e01b      	b.n	8007188 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	885b      	ldrh	r3, [r3, #2]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10e      	bne.n	8007176 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <USBD_StdEPReq+0xda>
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	2b80      	cmp	r3, #128	@ 0x80
 8007162:	d008      	beq.n	8007176 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	88db      	ldrh	r3, [r3, #6]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800716c:	7bbb      	ldrb	r3, [r7, #14]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 f87d 	bl	8008270 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fccc 	bl	8007b14 <USBD_CtlSendStatus>

              break;
 800717c:	e004      	b.n	8007188 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 fbff 	bl	8007984 <USBD_CtlError>
              break;
 8007186:	bf00      	nop
          }
          break;
 8007188:	e0e0      	b.n	800734c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007190:	2b02      	cmp	r3, #2
 8007192:	d002      	beq.n	800719a <USBD_StdEPReq+0xfe>
 8007194:	2b03      	cmp	r3, #3
 8007196:	d015      	beq.n	80071c4 <USBD_StdEPReq+0x128>
 8007198:	e026      	b.n	80071e8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00c      	beq.n	80071ba <USBD_StdEPReq+0x11e>
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	2b80      	cmp	r3, #128	@ 0x80
 80071a4:	d009      	beq.n	80071ba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	4619      	mov	r1, r3
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 f860 	bl	8008270 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071b0:	2180      	movs	r1, #128	@ 0x80
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 f85c 	bl	8008270 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071b8:	e01c      	b.n	80071f4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fbe1 	bl	8007984 <USBD_CtlError>
              break;
 80071c2:	e017      	b.n	80071f4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	885b      	ldrh	r3, [r3, #2]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d112      	bne.n	80071f2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d004      	beq.n	80071e0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071d6:	7bbb      	ldrb	r3, [r7, #14]
 80071d8:	4619      	mov	r1, r3
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f001 f867 	bl	80082ae <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc97 	bl	8007b14 <USBD_CtlSendStatus>
              }
              break;
 80071e6:	e004      	b.n	80071f2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fbca 	bl	8007984 <USBD_CtlError>
              break;
 80071f0:	e000      	b.n	80071f4 <USBD_StdEPReq+0x158>
              break;
 80071f2:	bf00      	nop
          }
          break;
 80071f4:	e0aa      	b.n	800734c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d002      	beq.n	8007206 <USBD_StdEPReq+0x16a>
 8007200:	2b03      	cmp	r3, #3
 8007202:	d032      	beq.n	800726a <USBD_StdEPReq+0x1ce>
 8007204:	e097      	b.n	8007336 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007206:	7bbb      	ldrb	r3, [r7, #14]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <USBD_StdEPReq+0x180>
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b80      	cmp	r3, #128	@ 0x80
 8007210:	d004      	beq.n	800721c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007212:	6839      	ldr	r1, [r7, #0]
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 fbb5 	bl	8007984 <USBD_CtlError>
                break;
 800721a:	e091      	b.n	8007340 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	da0b      	bge.n	800723c <USBD_StdEPReq+0x1a0>
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	3310      	adds	r3, #16
 8007234:	687a      	ldr	r2, [r7, #4]
 8007236:	4413      	add	r3, r2
 8007238:	3304      	adds	r3, #4
 800723a:	e00b      	b.n	8007254 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	4413      	add	r3, r2
 8007252:	3304      	adds	r3, #4
 8007254:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	2202      	movs	r2, #2
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fbf8 	bl	8007a58 <USBD_CtlSendData>
              break;
 8007268:	e06a      	b.n	8007340 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800726a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800726e:	2b00      	cmp	r3, #0
 8007270:	da11      	bge.n	8007296 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	f003 020f 	and.w	r2, r3, #15
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4613      	mov	r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	4413      	add	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	440b      	add	r3, r1
 8007284:	3318      	adds	r3, #24
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d117      	bne.n	80072bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 fb78 	bl	8007984 <USBD_CtlError>
                  break;
 8007294:	e054      	b.n	8007340 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	f003 020f 	and.w	r2, r3, #15
 800729c:	6879      	ldr	r1, [r7, #4]
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	440b      	add	r3, r1
 80072a8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fb65 	bl	8007984 <USBD_CtlError>
                  break;
 80072ba:	e041      	b.n	8007340 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da0b      	bge.n	80072dc <USBD_StdEPReq+0x240>
 80072c4:	7bbb      	ldrb	r3, [r7, #14]
 80072c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80072ca:	4613      	mov	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4413      	add	r3, r2
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	3310      	adds	r3, #16
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	4413      	add	r3, r2
 80072d8:	3304      	adds	r3, #4
 80072da:	e00b      	b.n	80072f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072dc:	7bbb      	ldrb	r3, [r7, #14]
 80072de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	3304      	adds	r3, #4
 80072f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <USBD_StdEPReq+0x266>
 80072fc:	7bbb      	ldrb	r3, [r7, #14]
 80072fe:	2b80      	cmp	r3, #128	@ 0x80
 8007300:	d103      	bne.n	800730a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e00e      	b.n	8007328 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 ffec 	bl	80082ec <USBD_LL_IsStallEP>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	e002      	b.n	8007328 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2202      	movs	r2, #2
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb92 	bl	8007a58 <USBD_CtlSendData>
              break;
 8007334:	e004      	b.n	8007340 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fb23 	bl	8007984 <USBD_CtlError>
              break;
 800733e:	bf00      	nop
          }
          break;
 8007340:	e004      	b.n	800734c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007342:	6839      	ldr	r1, [r7, #0]
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fb1d 	bl	8007984 <USBD_CtlError>
          break;
 800734a:	bf00      	nop
      }
      break;
 800734c:	e004      	b.n	8007358 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fb17 	bl	8007984 <USBD_CtlError>
      break;
 8007356:	bf00      	nop
  }

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	885b      	ldrh	r3, [r3, #2]
 800737e:	0a1b      	lsrs	r3, r3, #8
 8007380:	b29b      	uxth	r3, r3
 8007382:	3b01      	subs	r3, #1
 8007384:	2b06      	cmp	r3, #6
 8007386:	f200 8128 	bhi.w	80075da <USBD_GetDescriptor+0x276>
 800738a:	a201      	add	r2, pc, #4	@ (adr r2, 8007390 <USBD_GetDescriptor+0x2c>)
 800738c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007390:	080073ad 	.word	0x080073ad
 8007394:	080073c5 	.word	0x080073c5
 8007398:	08007405 	.word	0x08007405
 800739c:	080075db 	.word	0x080075db
 80073a0:	080075db 	.word	0x080075db
 80073a4:	0800757b 	.word	0x0800757b
 80073a8:	080075a7 	.word	0x080075a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	7c12      	ldrb	r2, [r2, #16]
 80073b8:	f107 0108 	add.w	r1, r7, #8
 80073bc:	4610      	mov	r0, r2
 80073be:	4798      	blx	r3
 80073c0:	60f8      	str	r0, [r7, #12]
      break;
 80073c2:	e112      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7c1b      	ldrb	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10d      	bne.n	80073e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d4:	f107 0208 	add.w	r2, r7, #8
 80073d8:	4610      	mov	r0, r2
 80073da:	4798      	blx	r3
 80073dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	3301      	adds	r3, #1
 80073e2:	2202      	movs	r2, #2
 80073e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80073e6:	e100      	b.n	80075ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f0:	f107 0208 	add.w	r2, r7, #8
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
 80073f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	2202      	movs	r2, #2
 8007400:	701a      	strb	r2, [r3, #0]
      break;
 8007402:	e0f2      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	885b      	ldrh	r3, [r3, #2]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b05      	cmp	r3, #5
 800740c:	f200 80ac 	bhi.w	8007568 <USBD_GetDescriptor+0x204>
 8007410:	a201      	add	r2, pc, #4	@ (adr r2, 8007418 <USBD_GetDescriptor+0xb4>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007431 	.word	0x08007431
 800741c:	08007465 	.word	0x08007465
 8007420:	08007499 	.word	0x08007499
 8007424:	080074cd 	.word	0x080074cd
 8007428:	08007501 	.word	0x08007501
 800742c:	08007535 	.word	0x08007535
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7c12      	ldrb	r2, [r2, #16]
 8007448:	f107 0108 	add.w	r1, r7, #8
 800744c:	4610      	mov	r0, r2
 800744e:	4798      	blx	r3
 8007450:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007452:	e091      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa94 	bl	8007984 <USBD_CtlError>
            err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
          break;
 8007462:	e089      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d00b      	beq.n	8007488 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	7c12      	ldrb	r2, [r2, #16]
 800747c:	f107 0108 	add.w	r1, r7, #8
 8007480:	4610      	mov	r0, r2
 8007482:	4798      	blx	r3
 8007484:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007486:	e077      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007488:	6839      	ldr	r1, [r7, #0]
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fa7a 	bl	8007984 <USBD_CtlError>
            err++;
 8007490:	7afb      	ldrb	r3, [r7, #11]
 8007492:	3301      	adds	r3, #1
 8007494:	72fb      	strb	r3, [r7, #11]
          break;
 8007496:	e06f      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d00b      	beq.n	80074bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	4610      	mov	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ba:	e05d      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074bc:	6839      	ldr	r1, [r7, #0]
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa60 	bl	8007984 <USBD_CtlError>
            err++;
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	3301      	adds	r3, #1
 80074c8:	72fb      	strb	r3, [r7, #11]
          break;
 80074ca:	e055      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7c12      	ldrb	r2, [r2, #16]
 80074e4:	f107 0108 	add.w	r1, r7, #8
 80074e8:	4610      	mov	r0, r2
 80074ea:	4798      	blx	r3
 80074ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ee:	e043      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fa46 	bl	8007984 <USBD_CtlError>
            err++;
 80074f8:	7afb      	ldrb	r3, [r7, #11]
 80074fa:	3301      	adds	r3, #1
 80074fc:	72fb      	strb	r3, [r7, #11]
          break;
 80074fe:	e03b      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007506:	695b      	ldr	r3, [r3, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	7c12      	ldrb	r2, [r2, #16]
 8007518:	f107 0108 	add.w	r1, r7, #8
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
 8007520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007522:	e029      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fa2c 	bl	8007984 <USBD_CtlError>
            err++;
 800752c:	7afb      	ldrb	r3, [r7, #11]
 800752e:	3301      	adds	r3, #1
 8007530:	72fb      	strb	r3, [r7, #11]
          break;
 8007532:	e021      	b.n	8007578 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 0108 	add.w	r1, r7, #8
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007556:	e00f      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fa12 	bl	8007984 <USBD_CtlError>
            err++;
 8007560:	7afb      	ldrb	r3, [r7, #11]
 8007562:	3301      	adds	r3, #1
 8007564:	72fb      	strb	r3, [r7, #11]
          break;
 8007566:	e007      	b.n	8007578 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa0a 	bl	8007984 <USBD_CtlError>
          err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007576:	e038      	b.n	80075ea <USBD_GetDescriptor+0x286>
 8007578:	e037      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	7c1b      	ldrb	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d109      	bne.n	8007596 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800758a:	f107 0208 	add.w	r2, r7, #8
 800758e:	4610      	mov	r0, r2
 8007590:	4798      	blx	r3
 8007592:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007594:	e029      	b.n	80075ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007596:	6839      	ldr	r1, [r7, #0]
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 f9f3 	bl	8007984 <USBD_CtlError>
        err++;
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	3301      	adds	r3, #1
 80075a2:	72fb      	strb	r3, [r7, #11]
      break;
 80075a4:	e021      	b.n	80075ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	7c1b      	ldrb	r3, [r3, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b6:	f107 0208 	add.w	r2, r7, #8
 80075ba:	4610      	mov	r0, r2
 80075bc:	4798      	blx	r3
 80075be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	3301      	adds	r3, #1
 80075c4:	2207      	movs	r2, #7
 80075c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80075c8:	e00f      	b.n	80075ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f9d9 	bl	8007984 <USBD_CtlError>
        err++;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
 80075d4:	3301      	adds	r3, #1
 80075d6:	72fb      	strb	r3, [r7, #11]
      break;
 80075d8:	e007      	b.n	80075ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80075da:	6839      	ldr	r1, [r7, #0]
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f9d1 	bl	8007984 <USBD_CtlError>
      err++;
 80075e2:	7afb      	ldrb	r3, [r7, #11]
 80075e4:	3301      	adds	r3, #1
 80075e6:	72fb      	strb	r3, [r7, #11]
      break;
 80075e8:	bf00      	nop
  }

  if (err != 0U)
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11c      	bne.n	800762a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80075f0:	893b      	ldrh	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d011      	beq.n	800761a <USBD_GetDescriptor+0x2b6>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	88db      	ldrh	r3, [r3, #6]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00d      	beq.n	800761a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	88da      	ldrh	r2, [r3, #6]
 8007602:	893b      	ldrh	r3, [r7, #8]
 8007604:	4293      	cmp	r3, r2
 8007606:	bf28      	it	cs
 8007608:	4613      	movcs	r3, r2
 800760a:	b29b      	uxth	r3, r3
 800760c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800760e:	893b      	ldrh	r3, [r7, #8]
 8007610:	461a      	mov	r2, r3
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa1f 	bl	8007a58 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	88db      	ldrh	r3, [r3, #6]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d104      	bne.n	800762c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa76 	bl	8007b14 <USBD_CtlSendStatus>
 8007628:	e000      	b.n	800762c <USBD_GetDescriptor+0x2c8>
    return;
 800762a:	bf00      	nop
    }
  }
}
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop

08007634 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	889b      	ldrh	r3, [r3, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d130      	bne.n	80076a8 <USBD_SetAddress+0x74>
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d12c      	bne.n	80076a8 <USBD_SetAddress+0x74>
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	885b      	ldrh	r3, [r3, #2]
 8007652:	2b7f      	cmp	r3, #127	@ 0x7f
 8007654:	d828      	bhi.n	80076a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	885b      	ldrh	r3, [r3, #2]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007668:	2b03      	cmp	r3, #3
 800766a:	d104      	bne.n	8007676 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f988 	bl	8007984 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	e01d      	b.n	80076b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7bfa      	ldrb	r2, [r7, #15]
 800767a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800767e:	7bfb      	ldrb	r3, [r7, #15]
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fe5d 	bl	8008342 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa43 	bl	8007b14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800769c:	e009      	b.n	80076b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a6:	e004      	b.n	80076b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076a8:	6839      	ldr	r1, [r7, #0]
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f96a 	bl	8007984 <USBD_CtlError>
  }
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	4b41      	ldr	r3, [pc, #260]	@ (80077d4 <USBD_SetConfig+0x118>)
 80076ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076d0:	4b40      	ldr	r3, [pc, #256]	@ (80077d4 <USBD_SetConfig+0x118>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d904      	bls.n	80076e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f952 	bl	8007984 <USBD_CtlError>
 80076e0:	e075      	b.n	80077ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d002      	beq.n	80076f2 <USBD_SetConfig+0x36>
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d023      	beq.n	8007738 <USBD_SetConfig+0x7c>
 80076f0:	e062      	b.n	80077b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80076f2:	4b38      	ldr	r3, [pc, #224]	@ (80077d4 <USBD_SetConfig+0x118>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d01a      	beq.n	8007730 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80076fa:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <USBD_SetConfig+0x118>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800770c:	4b31      	ldr	r3, [pc, #196]	@ (80077d4 <USBD_SetConfig+0x118>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff f9e7 	bl	8006ae6 <USBD_SetClassConfig>
 8007718:	4603      	mov	r3, r0
 800771a:	2b02      	cmp	r3, #2
 800771c:	d104      	bne.n	8007728 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f92f 	bl	8007984 <USBD_CtlError>
            return;
 8007726:	e052      	b.n	80077ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9f3 	bl	8007b14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800772e:	e04e      	b.n	80077ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f9ef 	bl	8007b14 <USBD_CtlSendStatus>
        break;
 8007736:	e04a      	b.n	80077ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007738:	4b26      	ldr	r3, [pc, #152]	@ (80077d4 <USBD_SetConfig+0x118>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d112      	bne.n	8007766 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8007748:	4b22      	ldr	r3, [pc, #136]	@ (80077d4 <USBD_SetConfig+0x118>)
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007752:	4b20      	ldr	r3, [pc, #128]	@ (80077d4 <USBD_SetConfig+0x118>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7ff f9e3 	bl	8006b24 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f9d8 	bl	8007b14 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007764:	e033      	b.n	80077ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007766:	4b1b      	ldr	r3, [pc, #108]	@ (80077d4 <USBD_SetConfig+0x118>)
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	429a      	cmp	r2, r3
 8007772:	d01d      	beq.n	80077b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff f9d1 	bl	8006b24 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007782:	4b14      	ldr	r3, [pc, #80]	@ (80077d4 <USBD_SetConfig+0x118>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800778c:	4b11      	ldr	r3, [pc, #68]	@ (80077d4 <USBD_SetConfig+0x118>)
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff f9a7 	bl	8006ae6 <USBD_SetClassConfig>
 8007798:	4603      	mov	r3, r0
 800779a:	2b02      	cmp	r3, #2
 800779c:	d104      	bne.n	80077a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800779e:	6839      	ldr	r1, [r7, #0]
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f8ef 	bl	8007984 <USBD_CtlError>
            return;
 80077a6:	e012      	b.n	80077ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9b3 	bl	8007b14 <USBD_CtlSendStatus>
        break;
 80077ae:	e00e      	b.n	80077ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f9af 	bl	8007b14 <USBD_CtlSendStatus>
        break;
 80077b6:	e00a      	b.n	80077ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8e2 	bl	8007984 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <USBD_SetConfig+0x118>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7ff f9ac 	bl	8006b24 <USBD_ClrClassConfig>
        break;
 80077cc:	bf00      	nop
    }
  }
}
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20002ca4 	.word	0x20002ca4

080077d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	88db      	ldrh	r3, [r3, #6]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d004      	beq.n	80077f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ea:	6839      	ldr	r1, [r7, #0]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8c9 	bl	8007984 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077f2:	e022      	b.n	800783a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	dc02      	bgt.n	8007804 <USBD_GetConfig+0x2c>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	dc03      	bgt.n	800780a <USBD_GetConfig+0x32>
 8007802:	e015      	b.n	8007830 <USBD_GetConfig+0x58>
 8007804:	2b03      	cmp	r3, #3
 8007806:	d00b      	beq.n	8007820 <USBD_GetConfig+0x48>
 8007808:	e012      	b.n	8007830 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3308      	adds	r3, #8
 8007814:	2201      	movs	r2, #1
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 f91d 	bl	8007a58 <USBD_CtlSendData>
        break;
 800781e:	e00c      	b.n	800783a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3304      	adds	r3, #4
 8007824:	2201      	movs	r2, #1
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f915 	bl	8007a58 <USBD_CtlSendData>
        break;
 800782e:	e004      	b.n	800783a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8a6 	bl	8007984 <USBD_CtlError>
        break;
 8007838:	bf00      	nop
}
 800783a:	bf00      	nop
 800783c:	3708      	adds	r7, #8
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b082      	sub	sp, #8
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007852:	3b01      	subs	r3, #1
 8007854:	2b02      	cmp	r3, #2
 8007856:	d81e      	bhi.n	8007896 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	88db      	ldrh	r3, [r3, #6]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d004      	beq.n	800786a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f88e 	bl	8007984 <USBD_CtlError>
        break;
 8007868:	e01a      	b.n	80078a0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f043 0202 	orr.w	r2, r3, #2
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	330c      	adds	r3, #12
 800788a:	2202      	movs	r2, #2
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8e2 	bl	8007a58 <USBD_CtlSendData>
      break;
 8007894:	e004      	b.n	80078a0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f873 	bl	8007984 <USBD_CtlError>
      break;
 800789e:	bf00      	nop
  }
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d106      	bne.n	80078c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f926 	bl	8007b14 <USBD_CtlSendStatus>
  }
}
 80078c8:	bf00      	nop
 80078ca:	3708      	adds	r7, #8
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d80b      	bhi.n	80078fe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10c      	bne.n	8007908 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f90c 	bl	8007b14 <USBD_CtlSendStatus>
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f83f 	bl	8007984 <USBD_CtlError>
      break;
 8007906:	e000      	b.n	800790a <USBD_ClrFeature+0x3a>
      break;
 8007908:	bf00      	nop
  }
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007912:	b480      	push	{r7}
 8007914:	b083      	sub	sp, #12
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	785a      	ldrb	r2, [r3, #1]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	3302      	adds	r3, #2
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	461a      	mov	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	3303      	adds	r3, #3
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	021b      	lsls	r3, r3, #8
 800793c:	b29b      	uxth	r3, r3
 800793e:	4413      	add	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	3304      	adds	r3, #4
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	461a      	mov	r2, r3
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	3305      	adds	r3, #5
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	b29b      	uxth	r3, r3
 8007958:	4413      	add	r3, r2
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	3306      	adds	r3, #6
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	3307      	adds	r3, #7
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	021b      	lsls	r3, r3, #8
 8007970:	b29b      	uxth	r3, r3
 8007972:	4413      	add	r3, r2
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	80da      	strh	r2, [r3, #6]

}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800798e:	2180      	movs	r1, #128	@ 0x80
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc6d 	bl	8008270 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007996:	2100      	movs	r1, #0
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 fc69 	bl	8008270 <USBD_LL_StallEP>
}
 800799e:	bf00      	nop
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079b2:	2300      	movs	r3, #0
 80079b4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d032      	beq.n	8007a22 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f834 	bl	8007a2a <USBD_GetLen>
 80079c2:	4603      	mov	r3, r0
 80079c4:	3301      	adds	r3, #1
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	75fa      	strb	r2, [r7, #23]
 80079d6:	461a      	mov	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4413      	add	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	1c5a      	adds	r2, r3, #1
 80079e6:	75fa      	strb	r2, [r7, #23]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	2203      	movs	r2, #3
 80079f0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079f2:	e012      	b.n	8007a1a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	60fa      	str	r2, [r7, #12]
 80079fa:	7dfa      	ldrb	r2, [r7, #23]
 80079fc:	1c51      	adds	r1, r2, #1
 80079fe:	75f9      	strb	r1, [r7, #23]
 8007a00:	4611      	mov	r1, r2
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	440a      	add	r2, r1
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	75fa      	strb	r2, [r7, #23]
 8007a10:	461a      	mov	r2, r3
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e8      	bne.n	80079f4 <USBD_GetString+0x4e>
    }
  }
}
 8007a22:	bf00      	nop
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007a36:	e005      	b.n	8007a44 <USBD_GetLen+0x1a>
  {
    len++;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	3301      	adds	r3, #1
 8007a42:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1f5      	bne.n	8007a38 <USBD_GetLen+0xe>
  }

  return len;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f000 fc7d 	bl	8008380 <USBD_LL_Transmit>

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fc6b 	bl	8008380 <USBD_LL_Transmit>

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	2100      	movs	r1, #0
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fc70 	bl	80083c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	2100      	movs	r1, #0
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 fc5e 	bl	80083c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fc28 	bl	8008380 <USBD_LL_Transmit>

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2205      	movs	r2, #5
 8007b46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fc38 	bl	80083c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b64:	2200      	movs	r2, #0
 8007b66:	4912      	ldr	r1, [pc, #72]	@ (8007bb0 <MX_USB_DEVICE_Init+0x50>)
 8007b68:	4812      	ldr	r0, [pc, #72]	@ (8007bb4 <MX_USB_DEVICE_Init+0x54>)
 8007b6a:	f7fe ff62 	bl	8006a32 <USBD_Init>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d001      	beq.n	8007b78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b74:	f7f8 fde8 	bl	8000748 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b78:	490f      	ldr	r1, [pc, #60]	@ (8007bb8 <MX_USB_DEVICE_Init+0x58>)
 8007b7a:	480e      	ldr	r0, [pc, #56]	@ (8007bb4 <MX_USB_DEVICE_Init+0x54>)
 8007b7c:	f7fe ff84 	bl	8006a88 <USBD_RegisterClass>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b86:	f7f8 fddf 	bl	8000748 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b8a:	490c      	ldr	r1, [pc, #48]	@ (8007bbc <MX_USB_DEVICE_Init+0x5c>)
 8007b8c:	4809      	ldr	r0, [pc, #36]	@ (8007bb4 <MX_USB_DEVICE_Init+0x54>)
 8007b8e:	f7fe feb5 	bl	80068fc <USBD_CDC_RegisterInterface>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b98:	f7f8 fdd6 	bl	8000748 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b9c:	4805      	ldr	r0, [pc, #20]	@ (8007bb4 <MX_USB_DEVICE_Init+0x54>)
 8007b9e:	f7fe ff8c 	bl	8006aba <USBD_Start>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ba8:	f7f8 fdce 	bl	8000748 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	20000134 	.word	0x20000134
 8007bb4:	20002ca8 	.word	0x20002ca8
 8007bb8:	20000020 	.word	0x20000020
 8007bbc:	20000124 	.word	0x20000124

08007bc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	4905      	ldr	r1, [pc, #20]	@ (8007bdc <CDC_Init_FS+0x1c>)
 8007bc8:	4805      	ldr	r0, [pc, #20]	@ (8007be0 <CDC_Init_FS+0x20>)
 8007bca:	f7fe fead 	bl	8006928 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bce:	4905      	ldr	r1, [pc, #20]	@ (8007be4 <CDC_Init_FS+0x24>)
 8007bd0:	4803      	ldr	r0, [pc, #12]	@ (8007be0 <CDC_Init_FS+0x20>)
 8007bd2:	f7fe fec2 	bl	800695a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	2000336c 	.word	0x2000336c
 8007be0:	20002ca8 	.word	0x20002ca8
 8007be4:	20002f6c 	.word	0x20002f6c

08007be8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bc80      	pop	{r7}
 8007bf4:	4770      	bx	lr
	...

08007bf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	4603      	mov	r3, r0
 8007c00:	6039      	str	r1, [r7, #0]
 8007c02:	71fb      	strb	r3, [r7, #7]
 8007c04:	4613      	mov	r3, r2
 8007c06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  // static uint8_t lineCoding[10];
  switch (cmd)
 8007c08:	79fb      	ldrb	r3, [r7, #7]
 8007c0a:	2b23      	cmp	r3, #35	@ 0x23
 8007c0c:	d85f      	bhi.n	8007cce <CDC_Control_FS+0xd6>
 8007c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c14 <CDC_Control_FS+0x1c>)
 8007c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c14:	08007ccf 	.word	0x08007ccf
 8007c18:	08007ccf 	.word	0x08007ccf
 8007c1c:	08007ccf 	.word	0x08007ccf
 8007c20:	08007ccf 	.word	0x08007ccf
 8007c24:	08007ccf 	.word	0x08007ccf
 8007c28:	08007ccf 	.word	0x08007ccf
 8007c2c:	08007ccf 	.word	0x08007ccf
 8007c30:	08007ccf 	.word	0x08007ccf
 8007c34:	08007ccf 	.word	0x08007ccf
 8007c38:	08007ccf 	.word	0x08007ccf
 8007c3c:	08007ccf 	.word	0x08007ccf
 8007c40:	08007ccf 	.word	0x08007ccf
 8007c44:	08007ccf 	.word	0x08007ccf
 8007c48:	08007ccf 	.word	0x08007ccf
 8007c4c:	08007ccf 	.word	0x08007ccf
 8007c50:	08007ccf 	.word	0x08007ccf
 8007c54:	08007ccf 	.word	0x08007ccf
 8007c58:	08007ccf 	.word	0x08007ccf
 8007c5c:	08007ccf 	.word	0x08007ccf
 8007c60:	08007ccf 	.word	0x08007ccf
 8007c64:	08007ccf 	.word	0x08007ccf
 8007c68:	08007ccf 	.word	0x08007ccf
 8007c6c:	08007ccf 	.word	0x08007ccf
 8007c70:	08007ccf 	.word	0x08007ccf
 8007c74:	08007ccf 	.word	0x08007ccf
 8007c78:	08007ccf 	.word	0x08007ccf
 8007c7c:	08007ccf 	.word	0x08007ccf
 8007c80:	08007ccf 	.word	0x08007ccf
 8007c84:	08007ccf 	.word	0x08007ccf
 8007c88:	08007ccf 	.word	0x08007ccf
 8007c8c:	08007ccf 	.word	0x08007ccf
 8007c90:	08007ccf 	.word	0x08007ccf
 8007c94:	08007ccf 	.word	0x08007ccf
 8007c98:	08007ccf 	.word	0x08007ccf
 8007c9c:	08007ca5 	.word	0x08007ca5
 8007ca0:	08007ccf 	.word	0x08007ccf
  case CDC_GET_LINE_CODING:
    // memcpy(pbuf, lineCoding, length);
    break;

  case CDC_SET_CONTROL_LINE_STATE:
    uint16_t ControlSignalBitmap = ((USBD_SetupReqTypedef *)pbuf)->wValue;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	885b      	ldrh	r3, [r3, #2]
 8007ca8:	81fb      	strh	r3, [r7, #14]
    uint8_t rts = ((ControlSignalBitmap & 0x0002) == 2) ? 1 : 0;
 8007caa:	89fb      	ldrh	r3, [r7, #14]
 8007cac:	105b      	asrs	r3, r3, #1
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	737b      	strb	r3, [r7, #13]
    uint8_t dtr = ((ControlSignalBitmap & 0x0001) == 1) ? 1 : 0;
 8007cb6:	89fb      	ldrh	r3, [r7, #14]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	733b      	strb	r3, [r7, #12]

    uart_setControlLine(rts, dtr);
 8007cc0:	7b3a      	ldrb	r2, [r7, #12]
 8007cc2:	7b7b      	ldrb	r3, [r7, #13]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7f8 fdb2 	bl	8000830 <uart_setControlLine>

    break;
 8007ccc:	e000      	b.n	8007cd0 <CDC_Control_FS+0xd8>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cce:	bf00      	nop
  }

  return (USBD_OK);
 8007cd0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop

08007cdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	uart_cmdRecv(Buf, *Len);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f7f8 fe33 	bl	8000958 <uart_cmdRecv>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	4805      	ldr	r0, [pc, #20]	@ (8007d0c <CDC_Receive_FS+0x30>)
 8007cf6:	f7fe fe30 	bl	800695a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cfa:	4804      	ldr	r0, [pc, #16]	@ (8007d0c <CDC_Receive_FS+0x30>)
 8007cfc:	f7fe fe6f 	bl	80069de <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007d00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20002ca8 	.word	0x20002ca8

08007d10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b084      	sub	sp, #16
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007d20:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <CDC_Transmit_FS+0x48>)
 8007d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e00b      	b.n	8007d4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d36:	887b      	ldrh	r3, [r7, #2]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4806      	ldr	r0, [pc, #24]	@ (8007d58 <CDC_Transmit_FS+0x48>)
 8007d3e:	f7fe fdf3 	bl	8006928 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007d42:	4805      	ldr	r0, [pc, #20]	@ (8007d58 <CDC_Transmit_FS+0x48>)
 8007d44:	f7fe fe1c 	bl	8006980 <USBD_CDC_TransmitPacket>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	20002ca8 	.word	0x20002ca8

08007d5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	4603      	mov	r3, r0
 8007d64:	6039      	str	r1, [r7, #0]
 8007d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	2212      	movs	r2, #18
 8007d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20000150 	.word	0x20000150

08007d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	6039      	str	r1, [r7, #0]
 8007d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2204      	movs	r2, #4
 8007d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d92:	4b03      	ldr	r3, [pc, #12]	@ (8007da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bc80      	pop	{r7}
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	20000164 	.word	0x20000164

08007da4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d105      	bne.n	8007dc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	4907      	ldr	r1, [pc, #28]	@ (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dba:	4808      	ldr	r0, [pc, #32]	@ (8007ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8007dbc:	f7ff fdf3 	bl	80079a6 <USBD_GetString>
 8007dc0:	e004      	b.n	8007dcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	4904      	ldr	r1, [pc, #16]	@ (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007dc6:	4805      	ldr	r0, [pc, #20]	@ (8007ddc <USBD_FS_ProductStrDescriptor+0x38>)
 8007dc8:	f7ff fded 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dcc:	4b02      	ldr	r3, [pc, #8]	@ (8007dd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	2000376c 	.word	0x2000376c
 8007ddc:	08008558 	.word	0x08008558

08007de0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	4603      	mov	r3, r0
 8007de8:	6039      	str	r1, [r7, #0]
 8007dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	4904      	ldr	r1, [pc, #16]	@ (8007e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007df0:	4804      	ldr	r0, [pc, #16]	@ (8007e04 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007df2:	f7ff fdd8 	bl	80079a6 <USBD_GetString>
  return USBD_StrDesc;
 8007df6:	4b02      	ldr	r3, [pc, #8]	@ (8007e00 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	2000376c 	.word	0x2000376c
 8007e04:	08008574 	.word	0x08008574

08007e08 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	6039      	str	r1, [r7, #0]
 8007e12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	221a      	movs	r2, #26
 8007e18:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e1a:	f000 f843 	bl	8007ea4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e1e:	4b02      	ldr	r3, [pc, #8]	@ (8007e28 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3708      	adds	r7, #8
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000168 	.word	0x20000168

08007e2c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	6039      	str	r1, [r7, #0]
 8007e36:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007e38:	79fb      	ldrb	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	4907      	ldr	r1, [pc, #28]	@ (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e42:	4808      	ldr	r0, [pc, #32]	@ (8007e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e44:	f7ff fdaf 	bl	80079a6 <USBD_GetString>
 8007e48:	e004      	b.n	8007e54 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	4904      	ldr	r1, [pc, #16]	@ (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007e4e:	4805      	ldr	r0, [pc, #20]	@ (8007e64 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007e50:	f7ff fda9 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e54:	4b02      	ldr	r3, [pc, #8]	@ (8007e60 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	2000376c 	.word	0x2000376c
 8007e64:	08008584 	.word	0x08008584

08007e68 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4907      	ldr	r1, [pc, #28]	@ (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e7e:	4808      	ldr	r0, [pc, #32]	@ (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e80:	f7ff fd91 	bl	80079a6 <USBD_GetString>
 8007e84:	e004      	b.n	8007e90 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e86:	683a      	ldr	r2, [r7, #0]
 8007e88:	4904      	ldr	r1, [pc, #16]	@ (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e8a:	4805      	ldr	r0, [pc, #20]	@ (8007ea0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e8c:	f7ff fd8b 	bl	80079a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e90:	4b02      	ldr	r3, [pc, #8]	@ (8007e9c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	2000376c 	.word	0x2000376c
 8007ea0:	08008590 	.word	0x08008590

08007ea4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <Get_SerialNum+0x44>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007eec <Get_SerialNum+0x48>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8007ef0 <Get_SerialNum+0x4c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d009      	beq.n	8007ede <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007eca:	2208      	movs	r2, #8
 8007ecc:	4909      	ldr	r1, [pc, #36]	@ (8007ef4 <Get_SerialNum+0x50>)
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 f814 	bl	8007efc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ed4:	2204      	movs	r2, #4
 8007ed6:	4908      	ldr	r1, [pc, #32]	@ (8007ef8 <Get_SerialNum+0x54>)
 8007ed8:	68b8      	ldr	r0, [r7, #8]
 8007eda:	f000 f80f 	bl	8007efc <IntToUnicode>
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	1ffff7e8 	.word	0x1ffff7e8
 8007eec:	1ffff7ec 	.word	0x1ffff7ec
 8007ef0:	1ffff7f0 	.word	0x1ffff7f0
 8007ef4:	2000016a 	.word	0x2000016a
 8007ef8:	2000017a 	.word	0x2000017a

08007efc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b087      	sub	sp, #28
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4613      	mov	r3, r2
 8007f08:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
 8007f12:	e027      	b.n	8007f64 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	0f1b      	lsrs	r3, r3, #28
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d80b      	bhi.n	8007f34 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	0f1b      	lsrs	r3, r3, #28
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	7dfb      	ldrb	r3, [r7, #23]
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4619      	mov	r1, r3
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3230      	adds	r2, #48	@ 0x30
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	e00a      	b.n	8007f4a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0f1b      	lsrs	r3, r3, #28
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	4619      	mov	r1, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	440b      	add	r3, r1
 8007f44:	3237      	adds	r2, #55	@ 0x37
 8007f46:	b2d2      	uxtb	r2, r2
 8007f48:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	011b      	lsls	r3, r3, #4
 8007f4e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	3301      	adds	r3, #1
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4413      	add	r3, r2
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f5e:	7dfb      	ldrb	r3, [r7, #23]
 8007f60:	3301      	adds	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
 8007f64:	7dfa      	ldrb	r2, [r7, #23]
 8007f66:	79fb      	ldrb	r3, [r7, #7]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d3d3      	bcc.n	8007f14 <IntToUnicode+0x18>
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bc80      	pop	{r7}
 8007f76:	4770      	bx	lr

08007f78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a0d      	ldr	r2, [pc, #52]	@ (8007fbc <HAL_PCD_MspInit+0x44>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d113      	bne.n	8007fb2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fc0 <HAL_PCD_MspInit+0x48>)
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fc0 <HAL_PCD_MspInit+0x48>)
 8007f90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007f94:	61d3      	str	r3, [r2, #28]
 8007f96:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc0 <HAL_PCD_MspInit+0x48>)
 8007f98:	69db      	ldr	r3, [r3, #28]
 8007f9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	2014      	movs	r0, #20
 8007fa8:	f7f9 fb13 	bl	80015d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007fac:	2014      	movs	r0, #20
 8007fae:	f7f9 fb2c 	bl	800160a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	40005c00 	.word	0x40005c00
 8007fc0:	40021000 	.word	0x40021000

08007fc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe fdb5 	bl	8006b4a <USBD_LL_SetupStage>
}
 8007fe0:	bf00      	nop
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	6879      	ldr	r1, [r7, #4]
 8007ffe:	4613      	mov	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	440b      	add	r3, r1
 8008008:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	4619      	mov	r1, r3
 8008012:	f7fe fde7 	bl	8006be4 <USBD_LL_DataOutStage>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008030:	78fa      	ldrb	r2, [r7, #3]
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	4613      	mov	r3, r2
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	440b      	add	r3, r1
 800803e:	3324      	adds	r3, #36	@ 0x24
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	4619      	mov	r1, r3
 8008046:	f7fe fe3e 	bl	8006cc6 <USBD_LL_DataInStage>
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008060:	4618      	mov	r0, r3
 8008062:	f7fe ff4e 	bl	8006f02 <USBD_LL_SOF>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008076:	2301      	movs	r3, #1
 8008078:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	799b      	ldrb	r3, [r3, #6]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d001      	beq.n	8008086 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008082:	f7f8 fb61 	bl	8000748 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800808c:	7bfa      	ldrb	r2, [r7, #15]
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7fe fefe 	bl	8006e92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe feb7 	bl	8006e10 <USBD_LL_Reset>
}
 80080a2:	bf00      	nop
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
	...

080080ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fef8 	bl	8006eb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	7a9b      	ldrb	r3, [r3, #10]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d005      	beq.n	80080d4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080c8:	4b04      	ldr	r3, [pc, #16]	@ (80080dc <HAL_PCD_SuspendCallback+0x30>)
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	4a03      	ldr	r2, [pc, #12]	@ (80080dc <HAL_PCD_SuspendCallback+0x30>)
 80080ce:	f043 0306 	orr.w	r3, r3, #6
 80080d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	e000ed00 	.word	0xe000ed00

080080e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fe fef2 	bl	8006ed8 <USBD_LL_Resume>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008104:	4a28      	ldr	r2, [pc, #160]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a26      	ldr	r2, [pc, #152]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008110:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008114:	4b24      	ldr	r3, [pc, #144]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008116:	4a25      	ldr	r2, [pc, #148]	@ (80081ac <USBD_LL_Init+0xb0>)
 8008118:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800811a:	4b23      	ldr	r3, [pc, #140]	@ (80081a8 <USBD_LL_Init+0xac>)
 800811c:	2208      	movs	r2, #8
 800811e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008120:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008122:	2202      	movs	r2, #2
 8008124:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008126:	4b20      	ldr	r3, [pc, #128]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008128:	2200      	movs	r2, #0
 800812a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800812c:	4b1e      	ldr	r3, [pc, #120]	@ (80081a8 <USBD_LL_Init+0xac>)
 800812e:	2200      	movs	r2, #0
 8008130:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008132:	4b1d      	ldr	r3, [pc, #116]	@ (80081a8 <USBD_LL_Init+0xac>)
 8008134:	2200      	movs	r2, #0
 8008136:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008138:	481b      	ldr	r0, [pc, #108]	@ (80081a8 <USBD_LL_Init+0xac>)
 800813a:	f7f9 fc1d 	bl	8001978 <HAL_PCD_Init>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008144:	f7f8 fb00 	bl	8000748 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800814e:	2318      	movs	r3, #24
 8008150:	2200      	movs	r2, #0
 8008152:	2100      	movs	r1, #0
 8008154:	f7fb f92e 	bl	80033b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800815e:	2358      	movs	r3, #88	@ 0x58
 8008160:	2200      	movs	r2, #0
 8008162:	2180      	movs	r1, #128	@ 0x80
 8008164:	f7fb f926 	bl	80033b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800816e:	23c0      	movs	r3, #192	@ 0xc0
 8008170:	2200      	movs	r2, #0
 8008172:	2181      	movs	r1, #129	@ 0x81
 8008174:	f7fb f91e 	bl	80033b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800817e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008182:	2200      	movs	r2, #0
 8008184:	2101      	movs	r1, #1
 8008186:	f7fb f915 	bl	80033b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008190:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008194:	2200      	movs	r2, #0
 8008196:	2182      	movs	r1, #130	@ 0x82
 8008198:	f7fb f90c 	bl	80033b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2000396c 	.word	0x2000396c
 80081ac:	40005c00 	.word	0x40005c00

080081b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f9 fccc 	bl	8001b64 <HAL_PCD_Start>
 80081cc:	4603      	mov	r3, r0
 80081ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 f94e 	bl	8008474 <USBD_Get_USB_Status>
 80081d8:	4603      	mov	r3, r0
 80081da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b084      	sub	sp, #16
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	4608      	mov	r0, r1
 80081f0:	4611      	mov	r1, r2
 80081f2:	461a      	mov	r2, r3
 80081f4:	4603      	mov	r3, r0
 80081f6:	70fb      	strb	r3, [r7, #3]
 80081f8:	460b      	mov	r3, r1
 80081fa:	70bb      	strb	r3, [r7, #2]
 80081fc:	4613      	mov	r3, r2
 80081fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800820e:	78bb      	ldrb	r3, [r7, #2]
 8008210:	883a      	ldrh	r2, [r7, #0]
 8008212:	78f9      	ldrb	r1, [r7, #3]
 8008214:	f7f9 fe20 	bl	8001e58 <HAL_PCD_EP_Open>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800821c:	7bfb      	ldrb	r3, [r7, #15]
 800821e:	4618      	mov	r0, r3
 8008220:	f000 f928 	bl	8008474 <USBD_Get_USB_Status>
 8008224:	4603      	mov	r3, r0
 8008226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008228:	7bbb      	ldrb	r3, [r7, #14]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
 800823a:	460b      	mov	r3, r1
 800823c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	4611      	mov	r1, r2
 8008250:	4618      	mov	r0, r3
 8008252:	f7f9 fe5e 	bl	8001f12 <HAL_PCD_EP_Close>
 8008256:	4603      	mov	r3, r0
 8008258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f909 	bl	8008474 <USBD_Get_USB_Status>
 8008262:	4603      	mov	r3, r0
 8008264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008266:	7bbb      	ldrb	r3, [r7, #14]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	460b      	mov	r3, r1
 800827a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008280:	2300      	movs	r3, #0
 8008282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800828a:	78fa      	ldrb	r2, [r7, #3]
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f7f9 ff06 	bl	80020a0 <HAL_PCD_EP_SetStall>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f8ea 	bl	8008474 <USBD_Get_USB_Status>
 80082a0:	4603      	mov	r3, r0
 80082a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	460b      	mov	r3, r1
 80082b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7f9 ff47 	bl	8002160 <HAL_PCD_EP_ClrStall>
 80082d2:	4603      	mov	r3, r0
 80082d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 f8cb 	bl	8008474 <USBD_Get_USB_Status>
 80082de:	4603      	mov	r3, r0
 80082e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	460b      	mov	r3, r1
 80082f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80082fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008304:	2b00      	cmp	r3, #0
 8008306:	da0b      	bge.n	8008320 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008308:	78fb      	ldrb	r3, [r7, #3]
 800830a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800830e:	68f9      	ldr	r1, [r7, #12]
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	440b      	add	r3, r1
 800831a:	3312      	adds	r3, #18
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	e00b      	b.n	8008338 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008320:	78fb      	ldrb	r3, [r7, #3]
 8008322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008326:	68f9      	ldr	r1, [r7, #12]
 8008328:	4613      	mov	r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	00db      	lsls	r3, r3, #3
 8008330:	440b      	add	r3, r1
 8008332:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008336:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	bc80      	pop	{r7}
 8008340:	4770      	bx	lr

08008342 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
 800834a:	460b      	mov	r3, r1
 800834c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	4611      	mov	r1, r2
 8008360:	4618      	mov	r0, r3
 8008362:	f7f9 fd55 	bl	8001e10 <HAL_PCD_SetAddress>
 8008366:	4603      	mov	r3, r0
 8008368:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 f881 	bl	8008474 <USBD_Get_USB_Status>
 8008372:	4603      	mov	r3, r0
 8008374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008376:	7bbb      	ldrb	r3, [r7, #14]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	461a      	mov	r2, r3
 800838c:	460b      	mov	r3, r1
 800838e:	72fb      	strb	r3, [r7, #11]
 8008390:	4613      	mov	r3, r2
 8008392:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083a2:	893b      	ldrh	r3, [r7, #8]
 80083a4:	7af9      	ldrb	r1, [r7, #11]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	f7f9 fe43 	bl	8002032 <HAL_PCD_EP_Transmit>
 80083ac:	4603      	mov	r3, r0
 80083ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f85e 	bl	8008474 <USBD_Get_USB_Status>
 80083b8:	4603      	mov	r3, r0
 80083ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b086      	sub	sp, #24
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	607a      	str	r2, [r7, #4]
 80083d0:	461a      	mov	r2, r3
 80083d2:	460b      	mov	r3, r1
 80083d4:	72fb      	strb	r3, [r7, #11]
 80083d6:	4613      	mov	r3, r2
 80083d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083e8:	893b      	ldrh	r3, [r7, #8]
 80083ea:	7af9      	ldrb	r1, [r7, #11]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f7f9 fdd8 	bl	8001fa2 <HAL_PCD_EP_Receive>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 f83b 	bl	8008474 <USBD_Get_USB_Status>
 80083fe:	4603      	mov	r3, r0
 8008400:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008402:	7dbb      	ldrb	r3, [r7, #22]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	460b      	mov	r3, r1
 8008416:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800841e:	78fa      	ldrb	r2, [r7, #3]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7f9 fdee 	bl	8002004 <HAL_PCD_EP_GetRxCount>
 8008428:	4603      	mov	r3, r0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800843c:	4b02      	ldr	r3, [pc, #8]	@ (8008448 <USBD_static_malloc+0x14>)
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr
 8008448:	20003c44 	.word	0x20003c44

0800844c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]

}
 8008454:	bf00      	nop
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr

0800845e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	460b      	mov	r3, r1
 8008468:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr

08008474 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d817      	bhi.n	80084b8 <USBD_Get_USB_Status+0x44>
 8008488:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <USBD_Get_USB_Status+0x1c>)
 800848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848e:	bf00      	nop
 8008490:	080084a1 	.word	0x080084a1
 8008494:	080084a7 	.word	0x080084a7
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084b3 	.word	0x080084b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
    break;
 80084a4:	e00b      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084a6:	2302      	movs	r3, #2
 80084a8:	73fb      	strb	r3, [r7, #15]
    break;
 80084aa:	e008      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
    break;
 80084b0:	e005      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084b2:	2302      	movs	r3, #2
 80084b4:	73fb      	strb	r3, [r7, #15]
    break;
 80084b6:	e002      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084b8:	2302      	movs	r3, #2
 80084ba:	73fb      	strb	r3, [r7, #15]
    break;
 80084bc:	bf00      	nop
  }
  return usb_status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop

080084cc <memset>:
 80084cc:	4603      	mov	r3, r0
 80084ce:	4402      	add	r2, r0
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d100      	bne.n	80084d6 <memset+0xa>
 80084d4:	4770      	bx	lr
 80084d6:	f803 1b01 	strb.w	r1, [r3], #1
 80084da:	e7f9      	b.n	80084d0 <memset+0x4>

080084dc <__libc_init_array>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	2600      	movs	r6, #0
 80084e0:	4d0c      	ldr	r5, [pc, #48]	@ (8008514 <__libc_init_array+0x38>)
 80084e2:	4c0d      	ldr	r4, [pc, #52]	@ (8008518 <__libc_init_array+0x3c>)
 80084e4:	1b64      	subs	r4, r4, r5
 80084e6:	10a4      	asrs	r4, r4, #2
 80084e8:	42a6      	cmp	r6, r4
 80084ea:	d109      	bne.n	8008500 <__libc_init_array+0x24>
 80084ec:	f000 f828 	bl	8008540 <_init>
 80084f0:	2600      	movs	r6, #0
 80084f2:	4d0a      	ldr	r5, [pc, #40]	@ (800851c <__libc_init_array+0x40>)
 80084f4:	4c0a      	ldr	r4, [pc, #40]	@ (8008520 <__libc_init_array+0x44>)
 80084f6:	1b64      	subs	r4, r4, r5
 80084f8:	10a4      	asrs	r4, r4, #2
 80084fa:	42a6      	cmp	r6, r4
 80084fc:	d105      	bne.n	800850a <__libc_init_array+0x2e>
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	f855 3b04 	ldr.w	r3, [r5], #4
 8008504:	4798      	blx	r3
 8008506:	3601      	adds	r6, #1
 8008508:	e7ee      	b.n	80084e8 <__libc_init_array+0xc>
 800850a:	f855 3b04 	ldr.w	r3, [r5], #4
 800850e:	4798      	blx	r3
 8008510:	3601      	adds	r6, #1
 8008512:	e7f2      	b.n	80084fa <__libc_init_array+0x1e>
 8008514:	080085c4 	.word	0x080085c4
 8008518:	080085c4 	.word	0x080085c4
 800851c:	080085c4 	.word	0x080085c4
 8008520:	080085c8 	.word	0x080085c8

08008524 <memcpy>:
 8008524:	440a      	add	r2, r1
 8008526:	4291      	cmp	r1, r2
 8008528:	f100 33ff 	add.w	r3, r0, #4294967295
 800852c:	d100      	bne.n	8008530 <memcpy+0xc>
 800852e:	4770      	bx	lr
 8008530:	b510      	push	{r4, lr}
 8008532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008536:	4291      	cmp	r1, r2
 8008538:	f803 4f01 	strb.w	r4, [r3, #1]!
 800853c:	d1f9      	bne.n	8008532 <memcpy+0xe>
 800853e:	bd10      	pop	{r4, pc}

08008540 <_init>:
 8008540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008542:	bf00      	nop
 8008544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008546:	bc08      	pop	{r3}
 8008548:	469e      	mov	lr, r3
 800854a:	4770      	bx	lr

0800854c <_fini>:
 800854c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854e:	bf00      	nop
 8008550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008552:	bc08      	pop	{r3}
 8008554:	469e      	mov	lr, r3
 8008556:	4770      	bx	lr
