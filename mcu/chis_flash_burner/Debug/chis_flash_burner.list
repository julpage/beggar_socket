
chis_flash_burner.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080087f4  080087f4  000097f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008860  08008860  0000a184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008860  08008860  0000a184  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008860  08008860  0000a184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008860  08008860  00009860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008864  08008864  00009864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08008868  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ce0  20000184  080089ec  0000a184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003e64  080089ec  0000ae64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d35a  00000000  00000000  0000a1ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db5  00000000  00000000  00017507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0001a2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a3  00000000  00000000  0001ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019928  00000000  00000000  0001b72b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe66  00000000  00000000  00035053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085000  00000000  00000000  00044eb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9eb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  000c9efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ccc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	080087dc 	.word	0x080087dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	080087dc 	.word	0x080087dc

0800014c <cart_setDirection_ad>:

#include "main.h"
#include "cart_adapter.h"

void cart_setDirection_ad(uint8_t dir)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    if (dir == 0)
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d10c      	bne.n	8000176 <cart_setDirection_ad+0x2a>
    {
        GPIOB->CRH = 0x88888888; // 8-15 上下拉输入
 800015c:	4b0c      	ldr	r3, [pc, #48]	@ (8000190 <cart_setDirection_ad+0x44>)
 800015e:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 8000162:	605a      	str	r2, [r3, #4]
        GPIOB->CRL = 0x88888888; // 7-0  上下拉输入
 8000164:	4b0a      	ldr	r3, [pc, #40]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000166:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 800016a:	601a      	str	r2, [r3, #0]
        GPIOB->ODR = 0x0000ffff; // 15-0 上拉
 800016c:	4b08      	ldr	r3, [pc, #32]	@ (8000190 <cart_setDirection_ad+0x44>)
 800016e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000172:	60da      	str	r2, [r3, #12]
    else
    {
        GPIOB->CRH = 0x33333333; // 8-15 推挽输出, 50mhz
        GPIOB->CRL = 0x33333333; // 7-0  推挽输出, 50mhz
    }
}
 8000174:	e007      	b.n	8000186 <cart_setDirection_ad+0x3a>
        GPIOB->CRH = 0x33333333; // 8-15 推挽输出, 50mhz
 8000176:	4b06      	ldr	r3, [pc, #24]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000178:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800017c:	605a      	str	r2, [r3, #4]
        GPIOB->CRL = 0x33333333; // 7-0  推挽输出, 50mhz
 800017e:	4b04      	ldr	r3, [pc, #16]	@ (8000190 <cart_setDirection_ad+0x44>)
 8000180:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8000184:	601a      	str	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	370c      	adds	r7, #12
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	40010c00 	.word	0x40010c00

08000194 <cart_setDirection_a>:

void cart_setDirection_a(uint8_t dir)
{
 8000194:	b480      	push	{r7}
 8000196:	b083      	sub	sp, #12
 8000198:	af00      	add	r7, sp, #0
 800019a:	4603      	mov	r3, r0
 800019c:	71fb      	strb	r3, [r7, #7]
    if (dir == 0)
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d107      	bne.n	80001b4 <cart_setDirection_a+0x20>
    {
        GPIOA->CRL = 0x88888888;  // 7-0 上下拉输入
 80001a4:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001a6:	f04f 3288 	mov.w	r2, #2290649224	@ 0x88888888
 80001aa:	601a      	str	r2, [r3, #0]
        GPIOA->BSRR = 0x000000ff; // 7-0 上拉
 80001ac:	4b06      	ldr	r3, [pc, #24]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001ae:	22ff      	movs	r2, #255	@ 0xff
 80001b0:	611a      	str	r2, [r3, #16]
    }
    else
    {
        GPIOA->CRL = 0x33333333; // 7-0 推挽输出, 50mhz
    }
}
 80001b2:	e003      	b.n	80001bc <cart_setDirection_a+0x28>
        GPIOA->CRL = 0x33333333; // 7-0 推挽输出, 50mhz
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <cart_setDirection_a+0x34>)
 80001b6:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80001ba:	601a      	str	r2, [r3, #0]
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	40010800 	.word	0x40010800

080001cc <cart_readBus_ad>:

uint16_t cart_readBus_ad()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
    return (GPIOB->IDR) & 0x0000ffff;
 80001d0:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <cart_readBus_ad+0x14>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	b29b      	uxth	r3, r3
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40010c00 	.word	0x40010c00

080001e4 <cart_readBus_a>:

uint8_t cart_readBus_a()
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    return (GPIOA->IDR) & 0x000000ff;
 80001e8:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <cart_readBus_a+0x14>)
 80001ea:	689b      	ldr	r3, [r3, #8]
 80001ec:	b2db      	uxtb	r3, r3
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800

080001fc <cart_writeBus_ad>:

void cart_writeBus_ad(uint16_t value)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	80fb      	strh	r3, [r7, #6]
    GPIOB->ODR = value;
 8000206:	4a04      	ldr	r2, [pc, #16]	@ (8000218 <cart_writeBus_ad+0x1c>)
 8000208:	88fb      	ldrh	r3, [r7, #6]
 800020a:	60d3      	str	r3, [r2, #12]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40010c00 	.word	0x40010c00

0800021c <cart_writeBus_a>:

void cart_writeBus_a(uint8_t value)
{
 800021c:	b480      	push	{r7}
 800021e:	b085      	sub	sp, #20
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
    uint32_t _ = GPIOA->ODR;
 8000226:	4b07      	ldr	r3, [pc, #28]	@ (8000244 <cart_writeBus_a+0x28>)
 8000228:	68db      	ldr	r3, [r3, #12]
 800022a:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = (_ & 0xffffff00) | value;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8000232:	79fb      	ldrb	r3, [r7, #7]
 8000234:	4903      	ldr	r1, [pc, #12]	@ (8000244 <cart_writeBus_a+0x28>)
 8000236:	4313      	orrs	r3, r2
 8000238:	60cb      	str	r3, [r1, #12]
}
 800023a:	bf00      	nop
 800023c:	3714      	adds	r7, #20
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40010800 	.word	0x40010800

08000248 <cart_romRead>:

void cart_romRead(uint32_t addr, uint16_t *buf, uint16_t len)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b086      	sub	sp, #24
 800024c:	af00      	add	r7, sp, #0
 800024e:	60f8      	str	r0, [r7, #12]
 8000250:	60b9      	str	r1, [r7, #8]
 8000252:	4613      	mov	r3, r2
 8000254:	80fb      	strh	r3, [r7, #6]
    // latch base address
    cart_setDirection_a(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f7ff ff9c 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f7ff ff75 	bl	800014c <cart_setDirection_ad>

    cart_writeBus_a((addr & 0x00ff0000) >> 16);
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	0c1b      	lsrs	r3, r3, #16
 8000266:	b2db      	uxtb	r3, r3
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ffd7 	bl	800021c <cart_writeBus_a>
    cart_writeBus_ad((addr & 0x0000ffff));
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	b29b      	uxth	r3, r3
 8000272:	4618      	mov	r0, r3
 8000274:	f7ff ffc2 	bl	80001fc <cart_writeBus_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000278:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <cart_romRead+0x8c>)
 800027a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800027e:	611a      	str	r2, [r3, #16]

    // read bus
    cart_setDirection_ad(0);
 8000280:	2000      	movs	r0, #0
 8000282:	f7ff ff63 	bl	800014c <cart_setDirection_ad>
    for (int i = 0; i < len; i++)
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e013      	b.n	80002b4 <cart_romRead+0x6c>
    {
        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <cart_romRead+0x8c>)
 800028e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000292:	611a      	str	r2, [r3, #16]

        // tOE >25ns, tACC >110ns
        *buf = cart_readBus_ad();
 8000294:	f7ff ff9a 	bl	80001cc <cart_readBus_ad>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	801a      	strh	r2, [r3, #0]
        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <cart_romRead+0x8c>)
 80002a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002a6:	611a      	str	r2, [r3, #16]

        buf++;
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	3302      	adds	r3, #2
 80002ac:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < len; i++)
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	3301      	adds	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
 80002b4:	88fb      	ldrh	r3, [r7, #6]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	429a      	cmp	r2, r3
 80002ba:	dbe7      	blt.n	800028c <cart_romRead+0x44>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin; // cs1=1 126ns
 80002bc:	4b05      	ldr	r3, [pc, #20]	@ (80002d4 <cart_romRead+0x8c>)
 80002be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002c2:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 80002c4:	2000      	movs	r0, #0
 80002c6:	f7ff ff65 	bl	8000194 <cart_setDirection_a>
}
 80002ca:	bf00      	nop
 80002cc:	3718      	adds	r7, #24
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800

080002d8 <cart_romWrite>:

void cart_romWrite(uint32_t addr, uint16_t *buf, uint16_t len)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
 80002de:	60f8      	str	r0, [r7, #12]
 80002e0:	60b9      	str	r1, [r7, #8]
 80002e2:	4613      	mov	r3, r2
 80002e4:	80fb      	strh	r3, [r7, #6]
    // latch base address
    cart_setDirection_a(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f7ff ff54 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ff2d 	bl	800014c <cart_setDirection_ad>

    cart_writeBus_a((addr & 0x00ff0000) >> 16);
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	0c1b      	lsrs	r3, r3, #16
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff8f 	bl	800021c <cart_writeBus_a>
    cart_writeBus_ad((addr & 0x0000ffff));
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	b29b      	uxth	r3, r3
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff7a 	bl	80001fc <cart_writeBus_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000308:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <cart_romWrite+0x88>)
 800030a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800030e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	e012      	b.n	800033c <cart_romWrite+0x64>
    {
        cart_writeBus_ad(*buf);
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	881b      	ldrh	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f7ff ff6e 	bl	80001fc <cart_writeBus_ad>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000320:	4b0f      	ldr	r3, [pc, #60]	@ (8000360 <cart_romWrite+0x88>)
 8000322:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000326:	611a      	str	r2, [r3, #16]
        // data setup 30ns, we low 25ns, address hold 45ns
        wr_GPIO_Port->BSRR = wr_Pin;
 8000328:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <cart_romWrite+0x88>)
 800032a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800032e:	611a      	str	r2, [r3, #16]

        buf++;
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	3302      	adds	r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < len; i++)
 8000336:	697b      	ldr	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	617b      	str	r3, [r7, #20]
 800033c:	88fb      	ldrh	r3, [r7, #6]
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	429a      	cmp	r2, r3
 8000342:	dbe8      	blt.n	8000316 <cart_romWrite+0x3e>
    }

    // release bus
    cs1_GPIO_Port->BSRR = cs1_Pin;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <cart_romWrite+0x88>)
 8000346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800034a:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff21 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000352:	2000      	movs	r0, #0
 8000354:	f7ff fefa 	bl	800014c <cart_setDirection_ad>
}
 8000358:	bf00      	nop
 800035a:	3718      	adds	r7, #24
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40010800 	.word	0x40010800

08000364 <cart_ramRead>:

void cart_ramRead(uint16_t addr, uint8_t *buf, uint16_t len)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	6039      	str	r1, [r7, #0]
 800036e:	80fb      	strh	r3, [r7, #6]
 8000370:	4613      	mov	r3, r2
 8000372:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(0);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ff0d 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800037a:	2001      	movs	r0, #1
 800037c:	f7ff fee6 	bl	800014c <cart_setDirection_ad>

    cs2_GPIO_Port->BSRR = cs2_Pin << 16; // cs2=0 126ns
 8000380:	4b18      	ldr	r3, [pc, #96]	@ (80003e4 <cart_ramRead+0x80>)
 8000382:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000386:	611a      	str	r2, [r3, #16]

    // read bus
    for (int i = 0; i < len; i++)
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	e01a      	b.n	80003c4 <cart_ramRead+0x60>
    {
        cart_writeBus_ad(addr);
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff33 	bl	80001fc <cart_writeBus_ad>

        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 8000396:	4b14      	ldr	r3, [pc, #80]	@ (80003e8 <cart_ramRead+0x84>)
 8000398:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800039c:	611a      	str	r2, [r3, #16]

        // address to dq 105ns, oe to dq 25ns
        *buf = cart_readBus_a();
 800039e:	f7ff ff21 	bl	80001e4 <cart_readBus_a>
 80003a2:	4603      	mov	r3, r0
 80003a4:	461a      	mov	r2, r3
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	701a      	strb	r2, [r3, #0]

        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <cart_ramRead+0x84>)
 80003ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003b0:	611a      	str	r2, [r3, #16]

        addr++;
 80003b2:	88fb      	ldrh	r3, [r7, #6]
 80003b4:	3301      	adds	r3, #1
 80003b6:	80fb      	strh	r3, [r7, #6]
        buf++;
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	3301      	adds	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	88bb      	ldrh	r3, [r7, #4]
 80003c6:	68fa      	ldr	r2, [r7, #12]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	dbe0      	blt.n	800038e <cart_ramRead+0x2a>
    }

    // release bus
    cs2_GPIO_Port->BSRR = cs2_Pin; // cs2=1 126ns
 80003cc:	4b05      	ldr	r3, [pc, #20]	@ (80003e4 <cart_ramRead+0x80>)
 80003ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003d2:	611a      	str	r2, [r3, #16]
    cart_setDirection_ad(0);
 80003d4:	2000      	movs	r0, #0
 80003d6:	f7ff feb9 	bl	800014c <cart_setDirection_ad>
}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010800 	.word	0x40010800

080003ec <cart_ramWrite>:

void cart_ramWrite(uint16_t addr, uint8_t *buf, uint16_t len)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	80fb      	strh	r3, [r7, #6]
 80003f8:	4613      	mov	r3, r2
 80003fa:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(1);
 80003fc:	2001      	movs	r0, #1
 80003fe:	f7ff fec9 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff fea2 	bl	800014c <cart_setDirection_ad>

    cs2_GPIO_Port->BSRR = cs2_Pin << 16; // cs2=0 126ns
 8000408:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <cart_ramWrite+0x84>)
 800040a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800040e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000410:	2300      	movs	r3, #0
 8000412:	60fb      	str	r3, [r7, #12]
 8000414:	e019      	b.n	800044a <cart_ramWrite+0x5e>
    {
        cart_writeBus_ad(addr);
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	4618      	mov	r0, r3
 800041a:	f7ff feef 	bl	80001fc <cart_writeBus_ad>
        cart_writeBus_a(*buf);
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	4618      	mov	r0, r3
 8000424:	f7ff fefa 	bl	800021c <cart_writeBus_a>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <cart_ramWrite+0x88>)
 800042a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800042e:	611a      	str	r2, [r3, #16]
        //  address hold 70ns, data setup 20ns, write cycle 105ns
        wr_GPIO_Port->BSRR = wr_Pin;
 8000430:	4b10      	ldr	r3, [pc, #64]	@ (8000474 <cart_ramWrite+0x88>)
 8000432:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000436:	611a      	str	r2, [r3, #16]

        addr++;
 8000438:	88fb      	ldrh	r3, [r7, #6]
 800043a:	3301      	adds	r3, #1
 800043c:	80fb      	strh	r3, [r7, #6]
        buf++;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	88bb      	ldrh	r3, [r7, #4]
 800044c:	68fa      	ldr	r2, [r7, #12]
 800044e:	429a      	cmp	r2, r3
 8000450:	dbe1      	blt.n	8000416 <cart_ramWrite+0x2a>
    }

    // release bus
    cs2_GPIO_Port->BSRR = cs2_Pin;
 8000452:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <cart_ramWrite+0x84>)
 8000454:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000458:	611a      	str	r2, [r3, #16]
    cart_setDirection_a(0);
 800045a:	2000      	movs	r0, #0
 800045c:	f7ff fe9a 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000460:	2000      	movs	r0, #0
 8000462:	f7ff fe73 	bl	800014c <cart_setDirection_ad>
}
 8000466:	bf00      	nop
 8000468:	3710      	adds	r7, #16
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	40011000 	.word	0x40011000
 8000474:	40010800 	.word	0x40010800

08000478 <cart_gbcRead>:
//
// for gb/gbc
//

void cart_gbcRead(uint16_t addr, uint8_t *buf, uint16_t len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	80fb      	strh	r3, [r7, #6]
 8000484:	4613      	mov	r3, r2
 8000486:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(0);
 8000488:	2000      	movs	r0, #0
 800048a:	f7ff fe83 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 800048e:	2001      	movs	r0, #1
 8000490:	f7ff fe5c 	bl	800014c <cart_setDirection_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16; // cs1=0 126ns
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <cart_gbcRead+0x80>)
 8000496:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800049a:	611a      	str	r2, [r3, #16]

    // read bus
    for (int i = 0; i < len; i++)
 800049c:	2300      	movs	r3, #0
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	e01a      	b.n	80004d8 <cart_gbcRead+0x60>
    {
        cart_writeBus_ad(addr);
 80004a2:	88fb      	ldrh	r3, [r7, #6]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff fea9 	bl	80001fc <cart_writeBus_ad>

        rd_GPIO_Port->BSRR = rd_Pin << 16; // rd=0 126ns
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <cart_gbcRead+0x80>)
 80004ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80004b0:	611a      	str	r2, [r3, #16]

        // address to dq 105ns, oe to dq 25ns
        *buf = cart_readBus_a();
 80004b2:	f7ff fe97 	bl	80001e4 <cart_readBus_a>
 80004b6:	4603      	mov	r3, r0
 80004b8:	461a      	mov	r2, r3
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	701a      	strb	r2, [r3, #0]

        rd_GPIO_Port->BSRR = rd_Pin; // rd=1 126ns
 80004be:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <cart_gbcRead+0x80>)
 80004c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004c4:	611a      	str	r2, [r3, #16]

        addr++;
 80004c6:	88fb      	ldrh	r3, [r7, #6]
 80004c8:	3301      	adds	r3, #1
 80004ca:	80fb      	strh	r3, [r7, #6]
        buf++;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	88bb      	ldrh	r3, [r7, #4]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbe0      	blt.n	80004a2 <cart_gbcRead+0x2a>
    }

    cs1_GPIO_Port->BSRR = cs1_Pin; // cs1=1 126ns
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <cart_gbcRead+0x80>)
 80004e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004e6:	611a      	str	r2, [r3, #16]

    cart_setDirection_ad(0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff fe2f 	bl	800014c <cart_setDirection_ad>
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40010800 	.word	0x40010800

080004fc <cart_gbcWrite>:

void cart_gbcWrite(uint16_t addr, uint8_t *buf, uint16_t len)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	6039      	str	r1, [r7, #0]
 8000506:	80fb      	strh	r3, [r7, #6]
 8000508:	4613      	mov	r3, r2
 800050a:	80bb      	strh	r3, [r7, #4]
    cart_setDirection_a(1);
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff fe41 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f7ff fe1a 	bl	800014c <cart_setDirection_ad>

    cs1_GPIO_Port->BSRR = cs1_Pin << 16;
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <cart_gbcWrite+0x84>)
 800051a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800051e:	611a      	str	r2, [r3, #16]

    // write bus
    for (int i = 0; i < len; i++)
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	e019      	b.n	800055a <cart_gbcWrite+0x5e>
    {
        cart_writeBus_ad(addr);
 8000526:	88fb      	ldrh	r3, [r7, #6]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff fe67 	bl	80001fc <cart_writeBus_ad>
        cart_writeBus_a(*buf);
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe72 	bl	800021c <cart_writeBus_a>

        wr_GPIO_Port->BSRR = wr_Pin << 16;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <cart_gbcWrite+0x84>)
 800053a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800053e:	611a      	str	r2, [r3, #16]
        wr_GPIO_Port->BSRR = wr_Pin;
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <cart_gbcWrite+0x84>)
 8000542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000546:	611a      	str	r2, [r3, #16]

        addr++;
 8000548:	88fb      	ldrh	r3, [r7, #6]
 800054a:	3301      	adds	r3, #1
 800054c:	80fb      	strh	r3, [r7, #6]
        buf++;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < len; i++)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	88bb      	ldrh	r3, [r7, #4]
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbe1      	blt.n	8000526 <cart_gbcWrite+0x2a>
    }

    cs1_GPIO_Port->BSRR = cs1_Pin;
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <cart_gbcWrite+0x84>)
 8000564:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000568:	611a      	str	r2, [r3, #16]

    cart_setDirection_a(0);
 800056a:	2000      	movs	r0, #0
 800056c:	f7ff fe12 	bl	8000194 <cart_setDirection_a>
    cart_setDirection_ad(0);
 8000570:	2000      	movs	r0, #0
 8000572:	f7ff fdeb 	bl	800014c <cart_setDirection_ad>
}
 8000576:	bf00      	nop
 8000578:	3710      	adds	r7, #16
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40010800 	.word	0x40010800

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 f836 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f807 	bl	800059e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f860 	bl	8000654 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000594:	f007 fc32 	bl	8007dfc <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    uart_cmdHandler();
 8000598:	f000 fa38 	bl	8000a0c <uart_cmdHandler>
 800059c:	e7fc      	b.n	8000598 <main+0x14>

0800059e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059e:	b580      	push	{r7, lr}
 80005a0:	b094      	sub	sp, #80	@ 0x50
 80005a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005a8:	2228      	movs	r2, #40	@ 0x28
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f008 f8db 	bl	8008768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ce:	2301      	movs	r3, #1
 80005d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f86b 	bl	80036d0 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000600:	f000 f8b2 	bl	8000768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000614:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f003 fad7 	bl	8003bd4 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800062c:	f000 f89c 	bl	8000768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000630:	2310      	movs	r3, #16
 8000632:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f003 fc26 	bl	8003e8c <HAL_RCCEx_PeriphCLKConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000646:	f000 f88f 	bl	8000768 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	4b3b      	ldr	r3, [pc, #236]	@ (8000758 <MX_GPIO_Init+0x104>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4a3a      	ldr	r2, [pc, #232]	@ (8000758 <MX_GPIO_Init+0x104>)
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b38      	ldr	r3, [pc, #224]	@ (8000758 <MX_GPIO_Init+0x104>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f003 0310 	and.w	r3, r3, #16
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000680:	4b35      	ldr	r3, [pc, #212]	@ (8000758 <MX_GPIO_Init+0x104>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a34      	ldr	r2, [pc, #208]	@ (8000758 <MX_GPIO_Init+0x104>)
 8000686:	f043 0320 	orr.w	r3, r3, #32
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b32      	ldr	r3, [pc, #200]	@ (8000758 <MX_GPIO_Init+0x104>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0320 	and.w	r3, r3, #32
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b2f      	ldr	r3, [pc, #188]	@ (8000758 <MX_GPIO_Init+0x104>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a2e      	ldr	r2, [pc, #184]	@ (8000758 <MX_GPIO_Init+0x104>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000758 <MX_GPIO_Init+0x104>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b29      	ldr	r3, [pc, #164]	@ (8000758 <MX_GPIO_Init+0x104>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a28      	ldr	r2, [pc, #160]	@ (8000758 <MX_GPIO_Init+0x104>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <MX_GPIO_Init+0x104>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, cs2_Pin|led_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80006ce:	4823      	ldr	r0, [pc, #140]	@ (800075c <MX_GPIO_Init+0x108>)
 80006d0:	f001 fa86 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, cs1_Pin|rd_Pin|wr_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 80006da:	4821      	ldr	r0, [pc, #132]	@ (8000760 <MX_GPIO_Init+0x10c>)
 80006dc:	f001 fa80 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : cs2_Pin led_Pin */
  GPIO_InitStruct.Pin = cs2_Pin|led_Pin;
 80006e0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80006e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e6:	2301      	movs	r3, #1
 80006e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 0310 	add.w	r3, r7, #16
 80006f6:	4619      	mov	r1, r3
 80006f8:	4818      	ldr	r0, [pc, #96]	@ (800075c <MX_GPIO_Init+0x108>)
 80006fa:	f001 f8ed 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : a16_Pin a17_Pin a18_Pin a19_Pin
                           a20_Pin a21_Pin a22_Pin a23_Pin */
  GPIO_InitStruct.Pin = a16_Pin|a17_Pin|a18_Pin|a19_Pin
 80006fe:	23ff      	movs	r3, #255	@ 0xff
 8000700:	613b      	str	r3, [r7, #16]
                          |a20_Pin|a21_Pin|a22_Pin|a23_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <MX_GPIO_Init+0x10c>)
 8000712:	f001 f8e1 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ad0_Pin ad1_Pin ad2_Pin ad10_Pin
                           ad11_Pin ad12_Pin ad13_Pin ad14_Pin
                           ad15_Pin ad3_Pin ad4_Pin ad5_Pin
                           ad6_Pin ad7_Pin ad8_Pin ad9_Pin */
  GPIO_InitStruct.Pin = ad0_Pin|ad1_Pin|ad2_Pin|ad10_Pin
 8000716:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800071a:	613b      	str	r3, [r7, #16]
                          |ad11_Pin|ad12_Pin|ad13_Pin|ad14_Pin
                          |ad15_Pin|ad3_Pin|ad4_Pin|ad5_Pin
                          |ad6_Pin|ad7_Pin|ad8_Pin|ad9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	2301      	movs	r3, #1
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	@ (8000764 <MX_GPIO_Init+0x110>)
 800072c:	f001 f8d4 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : cs1_Pin rd_Pin wr_Pin */
  GPIO_InitStruct.Pin = cs1_Pin|rd_Pin|wr_Pin;
 8000730:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	f107 0310 	add.w	r3, r7, #16
 8000746:	4619      	mov	r1, r3
 8000748:	4805      	ldr	r0, [pc, #20]	@ (8000760 <MX_GPIO_Init+0x10c>)
 800074a:	f001 f8c5 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800074e:	bf00      	nop
 8000750:	3720      	adds	r7, #32
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000
 8000760:	40010800 	.word	0x40010800
 8000764:	40010c00 	.word	0x40010c00

08000768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800076c:	b672      	cpsid	i
}
 800076e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <Error_Handler+0x8>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_MspInit+0x5c>)
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	4a14      	ldr	r2, [pc, #80]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6193      	str	r3, [r2, #24]
 8000786:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <HAL_MspInit+0x5c>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x60>)
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_MspInit+0x60>)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010000 	.word	0x40010000

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <HardFault_Handler+0x4>

080007e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <MemManage_Handler+0x4>

080007f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <BusFault_Handler+0x4>

080007f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <UsageFault_Handler+0x4>

08000800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000828:	f000 ff2c 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000836:	f001 fb07 	bl	8001e48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000396c 	.word	0x2000396c

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <uart_setControlLine>:

    return crc;
}

void uart_setControlLine(uint8_t rts, uint8_t dtr)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	460a      	mov	r2, r1
 800085a:	71fb      	strb	r3, [r7, #7]
 800085c:	4613      	mov	r3, r2
 800085e:	71bb      	strb	r3, [r7, #6]
    static uint8_t currentRts = 0;
    static uint8_t currentDtr = 0;

    if (((currentRts == 0) && (rts != 0)) ||
 8000860:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <uart_setControlLine+0x54>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <uart_setControlLine+0x1e>
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d106      	bne.n	800087c <uart_setControlLine+0x2c>
        ((currentDtr == 0) && (dtr != 0)))
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <uart_setControlLine+0x58>)
 8000870:	781b      	ldrb	r3, [r3, #0]
    if (((currentRts == 0) && (rts != 0)) ||
 8000872:	2b00      	cmp	r3, #0
 8000874:	d10b      	bne.n	800088e <uart_setControlLine+0x3e>
        ((currentDtr == 0) && (dtr != 0)))
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <uart_setControlLine+0x3e>
    {
        cmdBuf_p = 0;
 800087c:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <uart_setControlLine+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
        memset(cmdBuf, 0, sizeof(cmdBuf));
 8000882:	f241 527c 	movw	r2, #5500	@ 0x157c
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <uart_setControlLine+0x60>)
 800088a:	f007 ff6d 	bl	8008768 <memset>
    }

    currentRts = rts;
 800088e:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <uart_setControlLine+0x54>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	7013      	strb	r3, [r2, #0]
    currentDtr = dtr;
 8000894:	4a04      	ldr	r2, [pc, #16]	@ (80008a8 <uart_setControlLine+0x58>)
 8000896:	79bb      	ldrb	r3, [r7, #6]
 8000898:	7013      	strb	r3, [r2, #0]
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20002c9d 	.word	0x20002c9d
 80008a8:	20002c9e 	.word	0x20002c9e
 80008ac:	200001a0 	.word	0x200001a0
 80008b0:	200001a4 	.word	0x200001a4

080008b4 <uart_responData>:

void uart_responData(uint8_t *dat, uint16_t len)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	807b      	strh	r3, [r7, #2]
    // uart_respon->crc16 = modbusCRC16(dat, len); // 计算crc

    if (dat != NULL)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d007      	beq.n	80008d6 <uart_responData+0x22>
        memcpy(uart_respon->payload, dat, len); // 填充数据
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <uart_responData+0x84>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3302      	adds	r3, #2
 80008cc:	887a      	ldrh	r2, [r7, #2]
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f007 ff75 	bl	80087c0 <memcpy>

    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 80008d6:	4b19      	ldr	r3, [pc, #100]	@ (800093c <uart_responData+0x88>)
 80008d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80008dc:	613b      	str	r3, [r7, #16]

    // 分批发送
    uint16_t packSize = SIZE_CRC + len;
 80008de:	887b      	ldrh	r3, [r7, #2]
 80008e0:	3302      	adds	r3, #2
 80008e2:	81fb      	strh	r3, [r7, #14]
    uint16_t transCount = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	82fb      	strh	r3, [r7, #22]
    while (transCount < packSize)
 80008e8:	e01c      	b.n	8000924 <uart_responData+0x70>
    {
        uint16_t transLen = packSize - transCount;
 80008ea:	89fa      	ldrh	r2, [r7, #14]
 80008ec:	8afb      	ldrh	r3, [r7, #22]
 80008ee:	1ad3      	subs	r3, r2, r3
 80008f0:	82bb      	strh	r3, [r7, #20]
        if (transLen > BATCH_SIZE_RESPON)
 80008f2:	8abb      	ldrh	r3, [r7, #20]
 80008f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008f8:	d902      	bls.n	8000900 <uart_responData+0x4c>
            transLen = BATCH_SIZE_RESPON;
 80008fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008fe:	82bb      	strh	r3, [r7, #20]

        while (hcdc->TxState != 0)
 8000900:	bf00      	nop
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1fa      	bne.n	8000902 <uart_responData+0x4e>
            ;
        CDC_Transmit_FS(responBuf + transCount, transLen);
 800090c:	8afb      	ldrh	r3, [r7, #22]
 800090e:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <uart_responData+0x8c>)
 8000910:	4413      	add	r3, r2
 8000912:	8aba      	ldrh	r2, [r7, #20]
 8000914:	4611      	mov	r1, r2
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fb48 	bl	8007fac <CDC_Transmit_FS>

        transCount += transLen;
 800091c:	8afa      	ldrh	r2, [r7, #22]
 800091e:	8abb      	ldrh	r3, [r7, #20]
 8000920:	4413      	add	r3, r2
 8000922:	82fb      	strh	r3, [r7, #22]
    while (transCount < packSize)
 8000924:	8afa      	ldrh	r2, [r7, #22]
 8000926:	89fb      	ldrh	r3, [r7, #14]
 8000928:	429a      	cmp	r2, r3
 800092a:	d3de      	bcc.n	80008ea <uart_responData+0x36>
    }
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	3718      	adds	r7, #24
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000008 	.word	0x20000008
 800093c:	20002ca8 	.word	0x20002ca8
 8000940:	20001720 	.word	0x20001720

08000944 <uart_responAck>:

void uart_responAck()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <uart_responAck+0x30>)
 800094c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8000950:	607b      	str	r3, [r7, #4]

    while (hcdc->TxState != 0)
 8000952:	bf00      	nop
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1fa      	bne.n	8000954 <uart_responAck+0x10>
        ;

    uint8_t ack = 0xaa;
 800095e:	23aa      	movs	r3, #170	@ 0xaa
 8000960:	70fb      	strb	r3, [r7, #3]
    CDC_Transmit_FS(&ack, 1);
 8000962:	1cfb      	adds	r3, r7, #3
 8000964:	2101      	movs	r1, #1
 8000966:	4618      	mov	r0, r3
 8000968:	f007 fb20 	bl	8007fac <CDC_Transmit_FS>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20002ca8 	.word	0x20002ca8

08000978 <uart_cmdRecv>:

// usb 接收回调
void uart_cmdRecv(uint8_t *buf, uint32_t len)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
    if (busy)
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <uart_cmdRecv+0x5c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d11c      	bne.n	80009c6 <uart_cmdRecv+0x4e>
        return;

    uint16_t remainSize = sizeof(cmdBuf) - cmdBuf_p;
 800098c:	4b12      	ldr	r3, [pc, #72]	@ (80009d8 <uart_cmdRecv+0x60>)
 800098e:	881b      	ldrh	r3, [r3, #0]
 8000990:	f5c3 53ab 	rsb	r3, r3, #5472	@ 0x1560
 8000994:	331c      	adds	r3, #28
 8000996:	81fb      	strh	r3, [r7, #14]
    if (len > remainSize)
 8000998:	89fb      	ldrh	r3, [r7, #14]
 800099a:	683a      	ldr	r2, [r7, #0]
 800099c:	429a      	cmp	r2, r3
 800099e:	d814      	bhi.n	80009ca <uart_cmdRecv+0x52>
        return;

    memcpy(cmdBuf + cmdBuf_p, buf, len);
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <uart_cmdRecv+0x60>)
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <uart_cmdRecv+0x64>)
 80009a8:	4413      	add	r3, r2
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f007 ff06 	bl	80087c0 <memcpy>
    cmdBuf_p += len;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b07      	ldr	r3, [pc, #28]	@ (80009d8 <uart_cmdRecv+0x60>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	4413      	add	r3, r2
 80009be:	b29a      	uxth	r2, r3
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <uart_cmdRecv+0x60>)
 80009c2:	801a      	strh	r2, [r3, #0]
 80009c4:	e002      	b.n	80009cc <uart_cmdRecv+0x54>
        return;
 80009c6:	bf00      	nop
 80009c8:	e000      	b.n	80009cc <uart_cmdRecv+0x54>
        return;
 80009ca:	bf00      	nop
}
 80009cc:	3710      	adds	r7, #16
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20002c9c 	.word	0x20002c9c
 80009d8:	200001a0 	.word	0x200001a0
 80009dc:	200001a4 	.word	0x200001a4

080009e0 <uart_clearRecvBuf>:

void uart_clearRecvBuf()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    cmdBuf_p = 0;
 80009e4:	4b06      	ldr	r3, [pc, #24]	@ (8000a00 <uart_clearRecvBuf+0x20>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	801a      	strh	r2, [r3, #0]
    memset(cmdBuf, 0, sizeof(cmdBuf));
 80009ea:	f241 527c 	movw	r2, #5500	@ 0x157c
 80009ee:	2100      	movs	r1, #0
 80009f0:	4804      	ldr	r0, [pc, #16]	@ (8000a04 <uart_clearRecvBuf+0x24>)
 80009f2:	f007 feb9 	bl	8008768 <memset>
    busy = 0;
 80009f6:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <uart_clearRecvBuf+0x28>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200001a0 	.word	0x200001a0
 8000a04:	200001a4 	.word	0x200001a4
 8000a08:	20002c9c 	.word	0x20002c9c

08000a0c <uart_cmdHandler>:

void uart_cmdHandler()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
    // 判断命令结束
    if (cmdBuf_p > 2)
 8000a10:	4b43      	ldr	r3, [pc, #268]	@ (8000b20 <uart_cmdHandler+0x114>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	f240 8082 	bls.w	8000b1e <uart_cmdHandler+0x112>
    {
        if (uart_cmd->cmdSize == cmdBuf_p)
 8000a1a:	4b42      	ldr	r3, [pc, #264]	@ (8000b24 <uart_cmdHandler+0x118>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b3f      	ldr	r3, [pc, #252]	@ (8000b20 <uart_cmdHandler+0x114>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d179      	bne.n	8000b1e <uart_cmdHandler+0x112>
            // uint16_t localCrc = modbusCRC16(cmdBuf, uart_cmd->cmdSize - 2);

            // if (cmdCrc != localCrc)
            //     uart_clearRecvBuf();

            busy = 1;
 8000a2a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b28 <uart_cmdHandler+0x11c>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8000a30:	2200      	movs	r2, #0
 8000a32:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a36:	483d      	ldr	r0, [pc, #244]	@ (8000b2c <uart_cmdHandler+0x120>)
 8000a38:	f001 f8d2 	bl	8001be0 <HAL_GPIO_WritePin>

            // execute cmd
            switch (uart_cmd->cmdCode)
 8000a3c:	4b39      	ldr	r3, [pc, #228]	@ (8000b24 <uart_cmdHandler+0x118>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	3be7      	subs	r3, #231	@ 0xe7
 8000a44:	2b15      	cmp	r3, #21
 8000a46:	d862      	bhi.n	8000b0e <uart_cmdHandler+0x102>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <uart_cmdHandler+0x44>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000ae5 	.word	0x08000ae5
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000b0f 	.word	0x08000b0f
 8000a5c:	08000b03 	.word	0x08000b03
 8000a60:	08000b09 	.word	0x08000b09
 8000a64:	08000b0f 	.word	0x08000b0f
 8000a68:	08000b0f 	.word	0x08000b0f
 8000a6c:	08000b0f 	.word	0x08000b0f
 8000a70:	08000b0f 	.word	0x08000b0f
 8000a74:	08000aa9 	.word	0x08000aa9
 8000a78:	08000aaf 	.word	0x08000aaf
 8000a7c:	08000ab5 	.word	0x08000ab5
 8000a80:	08000abb 	.word	0x08000abb
 8000a84:	08000ac1 	.word	0x08000ac1
 8000a88:	08000ac7 	.word	0x08000ac7
 8000a8c:	08000acd 	.word	0x08000acd
 8000a90:	08000ad3 	.word	0x08000ad3
 8000a94:	08000ad9 	.word	0x08000ad9
 8000a98:	08000adf 	.word	0x08000adf
 8000a9c:	08000af1 	.word	0x08000af1
 8000aa0:	08000af7 	.word	0x08000af7
 8000aa4:	08000afd 	.word	0x08000afd
            {
            case 0xf0: // rom id获取
                romGetID();
 8000aa8:	f000 f872 	bl	8000b90 <romGetID>
                break;
 8000aac:	e030      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf1: // rom chip擦除
                romEraseChip();
 8000aae:	f000 f8bf 	bl	8000c30 <romEraseChip>
                break;
 8000ab2:	e02d      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf2: // rom blcok擦除
                romEraseBlock();
 8000ab4:	f000 f8fd 	bl	8000cb2 <romEraseBlock>
                break;
 8000ab8:	e02a      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf3: // rom sector擦除
                romEraseSector();
 8000aba:	f000 f903 	bl	8000cc4 <romEraseSector>
                break;
 8000abe:	e027      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf4: // rom program
                romProgram();
 8000ac0:	f000 f952 	bl	8000d68 <romProgram>
                break;
 8000ac4:	e024      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf5: // rom 写入透传
                romWrite();
 8000ac6:	f000 fa1f 	bl	8000f08 <romWrite>
                break;
 8000aca:	e021      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf6: // rom 读取透传
                romRead();
 8000acc:	f000 fa42 	bl	8000f54 <romRead>
                break;
 8000ad0:	e01e      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf7: // ram 写入透传
                ramWrite();
 8000ad2:	f000 fa6f 	bl	8000fb4 <ramWrite>
                break;
 8000ad6:	e01b      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf8: // ram 读取透传
                ramRead();
 8000ad8:	f000 fa92 	bl	8001000 <ramRead>
                break;
 8000adc:	e018      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xf9: // 编程flash存档
                ramProgramFlash();
 8000ade:	f000 fab9 	bl	8001054 <ramProgramFlash>
                break;
 8000ae2:	e015      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xe7: // ram 带延迟写入
                ramWrite_forFram();
 8000ae4:	f000 fb20 	bl	8001128 <ramWrite_forFram>
                break;
 8000ae8:	e012      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xe8: // ram 带延迟读取
                ramRead_forFram();
 8000aea:	f000 fb61 	bl	80011b0 <ramRead_forFram>
                break;
 8000aee:	e00f      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xfa: // gbc 写入透传
                gbcWrite();
 8000af0:	f000 fba8 	bl	8001244 <gbcWrite>
                break;
 8000af4:	e00c      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xfb: // gbc 读取透传
                gbcRead();
 8000af6:	f000 fbcb 	bl	8001290 <gbcRead>
                break;
 8000afa:	e009      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xfc: // gbc rom编程
                gbcRomProgram();
 8000afc:	f000 fbf2 	bl	80012e4 <gbcRomProgram>
                break;
 8000b00:	e006      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xea: // gbc 带延迟写入
                gbcWrite_forFram();
 8000b02:	f000 fcc5 	bl	8001490 <gbcWrite_forFram>
                break;
 8000b06:	e003      	b.n	8000b10 <uart_cmdHandler+0x104>

            case 0xeb: // gbc 带延迟读取
                gbcRead_forFram();
 8000b08:	f000 fd06 	bl	8001518 <gbcRead_forFram>
                break;
 8000b0c:	e000      	b.n	8000b10 <uart_cmdHandler+0x104>

            default:
                break;
 8000b0e:	bf00      	nop
            }

            HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b16:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <uart_cmdHandler+0x120>)
 8000b18:	f001 f862 	bl	8001be0 <HAL_GPIO_WritePin>
            return;
 8000b1c:	bf00      	nop
        }
    }
}
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200001a0 	.word	0x200001a0
 8000b24:	20000004 	.word	0x20000004
 8000b28:	20002c9c 	.word	0x20002c9c
 8000b2c:	40011000 	.word	0x40011000

08000b30 <romWaitForDone>:

void romWaitForDone(uint32_t addr, uint16_t expectedValue)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	460b      	mov	r3, r1
 8000b3a:	807b      	strh	r3, [r7, #2]
    uint16_t value;
    while (1)
    {
        cart_romRead(addr, &value, 1);
 8000b3c:	f107 030e 	add.w	r3, r7, #14
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff fb7f 	bl	8000248 <cart_romRead>
        if ((value & 0x0080) == (expectedValue & 0x0080))
 8000b4a:	89fa      	ldrh	r2, [r7, #14]
 8000b4c:	887b      	ldrh	r3, [r7, #2]
 8000b4e:	4053      	eors	r3, r2
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d10e      	bne.n	8000b78 <romWaitForDone+0x48>
        {
            cart_romRead(addr, &value, 1);
 8000b5a:	f107 030e 	add.w	r3, r7, #14
 8000b5e:	2201      	movs	r2, #1
 8000b60:	4619      	mov	r1, r3
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff fb70 	bl	8000248 <cart_romRead>
            cart_romRead(addr, &value, 1);
 8000b68:	f107 030e 	add.w	r3, r7, #14
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fb69 	bl	8000248 <cart_romRead>
            break;
 8000b76:	e005      	b.n	8000b84 <romWaitForDone+0x54>
        }
        if (cmdBuf_p == 0)
 8000b78:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <romWaitForDone+0x5c>)
 8000b7a:	881b      	ldrh	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d000      	beq.n	8000b82 <romWaitForDone+0x52>
        cart_romRead(addr, &value, 1);
 8000b80:	e7dc      	b.n	8000b3c <romWaitForDone+0xc>
        {
            break;
 8000b82:	bf00      	nop
        }
    }
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	200001a0 	.word	0x200001a0

08000b90 <romGetID>:
// 获取rom id
// i 2B.包大小 0xf0 2B.CRC
//   05 00 f0 61 85
// o 2B.CRC 8B.数据
void romGetID()
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
    uint16_t cmd;

    /* Issue Autoselect Command Sequence */
    cmd = 0xaa;
 8000b96:	23aa      	movs	r3, #170	@ 0xaa
 8000b98:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x555, &cmd, 1);
 8000b9a:	f107 030e 	add.w	r3, r7, #14
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f240 5055 	movw	r0, #1365	@ 0x555
 8000ba6:	f7ff fb97 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000baa:	2355      	movs	r3, #85	@ 0x55
 8000bac:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x2aa, &cmd, 1);
 8000bae:	f107 030e 	add.w	r3, r7, #14
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000bba:	f7ff fb8d 	bl	80002d8 <cart_romWrite>
    cmd = 0x90;
 8000bbe:	2390      	movs	r3, #144	@ 0x90
 8000bc0:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0x555, &cmd, 1);
 8000bc2:	f107 030e 	add.w	r3, r7, #14
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4619      	mov	r1, r3
 8000bca:	f240 5055 	movw	r0, #1365	@ 0x555
 8000bce:	f7ff fb83 	bl	80002d8 <cart_romWrite>

    uint16_t id[4];                // e.g             S29GL256S  JS28F256
    cart_romRead(0x00, id + 0, 1); // Manufacture ID  0001h      0089h
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fb35 	bl	8000248 <cart_romRead>
    cart_romRead(0x01, id + 1, 1); // Device ID       227Eh      227Eh
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	3302      	adds	r3, #2
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	f7ff fb2e 	bl	8000248 <cart_romRead>
    cart_romRead(0x0e, id + 2, 1); // Device ID       2222h      2222h = 256 Mb
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	3304      	adds	r3, #4
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	200e      	movs	r0, #14
 8000bf6:	f7ff fb27 	bl	8000248 <cart_romRead>
    cart_romRead(0x0f, id + 3, 1); // Device ID       2201h      2201h
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	3306      	adds	r3, #6
 8000bfe:	2201      	movs	r2, #1
 8000c00:	4619      	mov	r1, r3
 8000c02:	200f      	movs	r0, #15
 8000c04:	f7ff fb20 	bl	8000248 <cart_romRead>

    /* Write Software RESET command */
    cmd = 0xf0;
 8000c08:	23f0      	movs	r3, #240	@ 0xf0
 8000c0a:	81fb      	strh	r3, [r7, #14]
    cart_romWrite(0, &cmd, 1);
 8000c0c:	f107 030e 	add.w	r3, r7, #14
 8000c10:	2201      	movs	r2, #1
 8000c12:	4619      	mov	r1, r3
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fb5f 	bl	80002d8 <cart_romWrite>

    uart_clearRecvBuf();
 8000c1a:	f7ff fee1 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData((uint8_t *)id, 8);
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2108      	movs	r1, #8
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff fe46 	bl	80008b4 <uart_responData>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <romEraseChip>:
// 全片抹除
// i 2B.包大小 0xf1 2B.CRC
//   05 00 f1 a0 45
// o 0xaa
void romEraseChip()
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
    uint16_t cmd;

    /* Issue inlock sequence command */
    cmd = 0xaa;
 8000c36:	23aa      	movs	r3, #170	@ 0xaa
 8000c38:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c44:	f7ff fb48 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000c48:	2355      	movs	r3, #85	@ 0x55
 8000c4a:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000c56:	f7ff fb3f 	bl	80002d8 <cart_romWrite>
    cmd = 0x80;
 8000c5a:	2380      	movs	r3, #128	@ 0x80
 8000c5c:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c5e:	1dbb      	adds	r3, r7, #6
 8000c60:	2201      	movs	r2, #1
 8000c62:	4619      	mov	r1, r3
 8000c64:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c68:	f7ff fb36 	bl	80002d8 <cart_romWrite>
    cmd = 0xaa;
 8000c6c:	23aa      	movs	r3, #170	@ 0xaa
 8000c6e:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	2201      	movs	r2, #1
 8000c74:	4619      	mov	r1, r3
 8000c76:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c7a:	f7ff fb2d 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000c7e:	2355      	movs	r3, #85	@ 0x55
 8000c80:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000c82:	1dbb      	adds	r3, r7, #6
 8000c84:	2201      	movs	r2, #1
 8000c86:	4619      	mov	r1, r3
 8000c88:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000c8c:	f7ff fb24 	bl	80002d8 <cart_romWrite>
    /* Write Chip Erase Command to Base Address */
    cmd = 0x10;
 8000c90:	2310      	movs	r3, #16
 8000c92:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000c94:	1dbb      	adds	r3, r7, #6
 8000c96:	2201      	movs	r2, #1
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f240 5055 	movw	r0, #1365	@ 0x555
 8000c9e:	f7ff fb1b 	bl	80002d8 <cart_romWrite>

    uart_clearRecvBuf();
 8000ca2:	f7ff fe9d 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000ca6:	f7ff fe4d 	bl	8000944 <uart_responAck>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <romEraseBlock>:

// 块擦除
// i 2B.包大小 0xf2 4B.BlockAddress 2B.CRC
// o 0xaa
void romEraseBlock()
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	af00      	add	r7, sp, #0
    // 本项目无用
    uart_clearRecvBuf();
 8000cb6:	f7ff fe93 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000cba:	f7ff fe43 	bl	8000944 <uart_responAck>
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <romEraseSector>:

// 扇区擦除
// i 2B.包大小 0xf3 4B.SectorAddress 2B.CRC
// o 0xaa
void romEraseSector()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000cca:	4b26      	ldr	r3, [pc, #152]	@ (8000d64 <romEraseSector+0xa0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3303      	adds	r3, #3
 8000cd0:	60fb      	str	r3, [r7, #12]

    // 扇区地址
    uint32_t sectorAddress = (desc_write->baseAddress >> 1) & 0x00ff0000;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	085b      	lsrs	r3, r3, #1
 8000cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000cdc:	60bb      	str	r3, [r7, #8]

    uint16_t cmd;

    /* Issue unlock sequence command */
    cmd = 0xaa;
 8000cde:	23aa      	movs	r3, #170	@ 0xaa
 8000ce0:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000ce2:	1dbb      	adds	r3, r7, #6
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	f240 5055 	movw	r0, #1365	@ 0x555
 8000cec:	f7ff faf4 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000cf0:	2355      	movs	r3, #85	@ 0x55
 8000cf2:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000cfe:	f7ff faeb 	bl	80002d8 <cart_romWrite>
    cmd = 0x80;
 8000d02:	2380      	movs	r3, #128	@ 0x80
 8000d04:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000d06:	1dbb      	adds	r3, r7, #6
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	f240 5055 	movw	r0, #1365	@ 0x555
 8000d10:	f7ff fae2 	bl	80002d8 <cart_romWrite>
    cmd = 0xaa;
 8000d14:	23aa      	movs	r3, #170	@ 0xaa
 8000d16:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x555, &cmd, 1);
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f240 5055 	movw	r0, #1365	@ 0x555
 8000d22:	f7ff fad9 	bl	80002d8 <cart_romWrite>
    cmd = 0x55;
 8000d26:	2355      	movs	r3, #85	@ 0x55
 8000d28:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(0x2aa, &cmd, 1);
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000d34:	f7ff fad0 	bl	80002d8 <cart_romWrite>
    /* Write Sector Erase Command to Offset */
    cmd = 0x30;
 8000d38:	2330      	movs	r3, #48	@ 0x30
 8000d3a:	80fb      	strh	r3, [r7, #6]
    cart_romWrite(sectorAddress, &cmd, 1);
 8000d3c:	1dbb      	adds	r3, r7, #6
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4619      	mov	r1, r3
 8000d42:	68b8      	ldr	r0, [r7, #8]
 8000d44:	f7ff fac8 	bl	80002d8 <cart_romWrite>

    romWaitForDone(sectorAddress, 0xffff);
 8000d48:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000d4c:	68b8      	ldr	r0, [r7, #8]
 8000d4e:	f7ff feef 	bl	8000b30 <romWaitForDone>

    uart_clearRecvBuf();
 8000d52:	f7ff fe45 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000d56:	f7ff fdf5 	bl	8000944 <uart_responAck>
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000004 	.word	0x20000004

08000d68 <romProgram>:

// rom program
// i 2B.包大小 0xf4 4B.始地址 nB.数据 2B.CRC
// o 0xaa
void romProgram()
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000d6e:	4b64      	ldr	r3, [pc, #400]	@ (8000f00 <romProgram+0x198>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3303      	adds	r3, #3
 8000d74:	61fb      	str	r3, [r7, #28]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	61bb      	str	r3, [r7, #24]
    uint32_t wordAddress = baseAddress >> 1;
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	085b      	lsrs	r3, r3, #1
 8000d80:	617b      	str	r3, [r7, #20]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_BUFF_SIZE - SIZE_CRC;
 8000d82:	4b5f      	ldr	r3, [pc, #380]	@ (8000f00 <romProgram+0x198>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	3b0b      	subs	r3, #11
 8000d8c:	827b      	strh	r3, [r7, #18]
    uint16_t wordCount = byteCount / 2;
 8000d8e:	8a7b      	ldrh	r3, [r7, #18]
 8000d90:	085b      	lsrs	r3, r3, #1
 8000d92:	823b      	strh	r3, [r7, #16]
    // 编程buff大小
    uint16_t bufferWriteBytes = *((uint16_t *)(desc_write->payload));
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	3304      	adds	r3, #4
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	81fb      	strh	r3, [r7, #14]
    // 数据
    uint16_t *dataBuf = (uint16_t *)(desc_write->payload + SIZE_BUFF_SIZE);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	3304      	adds	r3, #4
 8000da0:	3302      	adds	r3, #2
 8000da2:	60bb      	str	r3, [r7, #8]

    uint32_t writtenCount = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24

    while (writtenCount < wordCount)
 8000da8:	e09d      	b.n	8000ee6 <romProgram+0x17e>
    {
        uint16_t cmd;
        uint32_t startingAddress = wordAddress + writtenCount;
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dae:	4413      	add	r3, r2
 8000db0:	607b      	str	r3, [r7, #4]

        // 不能多字节编程
        if (bufferWriteBytes == 0)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d137      	bne.n	8000e28 <romProgram+0xc0>
        {
            /* Issue Load Write Buffer Command Sequence */
            /* Issue unlock command sequence */
            cmd = 0xaa;
 8000db8:	23aa      	movs	r3, #170	@ 0xaa
 8000dba:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000dbc:	1cbb      	adds	r3, r7, #2
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f240 5055 	movw	r0, #1365	@ 0x555
 8000dc6:	f7ff fa87 	bl	80002d8 <cart_romWrite>
            cmd = 0x55;
 8000dca:	2355      	movs	r3, #85	@ 0x55
 8000dcc:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x2aa, &cmd, 1);
 8000dce:	1cbb      	adds	r3, r7, #2
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000dd8:	f7ff fa7e 	bl	80002d8 <cart_romWrite>
            /* Write Program Command */
            cmd = 0xa0;
 8000ddc:	23a0      	movs	r3, #160	@ 0xa0
 8000dde:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	2201      	movs	r2, #1
 8000de4:	4619      	mov	r1, r3
 8000de6:	f240 5055 	movw	r0, #1365	@ 0x555
 8000dea:	f7ff fa75 	bl	80002d8 <cart_romWrite>

            cart_romWrite(startingAddress,
                          dataBuf + writtenCount,
 8000dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df0:	005b      	lsls	r3, r3, #1
            cart_romWrite(startingAddress,
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	4413      	add	r3, r2
 8000df6:	2201      	movs	r2, #1
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa6c 	bl	80002d8 <cart_romWrite>
                          1);

            romWaitForDone(startingAddress, *(dataBuf + writtenCount));
 8000e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	4413      	add	r3, r2
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fe8f 	bl	8000b30 <romWaitForDone>
            if (cmdBuf_p == 0)
 8000e12:	4b3c      	ldr	r3, [pc, #240]	@ (8000f04 <romProgram+0x19c>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <romProgram+0xb8>
            {
                uart_clearRecvBuf();
 8000e1a:	f7ff fde1 	bl	80009e0 <uart_clearRecvBuf>
                return;
 8000e1e:	e06b      	b.n	8000ef8 <romProgram+0x190>
            }

            writtenCount++;
 8000e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e22:	3301      	adds	r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e26:	e05e      	b.n	8000ee6 <romProgram+0x17e>
        // 可以多字节编程
        else
        {
            // 5.4.1.2
            // Write Buffer Programming allows up to 512 bytes to be programmed in one operation.
            uint16_t writeLen = wordCount - writtenCount;
 8000e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	8a3a      	ldrh	r2, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	847b      	strh	r3, [r7, #34]	@ 0x22
            if (writeLen > (bufferWriteBytes / 2))
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	085b      	lsrs	r3, r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d902      	bls.n	8000e44 <romProgram+0xdc>
                writeLen = (bufferWriteBytes / 2);
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	847b      	strh	r3, [r7, #34]	@ 0x22
            // uint32_t sectorAddress = startingAddress & 0xffff0000;

            /* Issue Load Write Buffer Command Sequence */
            /* Issue unlock command sequence */
            cmd = 0xaa;
 8000e44:	23aa      	movs	r3, #170	@ 0xaa
 8000e46:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x555, &cmd, 1);
 8000e48:	1cbb      	adds	r3, r7, #2
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f240 5055 	movw	r0, #1365	@ 0x555
 8000e52:	f7ff fa41 	bl	80002d8 <cart_romWrite>
            cmd = 0x55;
 8000e56:	2355      	movs	r3, #85	@ 0x55
 8000e58:	807b      	strh	r3, [r7, #2]
            cart_romWrite(0x2aa, &cmd, 1);
 8000e5a:	1cbb      	adds	r3, r7, #2
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f240 20aa 	movw	r0, #682	@ 0x2aa
 8000e64:	f7ff fa38 	bl	80002d8 <cart_romWrite>
            /* Issue Write to Buffer Command at Sector Address */
            cmd = 0x25;
 8000e68:	2325      	movs	r3, #37	@ 0x25
 8000e6a:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000e6c:	1cbb      	adds	r3, r7, #2
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fa30 	bl	80002d8 <cart_romWrite>

            /* Write Number of Locations to program */
            cmd = writeLen - 1;
 8000e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	2201      	movs	r2, #1
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fa26 	bl	80002d8 <cart_romWrite>

            /* Load Data into Buffer */
            cart_romWrite(startingAddress,
                          dataBuf + writtenCount,
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8e:	005b      	lsls	r3, r3, #1
            cart_romWrite(startingAddress,
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	4413      	add	r3, r2
 8000e94:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e96:	4619      	mov	r1, r3
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff fa1d 	bl	80002d8 <cart_romWrite>
                          writeLen);

            /* Issue Program Buffer to Flash command */
            cmd = 0x29;
 8000e9e:	2329      	movs	r3, #41	@ 0x29
 8000ea0:	807b      	strh	r3, [r7, #2]
            cart_romWrite(startingAddress, &cmd, 1);
 8000ea2:	1cbb      	adds	r3, r7, #2
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fa15 	bl	80002d8 <cart_romWrite>

            romWaitForDone(startingAddress + writeLen - 1, *(dataBuf + writtenCount + writeLen - 1));
 8000eae:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	1e58      	subs	r0, r3, #1
 8000eb6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eba:	4413      	add	r3, r2
 8000ebc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fe30 	bl	8000b30 <romWaitForDone>
            if (cmdBuf_p == 0)
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <romProgram+0x19c>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <romProgram+0x176>
            {
                uart_clearRecvBuf();
 8000ed8:	f7ff fd82 	bl	80009e0 <uart_clearRecvBuf>
                return;
 8000edc:	e00c      	b.n	8000ef8 <romProgram+0x190>
            }

            writtenCount += writeLen;
 8000ede:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee2:	4413      	add	r3, r2
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    while (writtenCount < wordCount)
 8000ee6:	8a3b      	ldrh	r3, [r7, #16]
 8000ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f4ff af5d 	bcc.w	8000daa <romProgram+0x42>
        }
    }

    uart_clearRecvBuf();
 8000ef0:	f7ff fd76 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000ef4:	f7ff fd26 	bl	8000944 <uart_responAck>
}
 8000ef8:	3728      	adds	r7, #40	@ 0x28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000004 	.word	0x20000004
 8000f04:	200001a0 	.word	0x200001a0

08000f08 <romWrite>:

// rom写入透传
// i 2B.包大小 0xf5 4B.始地址 nB.数据 2B.CRC
// o 0xaa
void romWrite()
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <romWrite+0x48>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3303      	adds	r3, #3
 8000f14:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <romWrite+0x48>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	3b09      	subs	r3, #9
 8000f26:	80fb      	strh	r3, [r7, #6]
    uint16_t wordCount = byteCount / 2;
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	085b      	lsrs	r3, r3, #1
 8000f2c:	80bb      	strh	r3, [r7, #4]
    // 数据
    uint16_t *dataBuf = (uint16_t *)desc_write->payload;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3304      	adds	r3, #4
 8000f32:	603b      	str	r3, [r7, #0]

    cart_romWrite(baseAddress,
 8000f34:	88bb      	ldrh	r3, [r7, #4]
 8000f36:	461a      	mov	r2, r3
 8000f38:	6839      	ldr	r1, [r7, #0]
 8000f3a:	68b8      	ldr	r0, [r7, #8]
 8000f3c:	f7ff f9cc 	bl	80002d8 <cart_romWrite>
                  dataBuf,
                  wordCount);

    uart_clearRecvBuf();
 8000f40:	f7ff fd4e 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000f44:	f7ff fcfe 	bl	8000944 <uart_responAck>
}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000004 	.word	0x20000004

08000f54 <romRead>:

// rom 读取透传
// i 2B.包大小 0xf6 4B.始地址 2B.读取数量 2B.CRC
// o 2B.CRC nB.数据
void romRead()
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <romRead+0x58>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	3303      	adds	r3, #3
 8000f60:	617b      	str	r3, [r7, #20]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
    uint32_t wordAddress = baseAddress >> 1;
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	791a      	ldrb	r2, [r3, #4]
 8000f72:	795b      	ldrb	r3, [r3, #5]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	4313      	orrs	r3, r2
 8000f78:	817b      	strh	r3, [r7, #10]
    uint16_t wordCount = byteCount / 2;
 8000f7a:	897b      	ldrh	r3, [r7, #10]
 8000f7c:	085b      	lsrs	r3, r3, #1
 8000f7e:	813b      	strh	r3, [r7, #8]
    // 数据
    uint16_t *dataBuf = (uint16_t *)uart_respon->payload;
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <romRead+0x5c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	3302      	adds	r3, #2
 8000f86:	607b      	str	r3, [r7, #4]

    cart_romRead(
 8000f88:	893b      	ldrh	r3, [r7, #8]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	68f8      	ldr	r0, [r7, #12]
 8000f90:	f7ff f95a 	bl	8000248 <cart_romRead>
        wordAddress,
        dataBuf,
        wordCount);

    // 返回数据
    uart_clearRecvBuf();
 8000f94:	f7ff fd24 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 8000f98:	897b      	ldrh	r3, [r7, #10]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f7ff fc89 	bl	80008b4 <uart_responData>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <ramWrite>:

// ram写入
// i 2B.包大小 0xf7 4B.基地址 nB.写入数据 2B.CRC
// o 0xaa
void ramWrite()
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <ramWrite+0x48>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3303      	adds	r3, #3
 8000fc0:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 8000fca:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <ramWrite+0x48>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	3b09      	subs	r3, #9
 8000fd4:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	603b      	str	r3, [r7, #0]
    //     bank = 1;
    // else
    //     bank = 0;
    // cart_romWrite(0x800000, &bank, 1);

    cart_ramWrite((uint16_t)baseAddress, dataBuf, byteCount);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	88fa      	ldrh	r2, [r7, #6]
 8000fe2:	6839      	ldr	r1, [r7, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fa01 	bl	80003ec <cart_ramWrite>

    // 回复ack
    uart_clearRecvBuf();
 8000fea:	f7ff fcf9 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8000fee:	f7ff fca9 	bl	8000944 <uart_responAck>
}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000004 	.word	0x20000004

08001000 <ramRead>:

// ram 读取
// i 2B.包大小 0xf8 4B.基地址 2B.读取数量 2B.CRC
// o 2B.CRC nB.数据
void ramRead()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <ramRead+0x4c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	3303      	adds	r3, #3
 800100c:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	791a      	ldrb	r2, [r3, #4]
 8001018:	795b      	ldrb	r3, [r3, #5]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	4313      	orrs	r3, r2
 800101e:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <ramRead+0x50>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3302      	adds	r3, #2
 8001026:	603b      	str	r3, [r7, #0]
    //     bank = 1;
    // else
    //     bank = 0;
    // cart_romWrite(0x800000, &bank, 1);

    cart_ramRead((uint16_t)baseAddress, dataBuf, byteCount);
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	b29b      	uxth	r3, r3
 800102c:	88fa      	ldrh	r2, [r7, #6]
 800102e:	6839      	ldr	r1, [r7, #0]
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff f997 	bl	8000364 <cart_ramRead>

    // 返回数据
    uart_clearRecvBuf();
 8001036:	f7ff fcd3 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	4619      	mov	r1, r3
 800103e:	2000      	movs	r0, #0
 8001040:	f7ff fc38 	bl	80008b4 <uart_responData>
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000004 	.word	0x20000004
 8001050:	20000008 	.word	0x20000008

08001054 <ramProgramFlash>:

void ramProgramFlash()
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 800105a:	4b31      	ldr	r3, [pc, #196]	@ (8001120 <ramProgramFlash+0xcc>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	3303      	adds	r3, #3
 8001060:	613b      	str	r3, [r7, #16]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	60fb      	str	r3, [r7, #12]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 800106a:	4b2d      	ldr	r3, [pc, #180]	@ (8001120 <ramProgramFlash+0xcc>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	881b      	ldrh	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	3b09      	subs	r3, #9
 8001074:	817b      	strh	r3, [r7, #10]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	3304      	adds	r3, #4
 800107a:	607b      	str	r3, [r7, #4]

    // 切bank在上位机完成

    // 逐字节写入
    uint8_t cmd;
    for (int i = 0; i < byteCount; i++)
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	e043      	b.n	800110a <ramProgramFlash+0xb6>
    {
        cmd = 0xaa;
 8001082:	23aa      	movs	r3, #170	@ 0xaa
 8001084:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x5555, &cmd, 1);
 8001086:	1cfb      	adds	r3, r7, #3
 8001088:	2201      	movs	r2, #1
 800108a:	4619      	mov	r1, r3
 800108c:	f245 5055 	movw	r0, #21845	@ 0x5555
 8001090:	f7ff f9ac 	bl	80003ec <cart_ramWrite>
        cmd = 0x55;
 8001094:	2355      	movs	r3, #85	@ 0x55
 8001096:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x2aaa, &cmd, 1);
 8001098:	1cfb      	adds	r3, r7, #3
 800109a:	2201      	movs	r2, #1
 800109c:	4619      	mov	r1, r3
 800109e:	f642 20aa 	movw	r0, #10922	@ 0x2aaa
 80010a2:	f7ff f9a3 	bl	80003ec <cart_ramWrite>
        cmd = 0xa0;
 80010a6:	23a0      	movs	r3, #160	@ 0xa0
 80010a8:	70fb      	strb	r3, [r7, #3]
        cart_ramWrite(0x5555, &cmd, 1); // FLASH_COMMAND_PROGRAM
 80010aa:	1cfb      	adds	r3, r7, #3
 80010ac:	2201      	movs	r2, #1
 80010ae:	4619      	mov	r1, r3
 80010b0:	f245 5055 	movw	r0, #21845	@ 0x5555
 80010b4:	f7ff f99a 	bl	80003ec <cart_ramWrite>
        cart_ramWrite((uint16_t)(baseAddress + i), dataBuf + i, 1);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b298      	uxth	r0, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff f98d 	bl	80003ec <cart_ramWrite>

        // wait for done
        uint8_t temp;
        do
        {
            cart_ramRead((uint16_t)(baseAddress + i), &temp, 1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	b29a      	uxth	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	b29b      	uxth	r3, r3
 80010da:	4413      	add	r3, r2
 80010dc:	b29b      	uxth	r3, r3
 80010de:	1cb9      	adds	r1, r7, #2
 80010e0:	2201      	movs	r2, #1
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f93e 	bl	8000364 <cart_ramRead>
            if (cmdBuf_p == 0)
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <ramProgramFlash+0xd0>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <ramProgramFlash+0xa2>
            {
                uart_clearRecvBuf();
 80010f0:	f7ff fc76 	bl	80009e0 <uart_clearRecvBuf>
 80010f4:	e011      	b.n	800111a <ramProgramFlash+0xc6>
                return;
            }
        } while (temp != dataBuf[i]);
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	4413      	add	r3, r2
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	78bb      	ldrb	r3, [r7, #2]
 8001100:	429a      	cmp	r2, r3
 8001102:	d1e6      	bne.n	80010d2 <ramProgramFlash+0x7e>
    for (int i = 0; i < byteCount; i++)
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	3301      	adds	r3, #1
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	897b      	ldrh	r3, [r7, #10]
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	429a      	cmp	r2, r3
 8001110:	dbb7      	blt.n	8001082 <ramProgramFlash+0x2e>
    }

    // 回复ack
    uart_clearRecvBuf();
 8001112:	f7ff fc65 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8001116:	f7ff fc15 	bl	8000944 <uart_responAck>
}
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000004 	.word	0x20000004
 8001124:	200001a0 	.word	0x200001a0

08001128 <ramWrite_forFram>:

void ramWrite_forFram()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <ramWrite_forFram+0x84>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	3303      	adds	r3, #3
 8001134:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	b29b      	uxth	r3, r3
 800113c:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC - SIZE_LATENCY;
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <ramWrite_forFram+0x84>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b29b      	uxth	r3, r3
 8001146:	3b0a      	subs	r3, #10
 8001148:	80fb      	strh	r3, [r7, #6]
    // 延迟周期
    uint8_t latency = desc_write->payload[0];
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	791b      	ldrb	r3, [r3, #4]
 800114e:	717b      	strb	r3, [r7, #5]
    // 数据
    uint8_t *dataBuf = desc_write->payload + SIZE_LATENCY;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3304      	adds	r3, #4
 8001154:	3301      	adds	r3, #1
 8001156:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < byteCount; i++)
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	e01a      	b.n	8001194 <ramWrite_forFram+0x6c>
    {
        cart_ramWrite((uint16_t)(baseAddress + i), dataBuf + i, 1); // 逐个字节写
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	b29a      	uxth	r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	b298      	uxth	r0, r3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff f93a 	bl	80003ec <cart_ramWrite>

        for (int ii = 0; ii < latency; ii++)
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	e003      	b.n	8001186 <ramWrite_forFram+0x5e>
            __NOP();
 800117e:	bf00      	nop
        for (int ii = 0; ii < latency; ii++)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	3301      	adds	r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbf7      	blt.n	800117e <ramWrite_forFram+0x56>
    for (int i = 0; i < byteCount; i++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbe0      	blt.n	800115e <ramWrite_forFram+0x36>
    }

    // 回复ack
    uart_clearRecvBuf();
 800119c:	f7ff fc20 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 80011a0:	f7ff fbd0 	bl	8000944 <uart_responAck>
}
 80011a4:	bf00      	nop
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000004 	.word	0x20000004

080011b0 <ramRead_forFram>:

void ramRead_forFram()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <ramRead_forFram+0x8c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3303      	adds	r3, #3
 80011bc:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	791a      	ldrb	r2, [r3, #4]
 80011c8:	795b      	ldrb	r3, [r3, #5]
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	4313      	orrs	r3, r2
 80011ce:	80fb      	strh	r3, [r7, #6]
    // 延迟周期
    uint8_t latency = uart_cmd->payload[SIZE_BASE_ADDRESS + SIZE_BYTE_COUNT];
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <ramRead_forFram+0x8c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7a5b      	ldrb	r3, [r3, #9]
 80011d6:	717b      	strb	r3, [r7, #5]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 80011d8:	4b19      	ldr	r3, [pc, #100]	@ (8001240 <ramRead_forFram+0x90>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	3302      	adds	r3, #2
 80011de:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < byteCount; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	e01a      	b.n	800121c <ramRead_forFram+0x6c>
    {
        cart_ramRead((uint16_t)(baseAddress + i), dataBuf + i, 1); // 逐个字节读
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	b298      	uxth	r0, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	2201      	movs	r2, #1
 80011fa:	4619      	mov	r1, r3
 80011fc:	f7ff f8b2 	bl	8000364 <cart_ramRead>

        for (int ii = 0; ii < latency; ii++)
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	e003      	b.n	800120e <ramRead_forFram+0x5e>
            __NOP();
 8001206:	bf00      	nop
        for (int ii = 0; ii < latency; ii++)
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	3301      	adds	r3, #1
 800120c:	613b      	str	r3, [r7, #16]
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	429a      	cmp	r2, r3
 8001214:	dbf7      	blt.n	8001206 <ramRead_forFram+0x56>
    for (int i = 0; i < byteCount; i++)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	3301      	adds	r3, #1
 800121a:	617b      	str	r3, [r7, #20]
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	429a      	cmp	r2, r3
 8001222:	dbe0      	blt.n	80011e6 <ramRead_forFram+0x36>
    }

    // 返回数据
    uart_clearRecvBuf();
 8001224:	f7ff fbdc 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	4619      	mov	r1, r3
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fb41 	bl	80008b4 <uart_responData>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000004 	.word	0x20000004
 8001240:	20000008 	.word	0x20000008

08001244 <gbcWrite>:
////////////////////////////////////////////////////////////
/// 下面是gbc的功能
////////////////////////////////////////////////////////////

void gbcWrite()
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <gbcWrite+0x48>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3303      	adds	r3, #3
 8001250:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	b29b      	uxth	r3, r3
 8001258:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <gbcWrite+0x48>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b29b      	uxth	r3, r3
 8001262:	3b09      	subs	r3, #9
 8001264:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = desc_write->payload;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3304      	adds	r3, #4
 800126a:	603b      	str	r3, [r7, #0]

    cart_gbcWrite((uint16_t)baseAddress, dataBuf, byteCount);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	b29b      	uxth	r3, r3
 8001270:	88fa      	ldrh	r2, [r7, #6]
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f941 	bl	80004fc <cart_gbcWrite>

    // 回复ack
    uart_clearRecvBuf();
 800127a:	f7ff fbb1 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 800127e:	f7ff fb61 	bl	8000944 <uart_responAck>
}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000004 	.word	0x20000004

08001290 <gbcRead>:

void gbcRead()
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 8001296:	4b11      	ldr	r3, [pc, #68]	@ (80012dc <gbcRead+0x4c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3303      	adds	r3, #3
 800129c:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	791a      	ldrb	r2, [r3, #4]
 80012a8:	795b      	ldrb	r3, [r3, #5]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	4313      	orrs	r3, r2
 80012ae:	80fb      	strh	r3, [r7, #6]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 80012b0:	4b0b      	ldr	r3, [pc, #44]	@ (80012e0 <gbcRead+0x50>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3302      	adds	r3, #2
 80012b6:	603b      	str	r3, [r7, #0]

    cart_gbcRead((uint16_t)baseAddress, dataBuf, byteCount);
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	88fa      	ldrh	r2, [r7, #6]
 80012be:	6839      	ldr	r1, [r7, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f8d9 	bl	8000478 <cart_gbcRead>

    // 返回数据
    uart_clearRecvBuf();
 80012c6:	f7ff fb8b 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4619      	mov	r1, r3
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff faf0 	bl	80008b4 <uart_responData>
}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000004 	.word	0x20000004
 80012e0:	20000008 	.word	0x20000008

080012e4 <gbcRomProgram>:

void gbcRomProgram()
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 80012ea:	4b67      	ldr	r3, [pc, #412]	@ (8001488 <gbcRomProgram+0x1a4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3303      	adds	r3, #3
 80012f0:	617b      	str	r3, [r7, #20]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	613b      	str	r3, [r7, #16]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_BUFF_SIZE - SIZE_CRC;
 80012fa:	4b63      	ldr	r3, [pc, #396]	@ (8001488 <gbcRomProgram+0x1a4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	3b0b      	subs	r3, #11
 8001304:	81fb      	strh	r3, [r7, #14]
    // 编程buff大小
    uint16_t bufferWriteBytes = *((uint16_t *)(desc_write->payload));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3304      	adds	r3, #4
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	81bb      	strh	r3, [r7, #12]
    // 数据
    uint8_t *dataBuf = desc_write->payload + SIZE_BUFF_SIZE;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3304      	adds	r3, #4
 8001312:	3302      	adds	r3, #2
 8001314:	60bb      	str	r3, [r7, #8]

    uint32_t writtenCount = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]

    while (writtenCount < byteCount)
 800131a:	e0a8      	b.n	800146e <gbcRomProgram+0x18a>
    {
        uint8_t cmd;
        uint32_t startingAddress = baseAddress + writtenCount;
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	4413      	add	r3, r2
 8001322:	607b      	str	r3, [r7, #4]

        // 不能多字节编程编程
        if (bufferWriteBytes == 0)
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d13c      	bne.n	80013a4 <gbcRomProgram+0xc0>
        {

            cmd = 0xaa;
 800132a:	23aa      	movs	r3, #170	@ 0xaa
 800132c:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1);
 800132e:	1cfb      	adds	r3, r7, #3
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 8001338:	f7ff f8e0 	bl	80004fc <cart_gbcWrite>
            cmd = 0x55;
 800133c:	2355      	movs	r3, #85	@ 0x55
 800133e:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0x555, &cmd, 1);
 8001340:	1cfb      	adds	r3, r7, #3
 8001342:	2201      	movs	r2, #1
 8001344:	4619      	mov	r1, r3
 8001346:	f240 5055 	movw	r0, #1365	@ 0x555
 800134a:	f7ff f8d7 	bl	80004fc <cart_gbcWrite>
            cmd = 0xa0;
 800134e:	23a0      	movs	r3, #160	@ 0xa0
 8001350:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1); // FLASH_COMMAND_PROGRAM
 8001352:	1cfb      	adds	r3, r7, #3
 8001354:	2201      	movs	r2, #1
 8001356:	4619      	mov	r1, r3
 8001358:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 800135c:	f7ff f8ce 	bl	80004fc <cart_gbcWrite>
            cart_gbcWrite((uint16_t)(startingAddress), dataBuf + writtenCount, 1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b298      	uxth	r0, r3
 8001364:	68ba      	ldr	r2, [r7, #8]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4413      	add	r3, r2
 800136a:	2201      	movs	r2, #1
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff f8c5 	bl	80004fc <cart_gbcWrite>

            // wait for done
            uint8_t temp;
            do
            {
                cart_gbcRead((uint16_t)(startingAddress), &temp, 1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	b29b      	uxth	r3, r3
 8001376:	1cb9      	adds	r1, r7, #2
 8001378:	2201      	movs	r2, #1
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f87c 	bl	8000478 <cart_gbcRead>
                if (cmdBuf_p == 0)
 8001380:	4b42      	ldr	r3, [pc, #264]	@ (800148c <gbcRomProgram+0x1a8>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d102      	bne.n	800138e <gbcRomProgram+0xaa>
                {
                    uart_clearRecvBuf();
 8001388:	f7ff fb2a 	bl	80009e0 <uart_clearRecvBuf>
 800138c:	e078      	b.n	8001480 <gbcRomProgram+0x19c>
                    return;
                }
            } while (temp != dataBuf[writtenCount]);
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	78bb      	ldrb	r3, [r7, #2]
 8001398:	429a      	cmp	r2, r3
 800139a:	d1ea      	bne.n	8001372 <gbcRomProgram+0x8e>

            writtenCount++;
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	e064      	b.n	800146e <gbcRomProgram+0x18a>
        }
        // 可以多字节编程
        else
        {
            uint16_t writeLen = byteCount - writtenCount;
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	89fa      	ldrh	r2, [r7, #14]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	837b      	strh	r3, [r7, #26]
            if (writeLen > bufferWriteBytes)
 80013ae:	8b7a      	ldrh	r2, [r7, #26]
 80013b0:	89bb      	ldrh	r3, [r7, #12]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d901      	bls.n	80013ba <gbcRomProgram+0xd6>
                writeLen = bufferWriteBytes;
 80013b6:	89bb      	ldrh	r3, [r7, #12]
 80013b8:	837b      	strh	r3, [r7, #26]
            // uint32_t sectorAddress = startingAddress & 0xffff0000;

            cmd = 0xaa;
 80013ba:	23aa      	movs	r3, #170	@ 0xaa
 80013bc:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0xaaa, &cmd, 1);
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	2201      	movs	r2, #1
 80013c2:	4619      	mov	r1, r3
 80013c4:	f640 20aa 	movw	r0, #2730	@ 0xaaa
 80013c8:	f7ff f898 	bl	80004fc <cart_gbcWrite>
            cmd = 0x55;
 80013cc:	2355      	movs	r3, #85	@ 0x55
 80013ce:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(0x555, &cmd, 1);
 80013d0:	1cfb      	adds	r3, r7, #3
 80013d2:	2201      	movs	r2, #1
 80013d4:	4619      	mov	r1, r3
 80013d6:	f240 5055 	movw	r0, #1365	@ 0x555
 80013da:	f7ff f88f 	bl	80004fc <cart_gbcWrite>
            cmd = 0x25;
 80013de:	2325      	movs	r3, #37	@ 0x25
 80013e0:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	1cf9      	adds	r1, r7, #3
 80013e8:	2201      	movs	r2, #1
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f886 	bl	80004fc <cart_gbcWrite>

            cmd = writeLen - 1;
 80013f0:	8b7b      	ldrh	r3, [r7, #26]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	3b01      	subs	r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	1cf9      	adds	r1, r7, #3
 8001400:	2201      	movs	r2, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f87a 	bl	80004fc <cart_gbcWrite>

            cart_gbcWrite(startingAddress,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	b298      	uxth	r0, r3
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	8b7a      	ldrh	r2, [r7, #26]
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff f871 	bl	80004fc <cart_gbcWrite>
                          dataBuf + writtenCount,
                          writeLen);

            cmd = 0x29;
 800141a:	2329      	movs	r3, #41	@ 0x29
 800141c:	70fb      	strb	r3, [r7, #3]
            cart_gbcWrite(startingAddress, &cmd, 1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	b29b      	uxth	r3, r3
 8001422:	1cf9      	adds	r1, r7, #3
 8001424:	2201      	movs	r2, #1
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff f868 	bl	80004fc <cart_gbcWrite>

            // wait for done
            uint8_t temp;
            do
            {
                cart_gbcRead((uint16_t)(startingAddress + writeLen - 1), &temp, 1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	b29a      	uxth	r2, r3
 8001430:	8b7b      	ldrh	r3, [r7, #26]
 8001432:	4413      	add	r3, r2
 8001434:	b29b      	uxth	r3, r3
 8001436:	3b01      	subs	r3, #1
 8001438:	b29b      	uxth	r3, r3
 800143a:	1c79      	adds	r1, r7, #1
 800143c:	2201      	movs	r2, #1
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f81a 	bl	8000478 <cart_gbcRead>
                if (cmdBuf_p == 0)
 8001444:	4b11      	ldr	r3, [pc, #68]	@ (800148c <gbcRomProgram+0x1a8>)
 8001446:	881b      	ldrh	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <gbcRomProgram+0x16e>
                {
                    uart_clearRecvBuf();
 800144c:	f7ff fac8 	bl	80009e0 <uart_clearRecvBuf>
 8001450:	e016      	b.n	8001480 <gbcRomProgram+0x19c>
                    return;
                }
            } while (temp != *(dataBuf + writtenCount + writeLen - 1));
 8001452:	8b7a      	ldrh	r2, [r7, #26]
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4413      	add	r3, r2
 8001458:	3b01      	subs	r3, #1
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	787b      	ldrb	r3, [r7, #1]
 8001462:	429a      	cmp	r2, r3
 8001464:	d1e2      	bne.n	800142c <gbcRomProgram+0x148>

            writtenCount += writeLen;
 8001466:	8b7b      	ldrh	r3, [r7, #26]
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	4413      	add	r3, r2
 800146c:	61fb      	str	r3, [r7, #28]
    while (writtenCount < byteCount)
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	429a      	cmp	r2, r3
 8001474:	f4ff af52 	bcc.w	800131c <gbcRomProgram+0x38>
        }
    }

    // 回复ack
    uart_clearRecvBuf();
 8001478:	f7ff fab2 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 800147c:	f7ff fa62 	bl	8000944 <uart_responAck>
}
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000004 	.word	0x20000004
 800148c:	200001a0 	.word	0x200001a0

08001490 <gbcWrite_forFram>:

void gbcWrite_forFram()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
    Desc_cmdBody_write_t *desc_write = (Desc_cmdBody_write_t *)(uart_cmd->payload);
 8001496:	4b1f      	ldr	r3, [pc, #124]	@ (8001514 <gbcWrite_forFram+0x84>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3303      	adds	r3, #3
 800149c:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_write->baseAddress & 0xffff;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	60bb      	str	r3, [r7, #8]
    // 写入总数量
    uint16_t byteCount = uart_cmd->cmdSize - SIZE_CMD_HEADER - SIZE_BASE_ADDRESS - SIZE_CRC;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <gbcWrite_forFram+0x84>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	3b09      	subs	r3, #9
 80014b0:	80fb      	strh	r3, [r7, #6]
    // 延迟周期
    uint8_t latency = desc_write->payload[0];
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	791b      	ldrb	r3, [r3, #4]
 80014b6:	717b      	strb	r3, [r7, #5]
    // 数据
    uint8_t *dataBuf = desc_write->payload + SIZE_LATENCY;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3304      	adds	r3, #4
 80014bc:	3301      	adds	r3, #1
 80014be:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < byteCount; i++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e01a      	b.n	80014fc <gbcWrite_forFram+0x6c>
    {
        cart_gbcWrite((uint16_t)(baseAddress + i), dataBuf + i, 1); // 逐个字节写
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4413      	add	r3, r2
 80014d0:	b298      	uxth	r0, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	4413      	add	r3, r2
 80014d8:	2201      	movs	r2, #1
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff f80e 	bl	80004fc <cart_gbcWrite>

        for (int ii = 0; ii < latency; ii++)
 80014e0:	2300      	movs	r3, #0
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	e003      	b.n	80014ee <gbcWrite_forFram+0x5e>
            __NOP();
 80014e6:	bf00      	nop
        for (int ii = 0; ii < latency; ii++)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	3301      	adds	r3, #1
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	797b      	ldrb	r3, [r7, #5]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dbf7      	blt.n	80014e6 <gbcWrite_forFram+0x56>
    for (int i = 0; i < byteCount; i++)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	3301      	adds	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	429a      	cmp	r2, r3
 8001502:	dbe0      	blt.n	80014c6 <gbcWrite_forFram+0x36>
    }

    // 回复ack
    uart_clearRecvBuf();
 8001504:	f7ff fa6c 	bl	80009e0 <uart_clearRecvBuf>
    uart_responAck();
 8001508:	f7ff fa1c 	bl	8000944 <uart_responAck>
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000004 	.word	0x20000004

08001518 <gbcRead_forFram>:

void gbcRead_forFram()
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
    Desc_cmdBody_read_t *desc_read = (Desc_cmdBody_read_t *)(uart_cmd->payload);
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <gbcRead_forFram+0x8c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3303      	adds	r3, #3
 8001524:	60fb      	str	r3, [r7, #12]

    // 基地址
    uint32_t baseAddress = desc_read->baseAddress;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60bb      	str	r3, [r7, #8]
    // 读取总数量
    uint16_t byteCount = desc_read->readSize;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	791a      	ldrb	r2, [r3, #4]
 8001530:	795b      	ldrb	r3, [r3, #5]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	4313      	orrs	r3, r2
 8001536:	80fb      	strh	r3, [r7, #6]
    // 延迟周期
    uint8_t latency = uart_cmd->payload[SIZE_BASE_ADDRESS + SIZE_BYTE_COUNT];
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <gbcRead_forFram+0x8c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	7a5b      	ldrb	r3, [r3, #9]
 800153e:	717b      	strb	r3, [r7, #5]
    // 数据
    uint8_t *dataBuf = uart_respon->payload;
 8001540:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <gbcRead_forFram+0x90>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	3302      	adds	r3, #2
 8001546:	603b      	str	r3, [r7, #0]

    for (int i = 0; i < byteCount; i++)
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	e01a      	b.n	8001584 <gbcRead_forFram+0x6c>
    {
        cart_gbcRead((uint16_t)(baseAddress + i), dataBuf + i, 1); // 逐个字节读
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	b29a      	uxth	r2, r3
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	b29b      	uxth	r3, r3
 8001556:	4413      	add	r3, r2
 8001558:	b298      	uxth	r0, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	4413      	add	r3, r2
 8001560:	2201      	movs	r2, #1
 8001562:	4619      	mov	r1, r3
 8001564:	f7fe ff88 	bl	8000478 <cart_gbcRead>

        for (int ii = 0; ii < latency; ii++)
 8001568:	2300      	movs	r3, #0
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	e003      	b.n	8001576 <gbcRead_forFram+0x5e>
            __NOP();
 800156e:	bf00      	nop
        for (int ii = 0; ii < latency; ii++)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	3301      	adds	r3, #1
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	797b      	ldrb	r3, [r7, #5]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	429a      	cmp	r2, r3
 800157c:	dbf7      	blt.n	800156e <gbcRead_forFram+0x56>
    for (int i = 0; i < byteCount; i++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbe0      	blt.n	800154e <gbcRead_forFram+0x36>
    }

    // 返回数据
    uart_clearRecvBuf();
 800158c:	f7ff fa28 	bl	80009e0 <uart_clearRecvBuf>
    uart_responData(NULL, byteCount);
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	4619      	mov	r1, r3
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff f98d 	bl	80008b4 <uart_responData>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000004 	.word	0x20000004
 80015a8:	20000008 	.word	0x20000008

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015ac:	f7ff f94a 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015b2:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015b4:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c8:	4c09      	ldr	r4, [pc, #36]	@ (80015f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f007 f8cf 	bl	8008778 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7fe ffd3 	bl	8000584 <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80015e8:	08008868 	.word	0x08008868
  ldr r2, =_sbss
 80015ec:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80015f0:	20003e64 	.word	0x20003e64

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f923 	bl	8001854 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff f8ae 	bl	8000774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 f93b 	bl	80018be <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 f903 	bl	800186a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	20000010 	.word	0x20000010
 8001680:	2000000c 	.word	0x2000000c

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	@ (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	@ (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	20000010 	.word	0x20000010
 80016a4:	20002ca0 	.word	0x20002ca0

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	@ (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20002ca0 	.word	0x20002ca0

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ee:	4a04      	ldr	r2, [pc, #16]	@ (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	2b00      	cmp	r3, #0
 8001730:	db0b      	blt.n	800174a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	f003 021f 	and.w	r2, r3, #31
 8001738:	4906      	ldr	r1, [pc, #24]	@ (8001754 <__NVIC_EnableIRQ+0x34>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	095b      	lsrs	r3, r3, #5
 8001740:	2001      	movs	r0, #1
 8001742:	fa00 f202 	lsl.w	r2, r0, r2
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001820:	d301      	bcc.n	8001826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001822:	2301      	movs	r3, #1
 8001824:	e00f      	b.n	8001846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <SysTick_Config+0x40>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182e:	210f      	movs	r1, #15
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f7ff ff90 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <SysTick_Config+0x40>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <SysTick_Config+0x40>)
 8001840:	2207      	movs	r2, #7
 8001842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	e000e010 	.word	0xe000e010

08001854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ff2d 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186a:	b580      	push	{r7, lr}
 800186c:	b086      	sub	sp, #24
 800186e:	af00      	add	r7, sp, #0
 8001870:	4603      	mov	r3, r0
 8001872:	60b9      	str	r1, [r7, #8]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001878:	2300      	movs	r3, #0
 800187a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800187c:	f7ff ff42 	bl	8001704 <__NVIC_GetPriorityGrouping>
 8001880:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	6978      	ldr	r0, [r7, #20]
 8001888:	f7ff ff90 	bl	80017ac <NVIC_EncodePriority>
 800188c:	4602      	mov	r2, r0
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	4611      	mov	r1, r2
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff5f 	bl	8001758 <__NVIC_SetPriority>
}
 800189a:	bf00      	nop
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	4603      	mov	r3, r0
 80018aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff35 	bl	8001720 <__NVIC_EnableIRQ>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b082      	sub	sp, #8
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7ff ffa2 	bl	8001810 <SysTick_Config>
 80018cc:	4603      	mov	r3, r0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b08b      	sub	sp, #44	@ 0x2c
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e169      	b.n	8001bc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018ec:	2201      	movs	r2, #1
 80018ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8158 	bne.w	8001bba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4a9a      	ldr	r2, [pc, #616]	@ (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d05e      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001914:	4a98      	ldr	r2, [pc, #608]	@ (8001b78 <HAL_GPIO_Init+0x2a0>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d875      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800191a:	4a98      	ldr	r2, [pc, #608]	@ (8001b7c <HAL_GPIO_Init+0x2a4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d058      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001920:	4a96      	ldr	r2, [pc, #600]	@ (8001b7c <HAL_GPIO_Init+0x2a4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d86f      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001926:	4a96      	ldr	r2, [pc, #600]	@ (8001b80 <HAL_GPIO_Init+0x2a8>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d052      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 800192c:	4a94      	ldr	r2, [pc, #592]	@ (8001b80 <HAL_GPIO_Init+0x2a8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d869      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001932:	4a94      	ldr	r2, [pc, #592]	@ (8001b84 <HAL_GPIO_Init+0x2ac>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04c      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001938:	4a92      	ldr	r2, [pc, #584]	@ (8001b84 <HAL_GPIO_Init+0x2ac>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d863      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800193e:	4a92      	ldr	r2, [pc, #584]	@ (8001b88 <HAL_GPIO_Init+0x2b0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d046      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
 8001944:	4a90      	ldr	r2, [pc, #576]	@ (8001b88 <HAL_GPIO_Init+0x2b0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d85d      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 800194a:	2b12      	cmp	r3, #18
 800194c:	d82a      	bhi.n	80019a4 <HAL_GPIO_Init+0xcc>
 800194e:	2b12      	cmp	r3, #18
 8001950:	d859      	bhi.n	8001a06 <HAL_GPIO_Init+0x12e>
 8001952:	a201      	add	r2, pc, #4	@ (adr r2, 8001958 <HAL_GPIO_Init+0x80>)
 8001954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001958:	080019d3 	.word	0x080019d3
 800195c:	080019ad 	.word	0x080019ad
 8001960:	080019bf 	.word	0x080019bf
 8001964:	08001a01 	.word	0x08001a01
 8001968:	08001a07 	.word	0x08001a07
 800196c:	08001a07 	.word	0x08001a07
 8001970:	08001a07 	.word	0x08001a07
 8001974:	08001a07 	.word	0x08001a07
 8001978:	08001a07 	.word	0x08001a07
 800197c:	08001a07 	.word	0x08001a07
 8001980:	08001a07 	.word	0x08001a07
 8001984:	08001a07 	.word	0x08001a07
 8001988:	08001a07 	.word	0x08001a07
 800198c:	08001a07 	.word	0x08001a07
 8001990:	08001a07 	.word	0x08001a07
 8001994:	08001a07 	.word	0x08001a07
 8001998:	08001a07 	.word	0x08001a07
 800199c:	080019b5 	.word	0x080019b5
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	4a79      	ldr	r2, [pc, #484]	@ (8001b8c <HAL_GPIO_Init+0x2b4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019aa:	e02c      	b.n	8001a06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	623b      	str	r3, [r7, #32]
          break;
 80019b2:	e029      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	3304      	adds	r3, #4
 80019ba:	623b      	str	r3, [r7, #32]
          break;
 80019bc:	e024      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	3308      	adds	r3, #8
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e01f      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	330c      	adds	r3, #12
 80019ce:	623b      	str	r3, [r7, #32]
          break;
 80019d0:	e01a      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019da:	2304      	movs	r3, #4
 80019dc:	623b      	str	r3, [r7, #32]
          break;
 80019de:	e013      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d105      	bne.n	80019f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	611a      	str	r2, [r3, #16]
          break;
 80019f2:	e009      	b.n	8001a08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019f4:	2308      	movs	r3, #8
 80019f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69fa      	ldr	r2, [r7, #28]
 80019fc:	615a      	str	r2, [r3, #20]
          break;
 80019fe:	e003      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a00:	2300      	movs	r3, #0
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x130>
          break;
 8001a06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	2bff      	cmp	r3, #255	@ 0xff
 8001a0c:	d801      	bhi.n	8001a12 <HAL_GPIO_Init+0x13a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	e001      	b.n	8001a16 <HAL_GPIO_Init+0x13e>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3304      	adds	r3, #4
 8001a16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	2bff      	cmp	r3, #255	@ 0xff
 8001a1c:	d802      	bhi.n	8001a24 <HAL_GPIO_Init+0x14c>
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	e002      	b.n	8001a2a <HAL_GPIO_Init+0x152>
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	3b08      	subs	r3, #8
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	210f      	movs	r1, #15
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	431a      	orrs	r2, r3
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80b1 	beq.w	8001bba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a58:	4b4d      	ldr	r3, [pc, #308]	@ (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6193      	str	r3, [r2, #24]
 8001a64:	4b4a      	ldr	r3, [pc, #296]	@ (8001b90 <HAL_GPIO_Init+0x2b8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a70:	4a48      	ldr	r2, [pc, #288]	@ (8001b94 <HAL_GPIO_Init+0x2bc>)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	220f      	movs	r2, #15
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a40      	ldr	r2, [pc, #256]	@ (8001b98 <HAL_GPIO_Init+0x2c0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d013      	beq.n	8001ac4 <HAL_GPIO_Init+0x1ec>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b9c <HAL_GPIO_Init+0x2c4>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d00d      	beq.n	8001ac0 <HAL_GPIO_Init+0x1e8>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ba0 <HAL_GPIO_Init+0x2c8>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d007      	beq.n	8001abc <HAL_GPIO_Init+0x1e4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba4 <HAL_GPIO_Init+0x2cc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d101      	bne.n	8001ab8 <HAL_GPIO_Init+0x1e0>
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e006      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ab8:	2304      	movs	r3, #4
 8001aba:	e004      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e002      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_GPIO_Init+0x1ee>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac8:	f002 0203 	and.w	r2, r2, #3
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ad6:	492f      	ldr	r1, [pc, #188]	@ (8001b94 <HAL_GPIO_Init+0x2bc>)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	3302      	adds	r3, #2
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af0:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	492c      	ldr	r1, [pc, #176]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001afe:	4b2a      	ldr	r3, [pc, #168]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4928      	ldr	r1, [pc, #160]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	4922      	ldr	r1, [pc, #136]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	491e      	ldr	r1, [pc, #120]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4918      	ldr	r1, [pc, #96]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4914      	ldr	r1, [pc, #80]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d021      	beq.n	8001bac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	490e      	ldr	r1, [pc, #56]	@ (8001ba8 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e021      	b.n	8001bba <HAL_GPIO_Init+0x2e2>
 8001b76:	bf00      	nop
 8001b78:	10320000 	.word	0x10320000
 8001b7c:	10310000 	.word	0x10310000
 8001b80:	10220000 	.word	0x10220000
 8001b84:	10210000 	.word	0x10210000
 8001b88:	10120000 	.word	0x10120000
 8001b8c:	10110000 	.word	0x10110000
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40010000 	.word	0x40010000
 8001b98:	40010800 	.word	0x40010800
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40011000 	.word	0x40011000
 8001ba4:	40011400 	.word	0x40011400
 8001ba8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_GPIO_Init+0x304>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	4909      	ldr	r1, [pc, #36]	@ (8001bdc <HAL_GPIO_Init+0x304>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f47f ae8e 	bne.w	80018ec <HAL_GPIO_Init+0x14>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	372c      	adds	r7, #44	@ 0x2c
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bfc:	e003      	b.n	8001c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	041a      	lsls	r2, r3, #16
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	611a      	str	r2, [r3, #16]
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0e8      	b.n	8001df4 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f006 faec 	bl	8008214 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2203      	movs	r2, #3
 8001c40:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 f9f5 	bl	800403e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5e:	f002 f9cb 	bl	8003ff8 <USB_CoreInit>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e0bf      	b.n	8001df4 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 f9f9 	bl	8004072 <USB_SetCurrentMode>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e0b0      	b.n	8001df4 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e03e      	b.n	8001d16 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3311      	adds	r3, #17
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	440b      	add	r3, r1
 8001cba:	3310      	adds	r3, #16
 8001cbc:	7bfa      	ldrb	r2, [r7, #15]
 8001cbe:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3313      	adds	r3, #19
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3324      	adds	r3, #36	@ 0x24
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	4613      	mov	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	4413      	add	r3, r2
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	440b      	add	r3, r1
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	791b      	ldrb	r3, [r3, #4]
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3bb      	bcc.n	8001c98 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	2300      	movs	r3, #0
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e044      	b.n	8001db0 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	440b      	add	r3, r1
 8001d34:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d3c:	7bfa      	ldrb	r2, [r7, #15]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	440b      	add	r3, r1
 8001d4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001d4e:	7bfa      	ldrb	r2, [r7, #15]
 8001d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d52:	7bfa      	ldrb	r2, [r7, #15]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	440b      	add	r3, r1
 8001d60:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	440b      	add	r3, r1
 8001d76:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	440b      	add	r3, r1
 8001d8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	3301      	adds	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	791b      	ldrb	r3, [r3, #4]
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3b5      	bcc.n	8001d26 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dc4:	f002 f961 	bl	800408a <USB_DevInit>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e00c      	b.n	8001df4 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 fbe0 	bl	80065b2 <USB_DevDisconnect>

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_PCD_Start+0x16>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e016      	b.n	8001e40 <HAL_PCD_Start+0x44>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 f8f7 	bl	8004012 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001e24:	2101      	movs	r1, #1
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f006 fc67 	bl	80086fa <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fbb4 	bl	800659e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 fbb6 	bl	80065c6 <USB_ReadInterrupts>
 8001e5a:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fb1a 	bl	80024a0 <PCD_EP_ISR_Handler>

    return;
 8001e6c:	e119      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f006 fa3a 	bl	800830a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f905 	bl	80020a8 <HAL_PCD_SetAddress>

    return;
 8001e9e:	e100      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ec2:	e0ee      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00c      	beq.n	8001ee8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001ee6:	e0dc      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d027      	beq.n	8001f42 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0204 	bic.w	r2, r2, #4
 8001f04:	b292      	uxth	r2, r2
 8001f06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0208 	bic.w	r2, r2, #8
 8001f1c:	b292      	uxth	r2, r2
 8001f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f006 fa2a 	bl	800837c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001f3a:	b292      	uxth	r2, r2
 8001f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8001f40:	e0af      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8083 	beq.w	8002054 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	77fb      	strb	r3, [r7, #31]
 8001f52:	e010      	b.n	8001f76 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	441a      	add	r2, r3
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	8812      	ldrh	r2, [r2, #0]
 8001f64:	b292      	uxth	r2, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	3320      	adds	r3, #32
 8001f6a:	443b      	add	r3, r7
 8001f6c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001f70:	7ffb      	ldrb	r3, [r7, #31]
 8001f72:	3301      	adds	r3, #1
 8001f74:	77fb      	strb	r3, [r7, #31]
 8001f76:	7ffb      	ldrb	r3, [r7, #31]
 8001f78:	2b07      	cmp	r3, #7
 8001f7a:	d9eb      	bls.n	8001f54 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0201 	orr.w	r2, r2, #1
 8001f8e:	b292      	uxth	r2, r2
 8001f90:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	b292      	uxth	r2, r2
 8001fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001fac:	bf00      	nop
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f6      	beq.n	8001fae <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	77fb      	strb	r3, [r7, #31]
 8001fdc:	e00f      	b.n	8001ffe <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001fde:	7ffb      	ldrb	r3, [r7, #31]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	7ffa      	ldrb	r2, [r7, #31]
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	440a      	add	r2, r1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	3320      	adds	r3, #32
 8001ff0:	443b      	add	r3, r7
 8001ff2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001ff6:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	77fb      	strb	r3, [r7, #31]
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	2b07      	cmp	r3, #7
 8002002:	d9ec      	bls.n	8001fde <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800200c:	b29a      	uxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	b292      	uxth	r2, r2
 8002018:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800202e:	b292      	uxth	r2, r2
 8002030:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800203c:	b29a      	uxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0204 	orr.w	r2, r2, #4
 8002046:	b292      	uxth	r2, r2
 8002048:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f006 f97b 	bl	8008348 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002052:	e026      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00f      	beq.n	800207e <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002066:	b29a      	uxth	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002070:	b292      	uxth	r2, r2
 8002072:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f006 f939 	bl	80082ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800207c:	e011      	b.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002090:	b29a      	uxth	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800209a:	b292      	uxth	r2, r2
 800209c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80020a0:	bf00      	nop
  }
}
 80020a2:	3720      	adds	r7, #32
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_PCD_SetAddress+0x1a>
 80020be:	2302      	movs	r3, #2
 80020c0:	e012      	b.n	80020e8 <HAL_PCD_SetAddress+0x40>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f004 fa4d 	bl	8006578 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	4608      	mov	r0, r1
 80020fa:	4611      	mov	r1, r2
 80020fc:	461a      	mov	r2, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	70fb      	strb	r3, [r7, #3]
 8002102:	460b      	mov	r3, r1
 8002104:	803b      	strh	r3, [r7, #0]
 8002106:	4613      	mov	r3, r2
 8002108:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800210e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	da0e      	bge.n	8002134 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002116:	78fb      	ldrb	r3, [r7, #3]
 8002118:	f003 0207 	and.w	r2, r3, #7
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	3310      	adds	r3, #16
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2201      	movs	r2, #1
 8002130:	705a      	strb	r2, [r3, #1]
 8002132:	e00e      	b.n	8002152 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	f003 0207 	and.w	r2, r3, #7
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	b2da      	uxtb	r2, r3
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800215e:	883a      	ldrh	r2, [r7, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	78ba      	ldrb	r2, [r7, #2]
 8002168:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800216a:	78bb      	ldrb	r3, [r7, #2]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d102      	bne.n	8002176 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_PCD_EP_Open+0x94>
 8002180:	2302      	movs	r3, #2
 8002182:	e00e      	b.n	80021a2 <HAL_PCD_EP_Open+0xb2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	4618      	mov	r0, r3
 8002194:	f001 ff96 	bl	80040c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80021a0:	7afb      	ldrb	r3, [r7, #11]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80021b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da0e      	bge.n	80021dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021be:	78fb      	ldrb	r3, [r7, #3]
 80021c0:	f003 0207 	and.w	r2, r3, #7
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	3310      	adds	r3, #16
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	705a      	strb	r2, [r3, #1]
 80021da:	e00e      	b.n	80021fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_PCD_EP_Close+0x6a>
 8002210:	2302      	movs	r3, #2
 8002212:	e00e      	b.n	8002232 <HAL_PCD_EP_Close+0x88>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fb0e 	bl	8004844 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	460b      	mov	r3, r1
 8002248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 0207 	and.w	r2, r3, #7
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800227a:	7afb      	ldrb	r3, [r7, #11]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	b2da      	uxtb	r2, r3
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6979      	ldr	r1, [r7, #20]
 800228c:	4618      	mov	r0, r3
 800228e:	f002 fcc5 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	f003 0207 	and.w	r2, r3, #7
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	460b      	mov	r3, r1
 80022d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	f003 0207 	and.w	r2, r3, #7
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3310      	adds	r3, #16
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	4413      	add	r3, r2
 80022ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2201      	movs	r2, #1
 8002314:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	b2da      	uxtb	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	6979      	ldr	r1, [r7, #20]
 8002328:	4618      	mov	r0, r3
 800232a:	f002 fc77 	bl	8004c1c <USB_EPStartXfer>

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	7912      	ldrb	r2, [r2, #4]
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e04c      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da0e      	bge.n	800237c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800235e:	78fb      	ldrb	r3, [r7, #3]
 8002360:	f003 0207 	and.w	r2, r3, #7
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3310      	adds	r3, #16
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	705a      	strb	r2, [r3, #1]
 800237a:	e00c      	b.n	8002396 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2200      	movs	r2, #0
 8002394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2201      	movs	r2, #1
 800239a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_EP_SetStall+0x7e>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e01c      	b.n	80023f0 <HAL_PCD_EP_SetStall+0xb8>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68f9      	ldr	r1, [r7, #12]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 ffda 	bl	800637e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80023de:	4619      	mov	r1, r3
 80023e0:	4610      	mov	r0, r2
 80023e2:	f004 f8ff 	bl	80065e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002404:	78fb      	ldrb	r3, [r7, #3]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	7912      	ldrb	r2, [r2, #4]
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e040      	b.n	8002498 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800241a:	2b00      	cmp	r3, #0
 800241c:	da0e      	bge.n	800243c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 0207 	and.w	r2, r3, #7
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	3310      	adds	r3, #16
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4413      	add	r3, r2
 8002432:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	705a      	strb	r2, [r3, #1]
 800243a:	e00e      	b.n	800245a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	4613      	mov	r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	b2da      	uxtb	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_PCD_EP_ClrStall+0x82>
 8002476:	2302      	movs	r3, #2
 8002478:	e00e      	b.n	8002498 <HAL_PCD_EP_ClrStall+0xa0>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 ffc8 	bl	800641e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b096      	sub	sp, #88	@ 0x58
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80024a8:	e3bb      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024b2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80024b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80024c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 8175 	bne.w	80027b8 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80024ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d14e      	bne.n	8002578 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3310      	adds	r3, #16
 8002502:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	3302      	adds	r3, #2
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	4413      	add	r3, r2
 8002522:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800252c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800252e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	441a      	add	r2, r3
 800253a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800253e:	2100      	movs	r1, #0
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f005 feba 	bl	80082ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7b5b      	ldrb	r3, [r3, #13]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8368 	beq.w	8002c22 <PCD_EP_ISR_Handler+0x782>
 8002552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 8363 	bne.w	8002c22 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7b5b      	ldrb	r3, [r3, #13]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002566:	b2da      	uxtb	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	735a      	strb	r2, [r3, #13]
 8002576:	e354      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800257e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800258a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800258e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002592:	2b00      	cmp	r3, #0
 8002594:	d034      	beq.n	8002600 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800259e:	b29b      	uxth	r3, r3
 80025a0:	461a      	mov	r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	3306      	adds	r3, #6
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025c0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80025cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025ce:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80025d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80025d2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f004 f856 	bl	8006686 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80025e6:	4013      	ands	r3, r2
 80025e8:	823b      	strh	r3, [r7, #16]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	8a3a      	ldrh	r2, [r7, #16]
 80025f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025f4:	b292      	uxth	r2, r2
 80025f6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f005 fe31 	bl	8008260 <HAL_PCD_SetupStageCallback>
 80025fe:	e310      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002600:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002604:	2b00      	cmp	r3, #0
 8002606:	f280 830c 	bge.w	8002c22 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29a      	uxth	r2, r3
 8002612:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002616:	4013      	ands	r3, r2
 8002618:	83fb      	strh	r3, [r7, #30]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	8bfa      	ldrh	r2, [r7, #30]
 8002620:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002624:	b292      	uxth	r2, r2
 8002626:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	3306      	adds	r3, #6
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002652:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1f0>
 800265c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d015      	beq.n	8002690 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6818      	ldr	r0, [r3, #0]
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266a:	6959      	ldr	r1, [r3, #20]
 800266c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800266e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002672:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002674:	b29b      	uxth	r3, r3
 8002676:	f004 f806 	bl	8006686 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800267a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	441a      	add	r2, r3
 8002684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002686:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f005 fdfa 	bl	8008284 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800269a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800269e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 82bd 	bne.w	8002c22 <PCD_EP_ISR_Handler+0x782>
 80026a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026ac:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80026b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026b4:	f000 82b5 	beq.w	8002c22 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	461a      	mov	r2, r3
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4413      	add	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	801a      	strh	r2, [r3, #0]
 80026e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80026ee:	d91d      	bls.n	800272c <PCD_EP_ISR_Handler+0x28c>
 80026f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	095b      	lsrs	r3, r3, #5
 80026f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80026f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <PCD_EP_ISR_Handler+0x26a>
 8002704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002706:	3b01      	subs	r3, #1
 8002708:	647b      	str	r3, [r7, #68]	@ 0x44
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	b29a      	uxth	r2, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002712:	b29b      	uxth	r3, r3
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	b29b      	uxth	r3, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002724:	b29a      	uxth	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	801a      	strh	r2, [r3, #0]
 800272a:	e026      	b.n	800277a <PCD_EP_ISR_Handler+0x2da>
 800272c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <PCD_EP_ISR_Handler+0x2aa>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b29b      	uxth	r3, r3
 800273a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800273e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002742:	b29a      	uxth	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	801a      	strh	r2, [r3, #0]
 8002748:	e017      	b.n	800277a <PCD_EP_ISR_Handler+0x2da>
 800274a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	647b      	str	r3, [r7, #68]	@ 0x44
 8002752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d002      	beq.n	8002764 <PCD_EP_ISR_Handler+0x2c4>
 800275e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002760:	3301      	adds	r3, #1
 8002762:	647b      	str	r3, [r7, #68]	@ 0x44
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29a      	uxth	r2, r3
 800276a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276c:	b29b      	uxth	r3, r3
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	b29b      	uxth	r3, r3
 8002772:	4313      	orrs	r3, r2
 8002774:	b29a      	uxth	r2, r3
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800278a:	827b      	strh	r3, [r7, #18]
 800278c:	8a7b      	ldrh	r3, [r7, #18]
 800278e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002792:	827b      	strh	r3, [r7, #18]
 8002794:	8a7b      	ldrh	r3, [r7, #18]
 8002796:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800279a:	827b      	strh	r3, [r7, #18]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	8a7b      	ldrh	r3, [r7, #18]
 80027a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80027a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80027aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	8013      	strh	r3, [r2, #0]
 80027b6:	e234      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	461a      	mov	r2, r3
 80027be:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80027cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f280 80fc 	bge.w	80029ce <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	461a      	mov	r2, r3
 80027dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80027ec:	4013      	ands	r3, r2
 80027ee:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002804:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002808:	b292      	uxth	r2, r2
 800280a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800280c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002810:	4613      	mov	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002822:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002824:	7b1b      	ldrb	r3, [r3, #12]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d125      	bne.n	8002876 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	3306      	adds	r3, #6
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	4413      	add	r3, r2
 8002848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002852:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002856:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8092 	beq.w	8002984 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002866:	6959      	ldr	r1, [r3, #20]
 8002868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800286a:	88da      	ldrh	r2, [r3, #6]
 800286c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002870:	f003 ff09 	bl	8006686 <USB_ReadPMA>
 8002874:	e086      	b.n	8002984 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002878:	78db      	ldrb	r3, [r3, #3]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d10a      	bne.n	8002894 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800287e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002882:	461a      	mov	r2, r3
 8002884:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9d9 	bl	8002c3e <HAL_PCD_EP_DB_Receive>
 800288c:	4603      	mov	r3, r0
 800288e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002892:	e077      	b.n	8002984 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	881b      	ldrh	r3, [r3, #0]
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028ae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	441a      	add	r2, r3
 80028c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80028c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80028c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80028cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	881b      	ldrh	r3, [r3, #0]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d024      	beq.n	800293c <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	461a      	mov	r2, r3
 80028fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	4413      	add	r3, r2
 8002906:	3302      	adds	r3, #2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	4413      	add	r3, r2
 8002910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002914:	881b      	ldrh	r3, [r3, #0]
 8002916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800291a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800291e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002922:	2b00      	cmp	r3, #0
 8002924:	d02e      	beq.n	8002984 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800292c:	6959      	ldr	r1, [r3, #20]
 800292e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002930:	891a      	ldrh	r2, [r3, #8]
 8002932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002936:	f003 fea6 	bl	8006686 <USB_ReadPMA>
 800293a:	e023      	b.n	8002984 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	3306      	adds	r3, #6
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	4413      	add	r3, r2
 800295a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002964:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002968:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002976:	6959      	ldr	r1, [r3, #20]
 8002978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297a:	895a      	ldrh	r2, [r3, #10]
 800297c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002980:	f003 fe81 	bl	8006686 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800298c:	441a      	add	r2, r3
 800298e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002990:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800299a:	441a      	add	r2, r3
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80029a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <PCD_EP_ISR_Handler+0x514>
 80029a8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80029ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d206      	bcs.n	80029c2 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80029b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f005 fc62 	bl	8008284 <HAL_PCD_DataOutStageCallback>
 80029c0:	e005      	b.n	80029ce <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029c8:	4618      	mov	r0, r3
 80029ca:	f002 f927 	bl	8004c1c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80029ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f000 8123 	beq.w	8002c22 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80029dc:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	3310      	adds	r3, #16
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a0a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	441a      	add	r2, r3
 8002a1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	78db      	ldrb	r3, [r3, #3]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	f040 80a2 	bne.w	8002b7a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3e:	7b1b      	ldrb	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 8093 	beq.w	8002b6c <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d046      	beq.n	8002ae0 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d126      	bne.n	8002aa8 <PCD_EP_ISR_Handler+0x608>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	4413      	add	r3, r2
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	011a      	lsls	r2, r3, #4
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	801a      	strh	r2, [r3, #0]
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e061      	b.n	8002b6c <PCD_EP_ISR_Handler+0x6cc>
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d15d      	bne.n	8002b6c <PCD_EP_ISR_Handler+0x6cc>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	4413      	add	r3, r2
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	011a      	lsls	r2, r3, #4
 8002ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]
 8002ade:	e045      	b.n	8002b6c <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	785b      	ldrb	r3, [r3, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d126      	bne.n	8002b3c <PCD_EP_ISR_Handler+0x69c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b02:	4413      	add	r3, r2
 8002b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	011a      	lsls	r2, r3, #4
 8002b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b0e:	4413      	add	r3, r2
 8002b10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b24:	801a      	strh	r2, [r3, #0]
 8002b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b38:	801a      	strh	r2, [r3, #0]
 8002b3a:	e017      	b.n	8002b6c <PCD_EP_ISR_Handler+0x6cc>
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b3e:	785b      	ldrb	r3, [r3, #1]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d113      	bne.n	8002b6c <PCD_EP_ISR_Handler+0x6cc>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b52:	4413      	add	r3, r2
 8002b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	011a      	lsls	r2, r3, #4
 8002b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b5e:	4413      	add	r3, r2
 8002b60:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b68:	2200      	movs	r2, #0
 8002b6a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f005 fba1 	bl	80082ba <HAL_PCD_DataInStageCallback>
 8002b78:	e053      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002b7a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d146      	bne.n	8002c14 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	699a      	ldr	r2, [r3, #24]
 8002bb6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d907      	bls.n	8002bce <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bca:	619a      	str	r2, [r3, #24]
 8002bcc:	e002      	b.n	8002bd4 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8002bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d106      	bne.n	8002bea <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f005 fb69 	bl	80082ba <HAL_PCD_DataInStageCallback>
 8002be8:	e01b      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002bf2:	441a      	add	r2, r3
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002bf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bfa:	69da      	ldr	r2, [r3, #28]
 8002bfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c00:	441a      	add	r2, r3
 8002c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c04:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f002 f805 	bl	8004c1c <USB_EPStartXfer>
 8002c12:	e006      	b.n	8002c22 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002c14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f91b 	bl	8002e58 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	b21b      	sxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	f6ff ac3b 	blt.w	80024aa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3758      	adds	r7, #88	@ 0x58
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b088      	sub	sp, #32
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d07e      	beq.n	8002d54 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c7e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	8b7b      	ldrh	r3, [r7, #26]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d306      	bcc.n	8002c98 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	8b7b      	ldrh	r3, [r7, #26]
 8002c90:	1ad2      	subs	r2, r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	619a      	str	r2, [r3, #24]
 8002c96:	e002      	b.n	8002c9e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d123      	bne.n	8002cee <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cc0:	833b      	strh	r3, [r7, #24]
 8002cc2:	8b3b      	ldrh	r3, [r7, #24]
 8002cc4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002cc8:	833b      	strh	r3, [r7, #24]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	8b3b      	ldrh	r3, [r7, #24]
 8002cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d01f      	beq.n	8002d38 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	881b      	ldrh	r3, [r3, #0]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d12:	82fb      	strh	r3, [r7, #22]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	441a      	add	r2, r3
 8002d22:	8afb      	ldrh	r3, [r7, #22]
 8002d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002d38:	8b7b      	ldrh	r3, [r7, #26]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	6959      	ldr	r1, [r3, #20]
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	891a      	ldrh	r2, [r3, #8]
 8002d4c:	8b7b      	ldrh	r3, [r7, #26]
 8002d4e:	f003 fc9a 	bl	8006686 <USB_ReadPMA>
 8002d52:	e07c      	b.n	8002e4e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4413      	add	r3, r2
 8002d68:	3306      	adds	r3, #6
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	8b7b      	ldrh	r3, [r7, #26]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d306      	bcc.n	8002d96 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	699a      	ldr	r2, [r3, #24]
 8002d8c:	8b7b      	ldrh	r3, [r7, #26]
 8002d8e:	1ad2      	subs	r2, r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	619a      	str	r2, [r3, #24]
 8002d94:	e002      	b.n	8002d9c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d123      	bne.n	8002dec <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dbe:	83fb      	strh	r3, [r7, #30]
 8002dc0:	8bfb      	ldrh	r3, [r7, #30]
 8002dc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002dc6:	83fb      	strh	r3, [r7, #30]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	8bfb      	ldrh	r3, [r7, #30]
 8002dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002de4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d11f      	bne.n	8002e36 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e10:	83bb      	strh	r3, [r7, #28]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	441a      	add	r2, r3
 8002e20:	8bbb      	ldrh	r3, [r7, #28]
 8002e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e36:	8b7b      	ldrh	r3, [r7, #26]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	6959      	ldr	r1, [r3, #20]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	895a      	ldrh	r2, [r3, #10]
 8002e48:	8b7b      	ldrh	r3, [r7, #26]
 8002e4a:	f003 fc1c 	bl	8006686 <USB_ReadPMA>
    }
  }

  return count;
 8002e4e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3720      	adds	r7, #32
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b0a4      	sub	sp, #144	@ 0x90
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 81dd 	beq.w	800322c <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	3302      	adds	r3, #2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e9a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d907      	bls.n	8002eba <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8002eb2:	1ad2      	subs	r2, r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	619a      	str	r2, [r3, #24]
 8002eb8:	e002      	b.n	8002ec0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 80b9 	bne.w	800303c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	785b      	ldrb	r3, [r3, #1]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d126      	bne.n	8002f20 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee6:	4413      	add	r3, r2
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	011a      	lsls	r2, r3, #4
 8002ef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f08:	801a      	strh	r2, [r3, #0]
 8002f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e01a      	b.n	8002f56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	785b      	ldrb	r3, [r3, #1]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d116      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3c:	4413      	add	r3, r2
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	011a      	lsls	r2, r3, #4
 8002f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f48:	4413      	add	r3, r2
 8002f4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	2200      	movs	r2, #0
 8002f54:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	785b      	ldrb	r3, [r3, #1]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d126      	bne.n	8002fb2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	4413      	add	r3, r2
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	011a      	lsls	r2, r3, #4
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f8a:	61bb      	str	r3, [r7, #24]
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	801a      	strh	r2, [r3, #0]
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	801a      	strh	r2, [r3, #0]
 8002fb0:	e017      	b.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	785b      	ldrb	r3, [r3, #1]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d113      	bne.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	4413      	add	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	011a      	lsls	r2, r3, #4
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fda:	623b      	str	r3, [r7, #32]
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f005 f966 	bl	80082ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002fee:	88fb      	ldrh	r3, [r7, #6]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 82fc 	beq.w	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	b29b      	uxth	r3, r3
 800300c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003010:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003014:	82fb      	strh	r3, [r7, #22]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	441a      	add	r2, r3
 8003024:	8afb      	ldrh	r3, [r7, #22]
 8003026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800302a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800302e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
 800303a:	e2da      	b.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d021      	beq.n	800308a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	b29b      	uxth	r3, r3
 8003058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800305c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003060:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	441a      	add	r2, r3
 8003072:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800307a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800307e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003086:	b29b      	uxth	r3, r3
 8003088:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003090:	2b01      	cmp	r3, #1
 8003092:	f040 82ae 	bne.w	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800309e:	441a      	add	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030ac:	441a      	add	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	6a1a      	ldr	r2, [r3, #32]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d30b      	bcc.n	80030d6 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6a1a      	ldr	r2, [r3, #32]
 80030ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030ce:	1ad2      	subs	r2, r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	621a      	str	r2, [r3, #32]
 80030d4:	e017      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80030de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80030e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80030ee:	e00a      	b.n	8003106 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2200      	movs	r2, #0
 8003104:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	785b      	ldrb	r3, [r3, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d165      	bne.n	80031da <HAL_PCD_EP_DB_Transmit+0x382>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800311c:	b29b      	uxth	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003122:	4413      	add	r3, r2
 8003124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	011a      	lsls	r2, r3, #4
 800312c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800312e:	4413      	add	r3, r2
 8003130:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003134:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	b29b      	uxth	r3, r3
 800313c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003140:	b29a      	uxth	r2, r3
 8003142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314a:	2b3e      	cmp	r3, #62	@ 0x3e
 800314c:	d91d      	bls.n	800318a <HAL_PCD_EP_DB_Transmit+0x332>
 800314e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_PCD_EP_DB_Transmit+0x310>
 8003162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003164:	3b01      	subs	r3, #1
 8003166:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	b29a      	uxth	r2, r3
 800316e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003170:	b29b      	uxth	r3, r3
 8003172:	029b      	lsls	r3, r3, #10
 8003174:	b29b      	uxth	r3, r3
 8003176:	4313      	orrs	r3, r2
 8003178:	b29b      	uxth	r3, r3
 800317a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800317e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003182:	b29a      	uxth	r2, r3
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	801a      	strh	r2, [r3, #0]
 8003188:	e044      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800318a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <HAL_PCD_EP_DB_Transmit+0x350>
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29b      	uxth	r3, r3
 8003198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	e035      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_PCD_EP_DB_Transmit+0x36a>
 80031bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031be:	3301      	adds	r3, #1
 80031c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80031c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	029b      	lsls	r3, r3, #10
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4313      	orrs	r3, r2
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	e01c      	b.n	8003214 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d118      	bne.n	8003214 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f6:	4413      	add	r3, r2
 80031f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	011a      	lsls	r2, r3, #4
 8003200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003202:	4413      	add	r3, r2
 8003204:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
 800320a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800320e:	b29a      	uxth	r2, r3
 8003210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003212:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	6959      	ldr	r1, [r3, #20]
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	891a      	ldrh	r2, [r3, #8]
 8003220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003224:	b29b      	uxth	r3, r3
 8003226:	f003 f9e8 	bl	80065fa <USB_WritePMA>
 800322a:	e1e2      	b.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	3306      	adds	r3, #6
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003254:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003260:	429a      	cmp	r2, r3
 8003262:	d307      	bcc.n	8003274 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800326c:	1ad2      	subs	r2, r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	619a      	str	r2, [r3, #24]
 8003272:	e002      	b.n	800327a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f040 80c0 	bne.w	8003404 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	785b      	ldrb	r3, [r3, #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d126      	bne.n	80032da <HAL_PCD_EP_DB_Transmit+0x482>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800329a:	b29b      	uxth	r3, r3
 800329c:	461a      	mov	r2, r3
 800329e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032a0:	4413      	add	r3, r2
 80032a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	011a      	lsls	r2, r3, #4
 80032aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80032ac:	4413      	add	r3, r2
 80032ae:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80032b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032be:	b29a      	uxth	r2, r3
 80032c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c2:	801a      	strh	r2, [r3, #0]
 80032c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032d6:	801a      	strh	r2, [r3, #0]
 80032d8:	e01a      	b.n	8003310 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	785b      	ldrb	r3, [r3, #1]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d116      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032f6:	4413      	add	r3, r2
 80032f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	011a      	lsls	r2, r3, #4
 8003300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003302:	4413      	add	r3, r2
 8003304:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003308:	663b      	str	r3, [r7, #96]	@ 0x60
 800330a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800330c:	2200      	movs	r2, #0
 800330e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	677b      	str	r3, [r7, #116]	@ 0x74
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	785b      	ldrb	r3, [r3, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d12b      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0x51e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800332c:	b29b      	uxth	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003332:	4413      	add	r3, r2
 8003334:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	011a      	lsls	r2, r3, #4
 800333c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800333e:	4413      	add	r3, r2
 8003340:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003348:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003354:	b29a      	uxth	r2, r3
 8003356:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800335a:	801a      	strh	r2, [r3, #0]
 800335c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800336c:	b29a      	uxth	r2, r3
 800336e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003372:	801a      	strh	r2, [r3, #0]
 8003374:	e017      	b.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	785b      	ldrb	r3, [r3, #1]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d113      	bne.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x54e>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003386:	b29b      	uxth	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800338c:	4413      	add	r3, r2
 800338e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	011a      	lsls	r2, r3, #4
 8003396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003398:	4413      	add	r3, r2
 800339a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800339e:	673b      	str	r3, [r7, #112]	@ 0x70
 80033a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a2:	2200      	movs	r2, #0
 80033a4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	4619      	mov	r1, r3
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f004 ff84 	bl	80082ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 811a 	bne.w	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033d8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80033ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80033fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033fe:	b29b      	uxth	r3, r3
 8003400:	8013      	strh	r3, [r2, #0]
 8003402:	e0f6      	b.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d121      	bne.n	8003452 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	b29b      	uxth	r3, r3
 8003420:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003428:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	461a      	mov	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	441a      	add	r2, r3
 800343a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003446:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800344a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 80ca 	bne.w	80035f2 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	695a      	ldr	r2, [r3, #20]
 8003462:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003466:	441a      	add	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003474:	441a      	add	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6a1a      	ldr	r2, [r3, #32]
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d30b      	bcc.n	800349e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	6a1a      	ldr	r2, [r3, #32]
 8003492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003496:	1ad2      	subs	r2, r2, r3
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	621a      	str	r2, [r3, #32]
 800349c:	e017      	b.n	80034ce <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80034a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80034aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80034b6:	e00a      	b.n	80034ce <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2200      	movs	r2, #0
 80034c4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	785b      	ldrb	r3, [r3, #1]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d165      	bne.n	80035a8 <HAL_PCD_EP_DB_Transmit+0x750>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034f0:	4413      	add	r3, r2
 80034f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	011a      	lsls	r2, r3, #4
 80034fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034fc:	4413      	add	r3, r2
 80034fe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350e:	b29a      	uxth	r2, r3
 8003510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003512:	801a      	strh	r2, [r3, #0]
 8003514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003518:	2b3e      	cmp	r3, #62	@ 0x3e
 800351a:	d91d      	bls.n	8003558 <HAL_PCD_EP_DB_Transmit+0x700>
 800351c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003520:	095b      	lsrs	r3, r3, #5
 8003522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003524:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_PCD_EP_DB_Transmit+0x6de>
 8003530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003532:	3b01      	subs	r3, #1
 8003534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	b29a      	uxth	r2, r3
 800353c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800353e:	b29b      	uxth	r3, r3
 8003540:	029b      	lsls	r3, r3, #10
 8003542:	b29b      	uxth	r3, r3
 8003544:	4313      	orrs	r3, r2
 8003546:	b29b      	uxth	r3, r3
 8003548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800354c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003550:	b29a      	uxth	r2, r3
 8003552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	e041      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x784>
 8003558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10a      	bne.n	8003576 <HAL_PCD_EP_DB_Transmit+0x71e>
 8003560:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356e:	b29a      	uxth	r2, r3
 8003570:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	e032      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x784>
 8003576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800357e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <HAL_PCD_EP_DB_Transmit+0x738>
 800358a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800358c:	3301      	adds	r3, #1
 800358e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003590:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29a      	uxth	r2, r3
 8003596:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003598:	b29b      	uxth	r3, r3
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	b29b      	uxth	r3, r3
 800359e:	4313      	orrs	r3, r2
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035a4:	801a      	strh	r2, [r3, #0]
 80035a6:	e019      	b.n	80035dc <HAL_PCD_EP_DB_Transmit+0x784>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	785b      	ldrb	r3, [r3, #1]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d115      	bne.n	80035dc <HAL_PCD_EP_DB_Transmit+0x784>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	4413      	add	r3, r2
 80035c0:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	011a      	lsls	r2, r3, #4
 80035c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ca:	4413      	add	r3, r2
 80035cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80035d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035da:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6818      	ldr	r0, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6959      	ldr	r1, [r3, #20]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	895a      	ldrh	r2, [r3, #10]
 80035e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f003 f804 	bl	80065fa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360c:	82bb      	strh	r3, [r7, #20]
 800360e:	8abb      	ldrh	r3, [r7, #20]
 8003610:	f083 0310 	eor.w	r3, r3, #16
 8003614:	82bb      	strh	r3, [r7, #20]
 8003616:	8abb      	ldrh	r3, [r7, #20]
 8003618:	f083 0320 	eor.w	r3, r3, #32
 800361c:	82bb      	strh	r3, [r7, #20]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	441a      	add	r2, r3
 800362c:	8abb      	ldrh	r3, [r7, #20]
 800362e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003632:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800363a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363e:	b29b      	uxth	r3, r3
 8003640:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3790      	adds	r7, #144	@ 0x90
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	4613      	mov	r3, r2
 800365c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800365e:	897b      	ldrh	r3, [r7, #10]
 8003660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003664:	b29b      	uxth	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00b      	beq.n	8003682 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	f003 0207 	and.w	r2, r3, #7
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3310      	adds	r3, #16
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	e009      	b.n	8003696 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003682:	897a      	ldrh	r2, [r7, #10]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4413      	add	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d107      	bne.n	80036ac <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	80da      	strh	r2, [r3, #6]
 80036aa:	e00b      	b.n	80036c4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2201      	movs	r2, #1
 80036b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	b29a      	uxth	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bc80      	pop	{r7}
 80036ce:	4770      	bx	lr

080036d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e272      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8087 	beq.w	80037fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f0:	4b92      	ldr	r3, [pc, #584]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d00c      	beq.n	8003716 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036fc:	4b8f      	ldr	r3, [pc, #572]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d112      	bne.n	800372e <HAL_RCC_OscConfig+0x5e>
 8003708:	4b8c      	ldr	r3, [pc, #560]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003714:	d10b      	bne.n	800372e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	4b89      	ldr	r3, [pc, #548]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d06c      	beq.n	80037fc <HAL_RCC_OscConfig+0x12c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d168      	bne.n	80037fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e24c      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x76>
 8003738:	4b80      	ldr	r3, [pc, #512]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a7f      	ldr	r2, [pc, #508]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e02e      	b.n	80037a4 <HAL_RCC_OscConfig+0xd4>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x98>
 800374e:	4b7b      	ldr	r3, [pc, #492]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7a      	ldr	r2, [pc, #488]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b78      	ldr	r3, [pc, #480]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a77      	ldr	r2, [pc, #476]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xd4>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xbc>
 8003772:	4b72      	ldr	r3, [pc, #456]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a71      	ldr	r2, [pc, #452]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b6f      	ldr	r3, [pc, #444]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6e      	ldr	r2, [pc, #440]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xd4>
 800378c:	4b6b      	ldr	r3, [pc, #428]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6a      	ldr	r2, [pc, #424]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b68      	ldr	r3, [pc, #416]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a67      	ldr	r2, [pc, #412]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fd ff7c 	bl	80016a8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fd ff78 	bl	80016a8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	@ 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e200      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b5d      	ldr	r3, [pc, #372]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe4>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd ff68 	bl	80016a8 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fd ff64 	bl	80016a8 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	@ 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e1ec      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b53      	ldr	r3, [pc, #332]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x10c>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d063      	beq.n	80038d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380a:	4b4c      	ldr	r3, [pc, #304]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003816:	4b49      	ldr	r3, [pc, #292]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x18c>
 8003822:	4b46      	ldr	r3, [pc, #280]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b43      	ldr	r3, [pc, #268]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x176>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1c0      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b3d      	ldr	r3, [pc, #244]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4939      	ldr	r1, [pc, #228]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e03a      	b.n	80038d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b36      	ldr	r3, [pc, #216]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fd ff1d 	bl	80016a8 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003872:	f7fd ff19 	bl	80016a8 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e1a1      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003884:	4b2d      	ldr	r3, [pc, #180]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003890:	4b2a      	ldr	r3, [pc, #168]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4927      	ldr	r1, [pc, #156]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	600b      	str	r3, [r1, #0]
 80038a4:	e015      	b.n	80038d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a6:	4b26      	ldr	r3, [pc, #152]	@ (8003940 <HAL_RCC_OscConfig+0x270>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fd fefc 	bl	80016a8 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b4:	f7fd fef8 	bl	80016a8 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e180      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d03a      	beq.n	8003954 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d019      	beq.n	800391a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e6:	4b17      	ldr	r3, [pc, #92]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fd fedc 	bl	80016a8 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fd fed8 	bl	80016a8 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e160      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003906:	4b0d      	ldr	r3, [pc, #52]	@ (800393c <HAL_RCC_OscConfig+0x26c>)
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003912:	2001      	movs	r0, #1
 8003914:	f000 fa9c 	bl	8003e50 <RCC_Delay>
 8003918:	e01c      	b.n	8003954 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003920:	f7fd fec2 	bl	80016a8 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003926:	e00f      	b.n	8003948 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003928:	f7fd febe 	bl	80016a8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d908      	bls.n	8003948 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e146      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	42420000 	.word	0x42420000
 8003944:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	4b92      	ldr	r3, [pc, #584]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 800394a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e9      	bne.n	8003928 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a6 	beq.w	8003aae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b8b      	ldr	r3, [pc, #556]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10d      	bne.n	800398e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	4b88      	ldr	r3, [pc, #544]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	4a87      	ldr	r2, [pc, #540]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800397c:	61d3      	str	r3, [r2, #28]
 800397e:	4b85      	ldr	r3, [pc, #532]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398e:	4b82      	ldr	r3, [pc, #520]	@ (8003b98 <HAL_RCC_OscConfig+0x4c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d118      	bne.n	80039cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b98 <HAL_RCC_OscConfig+0x4c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a7e      	ldr	r2, [pc, #504]	@ (8003b98 <HAL_RCC_OscConfig+0x4c8>)
 80039a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a6:	f7fd fe7f 	bl	80016a8 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ae:	f7fd fe7b 	bl	80016a8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b64      	cmp	r3, #100	@ 0x64
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e103      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c0:	4b75      	ldr	r3, [pc, #468]	@ (8003b98 <HAL_RCC_OscConfig+0x4c8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <HAL_RCC_OscConfig+0x312>
 80039d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6213      	str	r3, [r2, #32]
 80039e0:	e02d      	b.n	8003a3e <HAL_RCC_OscConfig+0x36e>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10c      	bne.n	8003a04 <HAL_RCC_OscConfig+0x334>
 80039ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a69      	ldr	r2, [pc, #420]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	4b67      	ldr	r3, [pc, #412]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a66      	ldr	r2, [pc, #408]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	6213      	str	r3, [r2, #32]
 8003a02:	e01c      	b.n	8003a3e <HAL_RCC_OscConfig+0x36e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b05      	cmp	r3, #5
 8003a0a:	d10c      	bne.n	8003a26 <HAL_RCC_OscConfig+0x356>
 8003a0c:	4b61      	ldr	r3, [pc, #388]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a60      	ldr	r2, [pc, #384]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	4b5e      	ldr	r3, [pc, #376]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6213      	str	r3, [r2, #32]
 8003a24:	e00b      	b.n	8003a3e <HAL_RCC_OscConfig+0x36e>
 8003a26:	4b5b      	ldr	r3, [pc, #364]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6213      	str	r3, [r2, #32]
 8003a32:	4b58      	ldr	r3, [pc, #352]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	4a57      	ldr	r2, [pc, #348]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d015      	beq.n	8003a72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a46:	f7fd fe2f 	bl	80016a8 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	e00a      	b.n	8003a64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fd fe2b 	bl	80016a8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e0b1      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a64:	4b4b      	ldr	r3, [pc, #300]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0ee      	beq.n	8003a4e <HAL_RCC_OscConfig+0x37e>
 8003a70:	e014      	b.n	8003a9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a72:	f7fd fe19 	bl	80016a8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	e00a      	b.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd fe15 	bl	80016a8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e09b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a90:	4b40      	ldr	r3, [pc, #256]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1ee      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a9c:	7dfb      	ldrb	r3, [r7, #23]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d105      	bne.n	8003aae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	4a3b      	ldr	r2, [pc, #236]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8087 	beq.w	8003bc6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab8:	4b36      	ldr	r3, [pc, #216]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 030c 	and.w	r3, r3, #12
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d061      	beq.n	8003b88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d146      	bne.n	8003b5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003acc:	4b33      	ldr	r3, [pc, #204]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fde9 	bl	80016a8 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ada:	f7fd fde5 	bl	80016a8 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e06d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aec:	4b29      	ldr	r3, [pc, #164]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d108      	bne.n	8003b14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4921      	ldr	r1, [pc, #132]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b14:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a19      	ldr	r1, [r3, #32]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	430b      	orrs	r3, r1
 8003b26:	491b      	ldr	r1, [pc, #108]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b32:	f7fd fdb9 	bl	80016a8 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3a:	f7fd fdb5 	bl	80016a8 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e03d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b4c:	4b11      	ldr	r3, [pc, #68]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0f0      	beq.n	8003b3a <HAL_RCC_OscConfig+0x46a>
 8003b58:	e035      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b10      	ldr	r3, [pc, #64]	@ (8003b9c <HAL_RCC_OscConfig+0x4cc>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd fda2 	bl	80016a8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fd fd9e 	bl	80016a8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e026      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7a:	4b06      	ldr	r3, [pc, #24]	@ (8003b94 <HAL_RCC_OscConfig+0x4c4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x498>
 8003b86:	e01e      	b.n	8003bc6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d107      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e019      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
 8003b94:	40021000 	.word	0x40021000
 8003b98:	40007000 	.word	0x40007000
 8003b9c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_OscConfig+0x500>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d001      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40021000 	.word	0x40021000

08003bd4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0d0      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be8:	4b6a      	ldr	r3, [pc, #424]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d910      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b67      	ldr	r3, [pc, #412]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 0207 	bic.w	r2, r3, #7
 8003bfe:	4965      	ldr	r1, [pc, #404]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b63      	ldr	r3, [pc, #396]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0b8      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d020      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c30:	4b59      	ldr	r3, [pc, #356]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a58      	ldr	r2, [pc, #352]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c48:	4b53      	ldr	r3, [pc, #332]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	4a52      	ldr	r2, [pc, #328]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c54:	4b50      	ldr	r3, [pc, #320]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	494d      	ldr	r1, [pc, #308]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d040      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7a:	4b47      	ldr	r3, [pc, #284]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d115      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e07f      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c92:	4b41      	ldr	r3, [pc, #260]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d109      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e073      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e06b      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb2:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f023 0203 	bic.w	r2, r3, #3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	4936      	ldr	r1, [pc, #216]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fcf0 	bl	80016a8 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ccc:	f7fd fcec 	bl	80016a8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e053      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f003 020c 	and.w	r2, r3, #12
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d1eb      	bne.n	8003ccc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b27      	ldr	r3, [pc, #156]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0307 	and.w	r3, r3, #7
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d210      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b24      	ldr	r3, [pc, #144]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 0207 	bic.w	r2, r3, #7
 8003d0a:	4922      	ldr	r1, [pc, #136]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b20      	ldr	r3, [pc, #128]	@ (8003d94 <HAL_RCC_ClockConfig+0x1c0>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e032      	b.n	8003d8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d30:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	4916      	ldr	r1, [pc, #88]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	490e      	ldr	r1, [pc, #56]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d62:	f000 f821 	bl	8003da8 <HAL_RCC_GetSysClockFreq>
 8003d66:	4602      	mov	r2, r0
 8003d68:	4b0b      	ldr	r3, [pc, #44]	@ (8003d98 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	490a      	ldr	r1, [pc, #40]	@ (8003d9c <HAL_RCC_ClockConfig+0x1c8>)
 8003d74:	5ccb      	ldrb	r3, [r1, r3]
 8003d76:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7a:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <HAL_RCC_ClockConfig+0x1cc>)
 8003d7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d7e:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <HAL_RCC_ClockConfig+0x1d0>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fd fc4e 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	40022000 	.word	0x40022000
 8003d98:	40021000 	.word	0x40021000
 8003d9c:	0800883c 	.word	0x0800883c
 8003da0:	20000000 	.word	0x20000000
 8003da4:	2000000c 	.word	0x2000000c

08003da8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f003 030c 	and.w	r3, r3, #12
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x36>
 8003dd6:	e027      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dd8:	4b19      	ldr	r3, [pc, #100]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dda:	613b      	str	r3, [r7, #16]
      break;
 8003ddc:	e027      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0c9b      	lsrs	r3, r3, #18
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	4a17      	ldr	r2, [pc, #92]	@ (8003e44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003de8:	5cd3      	ldrb	r3, [r2, r3]
 8003dea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d010      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003df6:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	0c5b      	lsrs	r3, r3, #17
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	4a11      	ldr	r2, [pc, #68]	@ (8003e48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e02:	5cd3      	ldrb	r3, [r2, r3]
 8003e04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e0a:	fb03 f202 	mul.w	r2, r3, r2
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	e004      	b.n	8003e22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003e4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e1c:	fb02 f303 	mul.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	613b      	str	r3, [r7, #16]
      break;
 8003e26:	e002      	b.n	8003e2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e28:	4b05      	ldr	r3, [pc, #20]	@ (8003e40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e2a:	613b      	str	r3, [r7, #16]
      break;
 8003e2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2e:	693b      	ldr	r3, [r7, #16]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	40021000 	.word	0x40021000
 8003e40:	007a1200 	.word	0x007a1200
 8003e44:	0800884c 	.word	0x0800884c
 8003e48:	0800885c 	.word	0x0800885c
 8003e4c:	003d0900 	.word	0x003d0900

08003e50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e58:	4b0a      	ldr	r3, [pc, #40]	@ (8003e84 <RCC_Delay+0x34>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e88 <RCC_Delay+0x38>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	0a5b      	lsrs	r3, r3, #9
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e6c:	bf00      	nop
  }
  while (Delay --);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	1e5a      	subs	r2, r3, #1
 8003e72:	60fa      	str	r2, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1f9      	bne.n	8003e6c <RCC_Delay+0x1c>
}
 8003e78:	bf00      	nop
 8003e7a:	bf00      	nop
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bc80      	pop	{r7}
 8003e82:	4770      	bx	lr
 8003e84:	20000000 	.word	0x20000000
 8003e88:	10624dd3 	.word	0x10624dd3

08003e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d07d      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eac:	4b4f      	ldr	r3, [pc, #316]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ec2:	61d3      	str	r3, [r2, #28]
 8003ec4:	4b49      	ldr	r3, [pc, #292]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed4:	4b46      	ldr	r3, [pc, #280]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d118      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ee0:	4b43      	ldr	r3, [pc, #268]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a42      	ldr	r2, [pc, #264]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eec:	f7fd fbdc 	bl	80016a8 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef2:	e008      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef4:	f7fd fbd8 	bl	80016a8 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e06d      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f06:	4b3a      	ldr	r3, [pc, #232]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f12:	4b36      	ldr	r3, [pc, #216]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d027      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f30:	4b2e      	ldr	r3, [pc, #184]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f40:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f46:	4a29      	ldr	r2, [pc, #164]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d014      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f56:	f7fd fba7 	bl	80016a8 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fd fba3 	bl	80016a8 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e036      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	4b1d      	ldr	r3, [pc, #116]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ee      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f80:	4b1a      	ldr	r3, [pc, #104]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4917      	ldr	r1, [pc, #92]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f92:	7dfb      	ldrb	r3, [r7, #23]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d105      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f98:	4b14      	ldr	r3, [pc, #80]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fa2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d008      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	490b      	ldr	r1, [pc, #44]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0310 	and.w	r3, r3, #16
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d008      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fce:	4b07      	ldr	r3, [pc, #28]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	4904      	ldr	r1, [pc, #16]	@ (8003fec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42420440 	.word	0x42420440

08003ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	4638      	mov	r0, r7
 8004002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr

08004012 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004022:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8004026:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	b29a      	uxth	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr

0800403e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800403e:	b480      	push	{r7}
 8004040:	b085      	sub	sp, #20
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004046:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800404a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	b29b      	uxth	r3, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	4013      	ands	r3, r2
 800405e:	b29a      	uxth	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	4638      	mov	r0, r7
 8004094:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b09d      	sub	sp, #116	@ 0x74
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80040ce:	2300      	movs	r3, #0
 80040d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80040e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	78db      	ldrb	r3, [r3, #3]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d81f      	bhi.n	8004136 <USB_ActivateEndpoint+0x72>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <USB_ActivateEndpoint+0x38>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004129 	.word	0x08004129
 8004104:	0800413f 	.word	0x0800413f
 8004108:	0800411b 	.word	0x0800411b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800410c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004110:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004114:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004118:	e012      	b.n	8004140 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800411a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800411e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8004122:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004126:	e00b      	b.n	8004140 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004128:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800412c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004130:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8004134:	e004      	b.n	8004140 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800413c:	e000      	b.n	8004140 <USB_ActivateEndpoint+0x7c>
      break;
 800413e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800414e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800415a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800415e:	b29b      	uxth	r3, r3
 8004160:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	b29b      	uxth	r3, r3
 8004170:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004178:	b29b      	uxth	r3, r3
 800417a:	683a      	ldr	r2, [r7, #0]
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004192:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004196:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800419a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	7b1b      	ldrb	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 8178 	bne.w	80044a0 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8084 	beq.w	80042c2 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	461a      	mov	r2, r3
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	4413      	add	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	011a      	lsls	r2, r3, #4
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	88db      	ldrh	r3, [r3, #6]
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	827b      	strh	r3, [r7, #18]
 80041fc:	8a7b      	ldrh	r3, [r7, #18]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01b      	beq.n	800423e <USB_ActivateEndpoint+0x17a>
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	823b      	strh	r3, [r7, #16]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	441a      	add	r2, r3
 8004228:	8a3b      	ldrh	r3, [r7, #16]
 800422a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800422e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800423a:	b29b      	uxth	r3, r3
 800423c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	78db      	ldrb	r3, [r3, #3]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d020      	beq.n	8004288 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	b29b      	uxth	r3, r3
 8004254:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425c:	81bb      	strh	r3, [r7, #12]
 800425e:	89bb      	ldrh	r3, [r7, #12]
 8004260:	f083 0320 	eor.w	r3, r3, #32
 8004264:	81bb      	strh	r3, [r7, #12]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	89bb      	ldrh	r3, [r7, #12]
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800427e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]
 8004286:	e2d5      	b.n	8004834 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	b29b      	uxth	r3, r3
 8004296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800429a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800429e:	81fb      	strh	r3, [r7, #14]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	441a      	add	r2, r3
 80042aa:	89fb      	ldrh	r3, [r7, #14]
 80042ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042bc:	b29b      	uxth	r3, r3
 80042be:	8013      	strh	r3, [r2, #0]
 80042c0:	e2b8      	b.n	8004834 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	461a      	mov	r2, r3
 80042d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d2:	4413      	add	r3, r2
 80042d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	011a      	lsls	r2, r3, #4
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	4413      	add	r3, r2
 80042e0:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80042e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	88db      	ldrh	r3, [r3, #6]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	b29a      	uxth	r2, r3
 80042f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004300:	b29b      	uxth	r3, r3
 8004302:	461a      	mov	r2, r3
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	4413      	add	r3, r2
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	011a      	lsls	r2, r3, #4
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	4413      	add	r3, r2
 8004314:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	b29b      	uxth	r3, r3
 8004320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004324:	b29a      	uxth	r2, r3
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004330:	d91d      	bls.n	800436e <USB_ActivateEndpoint+0x2aa>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <USB_ActivateEndpoint+0x288>
 8004346:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004348:	3b01      	subs	r3, #1
 800434a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29a      	uxth	r2, r3
 8004352:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004354:	b29b      	uxth	r3, r3
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	b29b      	uxth	r3, r3
 800435a:	4313      	orrs	r3, r2
 800435c:	b29b      	uxth	r3, r3
 800435e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004366:	b29a      	uxth	r2, r3
 8004368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e026      	b.n	80043bc <USB_ActivateEndpoint+0x2f8>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <USB_ActivateEndpoint+0x2c8>
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004384:	b29a      	uxth	r2, r3
 8004386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004388:	801a      	strh	r2, [r3, #0]
 800438a:	e017      	b.n	80043bc <USB_ActivateEndpoint+0x2f8>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <USB_ActivateEndpoint+0x2e2>
 80043a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043a2:	3301      	adds	r3, #1
 80043a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80043ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80043cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <USB_ActivateEndpoint+0x348>
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	843b      	strh	r3, [r7, #32]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	441a      	add	r2, r3
 80043f6:	8c3b      	ldrh	r3, [r7, #32]
 80043f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004400:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004408:	b29b      	uxth	r3, r3
 800440a:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d124      	bne.n	800445e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	4413      	add	r3, r2
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29b      	uxth	r3, r3
 8004422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800442a:	83bb      	strh	r3, [r7, #28]
 800442c:	8bbb      	ldrh	r3, [r7, #28]
 800442e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004432:	83bb      	strh	r3, [r7, #28]
 8004434:	8bbb      	ldrh	r3, [r7, #28]
 8004436:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800443a:	83bb      	strh	r3, [r7, #28]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	441a      	add	r2, r3
 8004446:	8bbb      	ldrh	r3, [r7, #28]
 8004448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800444c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004458:	b29b      	uxth	r3, r3
 800445a:	8013      	strh	r3, [r2, #0]
 800445c:	e1ea      	b.n	8004834 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4413      	add	r3, r2
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004474:	83fb      	strh	r3, [r7, #30]
 8004476:	8bfb      	ldrh	r3, [r7, #30]
 8004478:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800447c:	83fb      	strh	r3, [r7, #30]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	441a      	add	r2, r3
 8004488:	8bfb      	ldrh	r3, [r7, #30]
 800448a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800448e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800449a:	b29b      	uxth	r3, r3
 800449c:	8013      	strh	r3, [r2, #0]
 800449e:	e1c9      	b.n	8004834 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d11e      	bne.n	80044e6 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044be:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	441a      	add	r2, r3
 80044cc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044d8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80044dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]
 80044e4:	e01d      	b.n	8004522 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80044f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fc:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	441a      	add	r2, r3
 800450a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452c:	b29b      	uxth	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004532:	4413      	add	r3, r2
 8004534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	011a      	lsls	r2, r3, #4
 800453c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800453e:	4413      	add	r3, r2
 8004540:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004544:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	891b      	ldrh	r3, [r3, #8]
 800454a:	085b      	lsrs	r3, r3, #1
 800454c:	b29b      	uxth	r3, r3
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	b29a      	uxth	r2, r3
 8004552:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	657b      	str	r3, [r7, #84]	@ 0x54
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004566:	4413      	add	r3, r2
 8004568:	657b      	str	r3, [r7, #84]	@ 0x54
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	011a      	lsls	r2, r3, #4
 8004570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004572:	4413      	add	r3, r2
 8004574:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004578:	653b      	str	r3, [r7, #80]	@ 0x50
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	895b      	ldrh	r3, [r3, #10]
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	b29b      	uxth	r3, r3
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004588:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 8093 	bne.w	80046ba <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80045a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80045a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01b      	beq.n	80045e8 <USB_ActivateEndpoint+0x524>
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	881b      	ldrh	r3, [r3, #0]
 80045bc:	b29b      	uxth	r3, r3
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80045d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80045d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80045dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4413      	add	r3, r2
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80045f6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80045f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01b      	beq.n	8004638 <USB_ActivateEndpoint+0x574>
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004616:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800462c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004630:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004634:	b29b      	uxth	r3, r3
 8004636:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	881b      	ldrh	r3, [r3, #0]
 8004644:	b29b      	uxth	r3, r3
 8004646:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004650:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004652:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004656:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004658:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800465a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800465e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800466c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004670:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800467c:	b29b      	uxth	r3, r3
 800467e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004692:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004696:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	441a      	add	r2, r3
 80046a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80046a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	8013      	strh	r3, [r2, #0]
 80046b8:	e0bc      	b.n	8004834 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80046ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80046ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d01d      	beq.n	8004712 <USB_ActivateEndpoint+0x64e>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ec:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004722:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d01d      	beq.n	800476a <USB_ActivateEndpoint+0x6a6>
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004740:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004744:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	441a      	add	r2, r3
 8004752:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004756:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800475a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800475e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004762:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004766:	b29b      	uxth	r3, r3
 8004768:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	78db      	ldrb	r3, [r3, #3]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d024      	beq.n	80047bc <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004788:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800478c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004790:	f083 0320 	eor.w	r3, r3, #32
 8004794:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	441a      	add	r2, r3
 80047a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
 80047ba:	e01d      	b.n	80047f8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	441a      	add	r2, r3
 80047e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80047e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800480a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800480e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	441a      	add	r2, r3
 800481c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004830:	b29b      	uxth	r3, r3
 8004832:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004834:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004838:	4618      	mov	r0, r3
 800483a:	3774      	adds	r7, #116	@ 0x74
 800483c:	46bd      	mov	sp, r7
 800483e:	bc80      	pop	{r7}
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop

08004844 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004844:	b480      	push	{r7}
 8004846:	b08d      	sub	sp, #52	@ 0x34
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	7b1b      	ldrb	r3, [r3, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f040 808e 	bne.w	8004974 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	785b      	ldrb	r3, [r3, #1]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d044      	beq.n	80048ea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	881b      	ldrh	r3, [r3, #0]
 800486c:	81bb      	strh	r3, [r7, #12]
 800486e:	89bb      	ldrh	r3, [r7, #12]
 8004870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01b      	beq.n	80048b0 <USB_DeactivateEndpoint+0x6c>
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800488e:	817b      	strh	r3, [r7, #10]
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	897b      	ldrh	r3, [r7, #10]
 800489c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	b29b      	uxth	r3, r3
 80048be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80048c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048c6:	813b      	strh	r3, [r7, #8]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	441a      	add	r2, r3
 80048d2:	893b      	ldrh	r3, [r7, #8]
 80048d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80048d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80048dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80048e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	8013      	strh	r3, [r2, #0]
 80048e8:	e192      	b.n	8004c10 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	881b      	ldrh	r3, [r3, #0]
 80048f6:	827b      	strh	r3, [r7, #18]
 80048f8:	8a7b      	ldrh	r3, [r7, #18]
 80048fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01b      	beq.n	800493a <USB_DeactivateEndpoint+0xf6>
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004918:	823b      	strh	r3, [r7, #16]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	441a      	add	r2, r3
 8004924:	8a3b      	ldrh	r3, [r7, #16]
 8004926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800492a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800492e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004936:	b29b      	uxth	r3, r3
 8004938:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	b29b      	uxth	r3, r3
 8004948:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800494c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004950:	81fb      	strh	r3, [r7, #14]
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	89fb      	ldrh	r3, [r7, #14]
 800495e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800496a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496e:	b29b      	uxth	r3, r3
 8004970:	8013      	strh	r3, [r2, #0]
 8004972:	e14d      	b.n	8004c10 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 80a5 	bne.w	8004ac8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	843b      	strh	r3, [r7, #32]
 800498c:	8c3b      	ldrh	r3, [r7, #32]
 800498e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01b      	beq.n	80049ce <USB_DeactivateEndpoint+0x18a>
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ac:	83fb      	strh	r3, [r7, #30]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	441a      	add	r2, r3
 80049b8:	8bfb      	ldrh	r3, [r7, #30]
 80049ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	83bb      	strh	r3, [r7, #28]
 80049dc:	8bbb      	ldrh	r3, [r7, #28]
 80049de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01b      	beq.n	8004a1e <USB_DeactivateEndpoint+0x1da>
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fc:	837b      	strh	r3, [r7, #26]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	8b7b      	ldrh	r3, [r7, #26]
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a34:	833b      	strh	r3, [r7, #24]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	8b3b      	ldrh	r3, [r7, #24]
 8004a42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a4e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6c:	82fb      	strh	r3, [r7, #22]
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	441a      	add	r2, r3
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa4:	82bb      	strh	r3, [r7, #20]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	441a      	add	r2, r3
 8004ab0:	8abb      	ldrh	r3, [r7, #20]
 8004ab2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ab6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8013      	strh	r3, [r2, #0]
 8004ac6:	e0a3      	b.n	8004c10 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8004ad6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8004ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <USB_DeactivateEndpoint+0x2d4>
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	441a      	add	r2, r3
 8004b02:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8004b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8004b26:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <USB_DeactivateEndpoint+0x324>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b46:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b60:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	441a      	add	r2, r3
 8004b8a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004b8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bb6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004bc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bee:	847b      	strh	r3, [r7, #34]	@ 0x22
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	441a      	add	r2, r3
 8004bfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004bfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3734      	adds	r7, #52	@ 0x34
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b0c2      	sub	sp, #264	@ 0x108
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004c2a:	6018      	str	r0, [r3, #0]
 8004c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c34:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	f040 86b7 	bne.w	80059b6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699a      	ldr	r2, [r3, #24]
 8004c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d908      	bls.n	8004c76 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004c74:	e007      	b.n	8004c86 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004c86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	7b1b      	ldrb	r3, [r3, #12]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d13a      	bne.n	8004d0c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6959      	ldr	r1, [r3, #20]
 8004ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	88da      	ldrh	r2, [r3, #6]
 8004cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004cb8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f001 fc9c 	bl	80065fa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
 8004ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	011a      	lsls	r2, r3, #4
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	f000 be1f 	b.w	800594a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	78db      	ldrb	r3, [r3, #3]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	f040 8462 	bne.w	80055e2 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f240 83df 	bls.w	80054fa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8004d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8004d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d8c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6a1a      	ldr	r2, [r3, #32]
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004db6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	881b      	ldrh	r3, [r3, #0]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f000 81c7 	beq.w	800516c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	785b      	ldrb	r3, [r3, #1]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d177      	bne.n	8004eea <USB_EPStartXfer+0x2ce>
 8004dfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004dfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	461a      	mov	r2, r3
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	4413      	add	r3, r2
 8004e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	011a      	lsls	r2, r3, #4
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	4413      	add	r3, r2
 8004e30:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4a:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e4c:	d921      	bls.n	8004e92 <USB_EPStartXfer+0x276>
 8004e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e52:	095b      	lsrs	r3, r3, #5
 8004e54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <USB_EPStartXfer+0x252>
 8004e64:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	029b      	lsls	r3, r3, #10
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8e:	801a      	strh	r2, [r3, #0]
 8004e90:	e050      	b.n	8004f34 <USB_EPStartXfer+0x318>
 8004e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10a      	bne.n	8004eb0 <USB_EPStartXfer+0x294>
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eac:	801a      	strh	r2, [r3, #0]
 8004eae:	e041      	b.n	8004f34 <USB_EPStartXfer+0x318>
 8004eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d004      	beq.n	8004ed0 <USB_EPStartXfer+0x2b4>
 8004ec6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004eca:	3301      	adds	r3, #1
 8004ecc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	029b      	lsls	r3, r3, #10
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	801a      	strh	r2, [r3, #0]
 8004ee8:	e024      	b.n	8004f34 <USB_EPStartXfer+0x318>
 8004eea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004eee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	785b      	ldrb	r3, [r3, #1]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d11c      	bne.n	8004f34 <USB_EPStartXfer+0x318>
 8004efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0e:	4413      	add	r3, r2
 8004f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	011a      	lsls	r2, r3, #4
 8004f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f22:	4413      	add	r3, r2
 8004f24:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	895b      	ldrh	r3, [r3, #10]
 8004f40:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6959      	ldr	r1, [r3, #20]
 8004f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8004f5a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8004f5e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	f001 fb49 	bl	80065fa <USB_WritePMA>
            ep->xfer_buff += len;
 8004f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f78:	441a      	add	r2, r3
 8004f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d90f      	bls.n	8004fc2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6a1a      	ldr	r2, [r3, #32]
 8004fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	621a      	str	r2, [r3, #32]
 8004fc0:	e00e      	b.n	8004fe0 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8004fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004fe4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d177      	bne.n	80050e0 <USB_EPStartXfer+0x4c4>
 8004ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800500a:	b29b      	uxth	r3, r3
 800500c:	461a      	mov	r2, r3
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	4413      	add	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	011a      	lsls	r2, r3, #4
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	4413      	add	r3, r2
 8005026:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005036:	b29a      	uxth	r2, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005040:	2b3e      	cmp	r3, #62	@ 0x3e
 8005042:	d921      	bls.n	8005088 <USB_EPStartXfer+0x46c>
 8005044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800504e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <USB_EPStartXfer+0x448>
 800505a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800505e:	3b01      	subs	r3, #1
 8005060:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800506e:	b29b      	uxth	r3, r3
 8005070:	029b      	lsls	r3, r3, #10
 8005072:	b29b      	uxth	r3, r3
 8005074:	4313      	orrs	r3, r2
 8005076:	b29b      	uxth	r3, r3
 8005078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800507c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005080:	b29a      	uxth	r2, r3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	801a      	strh	r2, [r3, #0]
 8005086:	e056      	b.n	8005136 <USB_EPStartXfer+0x51a>
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <USB_EPStartXfer+0x48a>
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800509a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509e:	b29a      	uxth	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	e047      	b.n	8005136 <USB_EPStartXfer+0x51a>
 80050a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <USB_EPStartXfer+0x4aa>
 80050bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050c0:	3301      	adds	r3, #1
 80050c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	881b      	ldrh	r3, [r3, #0]
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	029b      	lsls	r3, r3, #10
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	4313      	orrs	r3, r2
 80050d8:	b29a      	uxth	r2, r3
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	801a      	strh	r2, [r3, #0]
 80050de:	e02a      	b.n	8005136 <USB_EPStartXfer+0x51a>
 80050e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	785b      	ldrb	r3, [r3, #1]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d122      	bne.n	8005136 <USB_EPStartXfer+0x51a>
 80050f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80050f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	623b      	str	r3, [r7, #32]
 80050fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005100:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800510a:	b29b      	uxth	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	4413      	add	r3, r2
 8005112:	623b      	str	r3, [r7, #32]
 8005114:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005118:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	6a3b      	ldr	r3, [r7, #32]
 8005124:	4413      	add	r3, r2
 8005126:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005130:	b29a      	uxth	r2, r3
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800513a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	891b      	ldrh	r3, [r3, #8]
 8005142:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800514a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6959      	ldr	r1, [r3, #20]
 8005152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005156:	b29b      	uxth	r3, r3
 8005158:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800515c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005160:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005164:	6800      	ldr	r0, [r0, #0]
 8005166:	f001 fa48 	bl	80065fa <USB_WritePMA>
 800516a:	e3ee      	b.n	800594a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800516c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	785b      	ldrb	r3, [r3, #1]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d177      	bne.n	800526c <USB_EPStartXfer+0x650>
 800517c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800518c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005196:	b29b      	uxth	r3, r3
 8005198:	461a      	mov	r2, r3
 800519a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800519c:	4413      	add	r3, r2
 800519e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	011a      	lsls	r2, r3, #4
 80051ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051b0:	4413      	add	r3, r2
 80051b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80051b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051c6:	801a      	strh	r2, [r3, #0]
 80051c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80051ce:	d921      	bls.n	8005214 <USB_EPStartXfer+0x5f8>
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	095b      	lsrs	r3, r3, #5
 80051d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d104      	bne.n	80051f0 <USB_EPStartXfer+0x5d4>
 80051e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80051f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005210:	801a      	strh	r2, [r3, #0]
 8005212:	e056      	b.n	80052c2 <USB_EPStartXfer+0x6a6>
 8005214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10a      	bne.n	8005232 <USB_EPStartXfer+0x616>
 800521c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800521e:	881b      	ldrh	r3, [r3, #0]
 8005220:	b29b      	uxth	r3, r3
 8005222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522a:	b29a      	uxth	r2, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	801a      	strh	r2, [r3, #0]
 8005230:	e047      	b.n	80052c2 <USB_EPStartXfer+0x6a6>
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005236:	085b      	lsrs	r3, r3, #1
 8005238:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800523c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <USB_EPStartXfer+0x636>
 8005248:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800524c:	3301      	adds	r3, #1
 800524e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	b29a      	uxth	r2, r3
 8005258:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800525c:	b29b      	uxth	r3, r3
 800525e:	029b      	lsls	r3, r3, #10
 8005260:	b29b      	uxth	r3, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	b29a      	uxth	r2, r3
 8005266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e02a      	b.n	80052c2 <USB_EPStartXfer+0x6a6>
 800526c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b01      	cmp	r3, #1
 800527a:	d122      	bne.n	80052c2 <USB_EPStartXfer+0x6a6>
 800527c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	653b      	str	r3, [r7, #80]	@ 0x50
 8005288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800528c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005296:	b29b      	uxth	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800529c:	4413      	add	r3, r2
 800529e:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	011a      	lsls	r2, r3, #4
 80052ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80052b0:	4413      	add	r3, r2
 80052b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052bc:	b29a      	uxth	r2, r3
 80052be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	891b      	ldrh	r3, [r3, #8]
 80052ce:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6959      	ldr	r1, [r3, #20]
 80052de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80052e8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80052ec:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80052f0:	6800      	ldr	r0, [r0, #0]
 80052f2:	f001 f982 	bl	80065fa <USB_WritePMA>
            ep->xfer_buff += len;
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005306:	441a      	add	r2, r3
 8005308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800530c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6a1a      	ldr	r2, [r3, #32]
 8005320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	429a      	cmp	r2, r3
 800532e:	d90f      	bls.n	8005350 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8005330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	621a      	str	r2, [r3, #32]
 800534e:	e00e      	b.n	800536e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800536e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	643b      	str	r3, [r7, #64]	@ 0x40
 800537a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800537e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	785b      	ldrb	r3, [r3, #1]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d177      	bne.n	800547a <USB_EPStartXfer+0x85e>
 800538a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800538e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	461a      	mov	r2, r3
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	4413      	add	r3, r2
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	011a      	lsls	r2, r3, #4
 80053bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053be:	4413      	add	r3, r2
 80053c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053da:	2b3e      	cmp	r3, #62	@ 0x3e
 80053dc:	d921      	bls.n	8005422 <USB_EPStartXfer+0x806>
 80053de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e2:	095b      	lsrs	r3, r3, #5
 80053e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ec:	f003 031f 	and.w	r3, r3, #31
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <USB_EPStartXfer+0x7e2>
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f8:	3b01      	subs	r3, #1
 80053fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80053fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	b29a      	uxth	r2, r3
 8005404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005408:	b29b      	uxth	r3, r3
 800540a:	029b      	lsls	r3, r3, #10
 800540c:	b29b      	uxth	r3, r3
 800540e:	4313      	orrs	r3, r2
 8005410:	b29b      	uxth	r3, r3
 8005412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541a:	b29a      	uxth	r2, r3
 800541c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e050      	b.n	80054c4 <USB_EPStartXfer+0x8a8>
 8005422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005426:	2b00      	cmp	r3, #0
 8005428:	d10a      	bne.n	8005440 <USB_EPStartXfer+0x824>
 800542a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800542c:	881b      	ldrh	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005438:	b29a      	uxth	r2, r3
 800543a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e041      	b.n	80054c4 <USB_EPStartXfer+0x8a8>
 8005440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005444:	085b      	lsrs	r3, r3, #1
 8005446:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800544a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d004      	beq.n	8005460 <USB_EPStartXfer+0x844>
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	3301      	adds	r3, #1
 800545c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29a      	uxth	r2, r3
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	b29b      	uxth	r3, r3
 800546c:	029b      	lsls	r3, r3, #10
 800546e:	b29b      	uxth	r3, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	b29a      	uxth	r2, r3
 8005474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005476:	801a      	strh	r2, [r3, #0]
 8005478:	e024      	b.n	80054c4 <USB_EPStartXfer+0x8a8>
 800547a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800547e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d11c      	bne.n	80054c4 <USB_EPStartXfer+0x8a8>
 800548a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800548e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005498:	b29b      	uxth	r3, r3
 800549a:	461a      	mov	r2, r3
 800549c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800549e:	4413      	add	r3, r2
 80054a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	011a      	lsls	r2, r3, #4
 80054b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b2:	4413      	add	r3, r2
 80054b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	895b      	ldrh	r3, [r3, #10]
 80054d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6959      	ldr	r1, [r3, #20]
 80054e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80054ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80054ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80054f2:	6800      	ldr	r0, [r0, #0]
 80054f4:	f001 f881 	bl	80065fa <USB_WritePMA>
 80054f8:	e227      	b.n	800594a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80054fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800550a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800550e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800552c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005530:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005538:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005542:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800555e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800556a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005586:	4413      	add	r3, r2
 8005588:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800558a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	011a      	lsls	r2, r3, #4
 8005598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800559a:	4413      	add	r3, r2
 800559c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80055a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	891b      	ldrh	r3, [r3, #8]
 80055b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6959      	ldr	r1, [r3, #20]
 80055c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80055d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80055d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80055da:	6800      	ldr	r0, [r0, #0]
 80055dc:	f001 f80d 	bl	80065fa <USB_WritePMA>
 80055e0:	e1b3      	b.n	800594a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80055e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a1a      	ldr	r2, [r3, #32]
 80055ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f2:	1ad2      	subs	r2, r2, r3
 80055f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	b29b      	uxth	r3, r3
 800561e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 80c6 	beq.w	80057b4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800562c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	673b      	str	r3, [r7, #112]	@ 0x70
 8005634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	785b      	ldrb	r3, [r3, #1]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d177      	bne.n	8005734 <USB_EPStartXfer+0xb18>
 8005644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005648:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005664:	4413      	add	r3, r2
 8005666:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800566c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	011a      	lsls	r2, r3, #4
 8005676:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005678:	4413      	add	r3, r2
 800567a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800567e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800568a:	b29a      	uxth	r2, r3
 800568c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800568e:	801a      	strh	r2, [r3, #0]
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	2b3e      	cmp	r3, #62	@ 0x3e
 8005696:	d921      	bls.n	80056dc <USB_EPStartXfer+0xac0>
 8005698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800569c:	095b      	lsrs	r3, r3, #5
 800569e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a6:	f003 031f 	and.w	r3, r3, #31
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <USB_EPStartXfer+0xa9c>
 80056ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056b2:	3b01      	subs	r3, #1
 80056b4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80056b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ba:	881b      	ldrh	r3, [r3, #0]
 80056bc:	b29a      	uxth	r2, r3
 80056be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	4313      	orrs	r3, r2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	e050      	b.n	800577e <USB_EPStartXfer+0xb62>
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <USB_EPStartXfer+0xade>
 80056e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e041      	b.n	800577e <USB_EPStartXfer+0xb62>
 80056fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <USB_EPStartXfer+0xafe>
 8005710:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005714:	3301      	adds	r3, #1
 8005716:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800571a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29a      	uxth	r2, r3
 8005720:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005724:	b29b      	uxth	r3, r3
 8005726:	029b      	lsls	r3, r3, #10
 8005728:	b29b      	uxth	r3, r3
 800572a:	4313      	orrs	r3, r2
 800572c:	b29a      	uxth	r2, r3
 800572e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e024      	b.n	800577e <USB_EPStartXfer+0xb62>
 8005734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d11c      	bne.n	800577e <USB_EPStartXfer+0xb62>
 8005744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005752:	b29b      	uxth	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005758:	4413      	add	r3, r2
 800575a:	673b      	str	r3, [r7, #112]	@ 0x70
 800575c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	011a      	lsls	r2, r3, #4
 800576a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800576c:	4413      	add	r3, r2
 800576e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005772:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005778:	b29a      	uxth	r2, r3
 800577a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800577c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800577e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	895b      	ldrh	r3, [r3, #10]
 800578a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800578e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6959      	ldr	r1, [r3, #20]
 800579a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800579e:	b29b      	uxth	r3, r3
 80057a0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80057a4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80057a8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f000 ff24 	bl	80065fa <USB_WritePMA>
 80057b2:	e0ca      	b.n	800594a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d177      	bne.n	80058b4 <USB_EPStartXfer+0xc98>
 80057c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057de:	b29b      	uxth	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057e4:	4413      	add	r3, r2
 80057e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80057ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	011a      	lsls	r2, r3, #4
 80057f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057f8:	4413      	add	r3, r2
 80057fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057fe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580a:	b29a      	uxth	r2, r3
 800580c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005814:	2b3e      	cmp	r3, #62	@ 0x3e
 8005816:	d921      	bls.n	800585c <USB_EPStartXfer+0xc40>
 8005818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <USB_EPStartXfer+0xc1c>
 800582e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005832:	3b01      	subs	r3, #1
 8005834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583a:	881b      	ldrh	r3, [r3, #0]
 800583c:	b29a      	uxth	r2, r3
 800583e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005842:	b29b      	uxth	r3, r3
 8005844:	029b      	lsls	r3, r3, #10
 8005846:	b29b      	uxth	r3, r3
 8005848:	4313      	orrs	r3, r2
 800584a:	b29b      	uxth	r3, r3
 800584c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005854:	b29a      	uxth	r2, r3
 8005856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e05c      	b.n	8005916 <USB_EPStartXfer+0xcfa>
 800585c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <USB_EPStartXfer+0xc5e>
 8005864:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005866:	881b      	ldrh	r3, [r3, #0]
 8005868:	b29b      	uxth	r3, r3
 800586a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800586e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005872:	b29a      	uxth	r2, r3
 8005874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	e04d      	b.n	8005916 <USB_EPStartXfer+0xcfa>
 800587a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587e:	085b      	lsrs	r3, r3, #1
 8005880:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <USB_EPStartXfer+0xc7e>
 8005890:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005894:	3301      	adds	r3, #1
 8005896:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800589a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	029b      	lsls	r3, r3, #10
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	e030      	b.n	8005916 <USB_EPStartXfer+0xcfa>
 80058b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d128      	bne.n	8005916 <USB_EPStartXfer+0xcfa>
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058e8:	4413      	add	r3, r2
 80058ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	011a      	lsls	r2, r3, #4
 80058fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005900:	4413      	add	r3, r2
 8005902:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800590a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005914:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800591a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	891b      	ldrh	r3, [r3, #8]
 8005922:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005936:	b29b      	uxth	r3, r3
 8005938:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800593c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005940:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005944:	6800      	ldr	r0, [r0, #0]
 8005946:	f000 fe58 	bl	80065fa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800594a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800596c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	897b      	ldrh	r3, [r7, #10]
 8005974:	f083 0310 	eor.w	r3, r3, #16
 8005978:	817b      	strh	r3, [r7, #10]
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	f083 0320 	eor.w	r3, r3, #32
 8005980:	817b      	strh	r3, [r7, #10]
 8005982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	441a      	add	r2, r3
 800599c:	897b      	ldrh	r3, [r7, #10]
 800599e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	8013      	strh	r3, [r2, #0]
 80059b2:	f000 bcde 	b.w	8006372 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80059b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	7b1b      	ldrb	r3, [r3, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 80bb 	bne.w	8005b3e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d917      	bls.n	8005a14 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80059e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80059f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	699a      	ldr	r2, [r3, #24]
 8005a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a04:	1ad2      	subs	r2, r2, r3
 8005a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	619a      	str	r2, [r3, #24]
 8005a12:	e00e      	b.n	8005a32 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005a32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a84:	b29a      	uxth	r2, r3
 8005a86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a90:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a92:	d924      	bls.n	8005ade <USB_EPStartXfer+0xec2>
 8005a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d104      	bne.n	8005ab4 <USB_EPStartXfer+0xe98>
 8005aaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab8:	881b      	ldrh	r3, [r3, #0]
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	029b      	lsls	r3, r3, #10
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ace:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	f000 bc10 	b.w	80062fe <USB_EPStartXfer+0x16e2>
 8005ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <USB_EPStartXfer+0xee4>
 8005ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e3fe      	b.n	80062fe <USB_EPStartXfer+0x16e2>
 8005b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <USB_EPStartXfer+0xf04>
 8005b16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	029b      	lsls	r3, r3, #10
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4313      	orrs	r3, r2
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b3a:	801a      	strh	r2, [r3, #0]
 8005b3c:	e3df      	b.n	80062fe <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	78db      	ldrb	r3, [r3, #3]
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	f040 8218 	bne.w	8005f80 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	785b      	ldrb	r3, [r3, #1]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f040 809d 	bne.w	8005c9c <USB_EPStartXfer+0x1080>
 8005b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	461a      	mov	r2, r3
 8005b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b86:	4413      	add	r3, r2
 8005b88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	011a      	lsls	r2, r3, #4
 8005b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005bba:	801a      	strh	r2, [r3, #0]
 8005bbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005bca:	d92b      	bls.n	8005c24 <USB_EPStartXfer+0x1008>
 8005bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	095b      	lsrs	r3, r3, #5
 8005bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d104      	bne.n	8005bfc <USB_EPStartXfer+0xfe0>
 8005bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	029b      	lsls	r3, r3, #10
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c20:	801a      	strh	r2, [r3, #0]
 8005c22:	e070      	b.n	8005d06 <USB_EPStartXfer+0x10ea>
 8005c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10c      	bne.n	8005c4e <USB_EPStartXfer+0x1032>
 8005c34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e05b      	b.n	8005d06 <USB_EPStartXfer+0x10ea>
 8005c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	085b      	lsrs	r3, r3, #1
 8005c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d004      	beq.n	8005c7e <USB_EPStartXfer+0x1062>
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c78:	3301      	adds	r3, #1
 8005c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c82:	881b      	ldrh	r3, [r3, #0]
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	029b      	lsls	r3, r3, #10
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	4313      	orrs	r3, r2
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c98:	801a      	strh	r2, [r3, #0]
 8005c9a:	e034      	b.n	8005d06 <USB_EPStartXfer+0x10ea>
 8005c9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d12c      	bne.n	8005d06 <USB_EPStartXfer+0x10ea>
 8005cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	011a      	lsls	r2, r3, #4
 8005ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005ce8:	4413      	add	r3, r2
 8005cea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005d04:	801a      	strh	r2, [r3, #0]
 8005d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 809d 	bne.w	8005e60 <USB_EPStartXfer+0x1244>
 8005d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	461a      	mov	r2, r3
 8005d46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	011a      	lsls	r2, r3, #4
 8005d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d62:	4413      	add	r3, r2
 8005d64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d8e:	d92b      	bls.n	8005de8 <USB_EPStartXfer+0x11cc>
 8005d90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 031f 	and.w	r3, r3, #31
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <USB_EPStartXfer+0x11a4>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dc4:	881b      	ldrh	r3, [r3, #0]
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005de4:	801a      	strh	r2, [r3, #0]
 8005de6:	e069      	b.n	8005ebc <USB_EPStartXfer+0x12a0>
 8005de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10c      	bne.n	8005e12 <USB_EPStartXfer+0x11f6>
 8005df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	e054      	b.n	8005ebc <USB_EPStartXfer+0x12a0>
 8005e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	085b      	lsrs	r3, r3, #1
 8005e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <USB_EPStartXfer+0x1226>
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	4313      	orrs	r3, r2
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	e02d      	b.n	8005ebc <USB_EPStartXfer+0x12a0>
 8005e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	785b      	ldrb	r3, [r3, #1]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d125      	bne.n	8005ebc <USB_EPStartXfer+0x12a0>
 8005e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	461a      	mov	r2, r3
 8005e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e86:	4413      	add	r3, r2
 8005e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005e8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	011a      	lsls	r2, r3, #4
 8005e9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ea4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ea8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	b29a      	uxth	r2, r3
 8005eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005eba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005ebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	f000 8218 	beq.w	80062fe <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ed2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005eee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005ef2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <USB_EPStartXfer+0x12ea>
 8005efa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f06:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 81f5 	bne.w	80062fe <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005f14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f040 81ee 	bne.w	80062fe <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f48:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8005f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]
 8005f7e:	e1be      	b.n	80062fe <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	78db      	ldrb	r3, [r3, #3]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	f040 81b4 	bne.w	80062fa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d917      	bls.n	8005fde <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8005fbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	619a      	str	r2, [r3, #24]
 8005fdc:	e00e      	b.n	8005ffc <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8005fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005ffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006000:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	785b      	ldrb	r3, [r3, #1]
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 8085 	bne.w	8006118 <USB_EPStartXfer+0x14fc>
 800600e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006012:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800601c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006032:	4413      	add	r3, r2
 8006034:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800603c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800604a:	4413      	add	r3, r2
 800604c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006050:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006054:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29b      	uxth	r3, r3
 800605c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006060:	b29a      	uxth	r2, r3
 8006062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006066:	801a      	strh	r2, [r3, #0]
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	2b3e      	cmp	r3, #62	@ 0x3e
 800606e:	d923      	bls.n	80060b8 <USB_EPStartXfer+0x149c>
 8006070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800607a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607e:	f003 031f 	and.w	r3, r3, #31
 8006082:	2b00      	cmp	r3, #0
 8006084:	d104      	bne.n	8006090 <USB_EPStartXfer+0x1474>
 8006086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800608a:	3b01      	subs	r3, #1
 800608c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006090:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	b29a      	uxth	r2, r3
 8006098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800609c:	b29b      	uxth	r3, r3
 800609e:	029b      	lsls	r3, r3, #10
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	4313      	orrs	r3, r2
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060b4:	801a      	strh	r2, [r3, #0]
 80060b6:	e060      	b.n	800617a <USB_EPStartXfer+0x155e>
 80060b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10c      	bne.n	80060da <USB_EPStartXfer+0x14be>
 80060c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e04f      	b.n	800617a <USB_EPStartXfer+0x155e>
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060de:	085b      	lsrs	r3, r3, #1
 80060e0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <USB_EPStartXfer+0x14de>
 80060f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060f4:	3301      	adds	r3, #1
 80060f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80060fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	b29a      	uxth	r2, r3
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006106:	b29b      	uxth	r3, r3
 8006108:	029b      	lsls	r3, r3, #10
 800610a:	b29b      	uxth	r3, r3
 800610c:	4313      	orrs	r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006114:	801a      	strh	r2, [r3, #0]
 8006116:	e030      	b.n	800617a <USB_EPStartXfer+0x155e>
 8006118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800611c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d128      	bne.n	800617a <USB_EPStartXfer+0x155e>
 8006128:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800612c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800613a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800614c:	4413      	add	r3, r2
 800614e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006164:	4413      	add	r3, r2
 8006166:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800616a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800616e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006172:	b29a      	uxth	r2, r3
 8006174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006178:	801a      	strh	r2, [r3, #0]
 800617a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800617e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800618c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f040 8085 	bne.w	80062a4 <USB_EPStartXfer+0x1688>
 800619a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800619e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061be:	4413      	add	r3, r2
 80061c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	011a      	lsls	r2, r3, #4
 80061d2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80061d6:	4413      	add	r3, r2
 80061d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80061fa:	d923      	bls.n	8006244 <USB_EPStartXfer+0x1628>
 80061fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2b00      	cmp	r3, #0
 8006210:	d104      	bne.n	800621c <USB_EPStartXfer+0x1600>
 8006212:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006216:	3b01      	subs	r3, #1
 8006218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800621c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29a      	uxth	r2, r3
 8006224:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006228:	b29b      	uxth	r3, r3
 800622a:	029b      	lsls	r3, r3, #10
 800622c:	b29b      	uxth	r3, r3
 800622e:	4313      	orrs	r3, r2
 8006230:	b29b      	uxth	r3, r3
 8006232:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006236:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623a:	b29a      	uxth	r2, r3
 800623c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e05c      	b.n	80062fe <USB_EPStartXfer+0x16e2>
 8006244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10c      	bne.n	8006266 <USB_EPStartXfer+0x164a>
 800624c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e04b      	b.n	80062fe <USB_EPStartXfer+0x16e2>
 8006266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d004      	beq.n	8006286 <USB_EPStartXfer+0x166a>
 800627c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006280:	3301      	adds	r3, #1
 8006282:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006286:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29b      	uxth	r3, r3
 8006298:	4313      	orrs	r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80062a0:	801a      	strh	r2, [r3, #0]
 80062a2:	e02c      	b.n	80062fe <USB_EPStartXfer+0x16e2>
 80062a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	785b      	ldrb	r3, [r3, #1]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d124      	bne.n	80062fe <USB_EPStartXfer+0x16e2>
 80062b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062ca:	4413      	add	r3, r2
 80062cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80062d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	011a      	lsls	r2, r3, #4
 80062de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80062e2:	4413      	add	r3, r2
 80062e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	e001      	b.n	80062fe <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e03a      	b.n	8006374 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80062fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800630c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	b29b      	uxth	r3, r3
 800631c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006320:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006324:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006328:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800632c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006330:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006334:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006338:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800633c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800636a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	4618      	mov	r0, r3
 8006376:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	785b      	ldrb	r3, [r3, #1]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d020      	beq.n	80063d2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	881b      	ldrh	r3, [r3, #0]
 800639c:	b29b      	uxth	r3, r3
 800639e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063a6:	81bb      	strh	r3, [r7, #12]
 80063a8:	89bb      	ldrh	r3, [r7, #12]
 80063aa:	f083 0310 	eor.w	r3, r3, #16
 80063ae:	81bb      	strh	r3, [r7, #12]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	441a      	add	r2, r3
 80063ba:	89bb      	ldrh	r3, [r7, #12]
 80063bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	8013      	strh	r3, [r2, #0]
 80063d0:	e01f      	b.n	8006412 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e8:	81fb      	strh	r3, [r7, #14]
 80063ea:	89fb      	ldrh	r3, [r7, #14]
 80063ec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80063f0:	81fb      	strh	r3, [r7, #14]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	441a      	add	r2, r3
 80063fc:	89fb      	ldrh	r3, [r7, #14]
 80063fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800640a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640e:	b29b      	uxth	r3, r3
 8006410:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	bc80      	pop	{r7}
 800641c:	4770      	bx	lr

0800641e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800641e:	b480      	push	{r7}
 8006420:	b087      	sub	sp, #28
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	7b1b      	ldrb	r3, [r3, #12]
 800642c:	2b00      	cmp	r3, #0
 800642e:	f040 809d 	bne.w	800656c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d04c      	beq.n	80064d4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	823b      	strh	r3, [r7, #16]
 8006448:	8a3b      	ldrh	r3, [r7, #16]
 800644a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01b      	beq.n	800648a <USB_EPClearStall+0x6c>
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006468:	81fb      	strh	r3, [r7, #14]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	89fb      	ldrh	r3, [r7, #14]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	78db      	ldrb	r3, [r3, #3]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d06c      	beq.n	800656c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	b29b      	uxth	r3, r3
 80064a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a8:	81bb      	strh	r3, [r7, #12]
 80064aa:	89bb      	ldrh	r3, [r7, #12]
 80064ac:	f083 0320 	eor.w	r3, r3, #32
 80064b0:	81bb      	strh	r3, [r7, #12]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	441a      	add	r2, r3
 80064bc:	89bb      	ldrh	r3, [r7, #12]
 80064be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	8013      	strh	r3, [r2, #0]
 80064d2:	e04b      	b.n	800656c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	881b      	ldrh	r3, [r3, #0]
 80064e0:	82fb      	strh	r3, [r7, #22]
 80064e2:	8afb      	ldrh	r3, [r7, #22]
 80064e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01b      	beq.n	8006524 <USB_EPClearStall+0x106>
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006502:	82bb      	strh	r3, [r7, #20]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	441a      	add	r2, r3
 800650e:	8abb      	ldrh	r3, [r7, #20]
 8006510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006518:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800651c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006520:	b29b      	uxth	r3, r3
 8006522:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800653a:	827b      	strh	r3, [r7, #18]
 800653c:	8a7b      	ldrh	r3, [r7, #18]
 800653e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006542:	827b      	strh	r3, [r7, #18]
 8006544:	8a7b      	ldrh	r3, [r7, #18]
 8006546:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800654a:	827b      	strh	r3, [r7, #18]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	441a      	add	r2, r3
 8006556:	8a7b      	ldrh	r3, [r7, #18]
 8006558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800655c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006568:	b29b      	uxth	r3, r3
 800656a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800656c:	2300      	movs	r3, #0
}
 800656e:	4618      	mov	r0, r3
 8006570:	371c      	adds	r7, #28
 8006572:	46bd      	mov	sp, r7
 8006574:	bc80      	pop	{r7}
 8006576:	4770      	bx	lr

08006578 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d103      	bne.n	8006592 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2280      	movs	r2, #128	@ 0x80
 800658e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	bc80      	pop	{r7}
 800659c:	4770      	bx	lr

0800659e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800659e:	b480      	push	{r7}
 80065a0:	b083      	sub	sp, #12
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc80      	pop	{r7}
 80065b0:	4770      	bx	lr

080065b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80065b2:	b480      	push	{r7}
 80065b4:	b083      	sub	sp, #12
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr

080065c6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b08b      	sub	sp, #44	@ 0x2c
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	4611      	mov	r1, r2
 8006606:	461a      	mov	r2, r3
 8006608:	460b      	mov	r3, r1
 800660a:	80fb      	strh	r3, [r7, #6]
 800660c:	4613      	mov	r3, r2
 800660e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006610:	88bb      	ldrh	r3, [r7, #4]
 8006612:	3301      	adds	r3, #1
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	005a      	lsls	r2, r3, #1
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800662c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	627b      	str	r3, [r7, #36]	@ 0x24
 8006632:	e01f      	b.n	8006674 <USB_WritePMA+0x7a>
  {
    WrVal = pBuf[0];
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3301      	adds	r3, #1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	b21b      	sxth	r3, r3
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	b21a      	sxth	r2, r3
 8006646:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800664a:	4313      	orrs	r3, r2
 800664c:	b21b      	sxth	r3, r3
 800664e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	8a7a      	ldrh	r2, [r7, #18]
 8006654:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	3302      	adds	r3, #2
 800665a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3302      	adds	r3, #2
 8006660:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	3301      	adds	r3, #1
 8006666:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	3301      	adds	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800666e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006670:	3b01      	subs	r3, #1
 8006672:	627b      	str	r3, [r7, #36]	@ 0x24
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1dc      	bne.n	8006634 <USB_WritePMA+0x3a>
  }
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	372c      	adds	r7, #44	@ 0x2c
 8006680:	46bd      	mov	sp, r7
 8006682:	bc80      	pop	{r7}
 8006684:	4770      	bx	lr

08006686 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006686:	b480      	push	{r7}
 8006688:	b08b      	sub	sp, #44	@ 0x2c
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	4611      	mov	r1, r2
 8006692:	461a      	mov	r2, r3
 8006694:	460b      	mov	r3, r1
 8006696:	80fb      	strh	r3, [r7, #6]
 8006698:	4613      	mov	r3, r2
 800669a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800669c:	88bb      	ldrh	r3, [r7, #4]
 800669e:	085b      	lsrs	r3, r3, #1
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	005a      	lsls	r2, r3, #1
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80066b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80066be:	e01b      	b.n	80066f8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	881b      	ldrh	r3, [r3, #0]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	3302      	adds	r3, #2
 80066cc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	3301      	adds	r3, #1
 80066da:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	0a1b      	lsrs	r3, r3, #8
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	3302      	adds	r3, #2
 80066f0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	3b01      	subs	r3, #1
 80066f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1e0      	bne.n	80066c0 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80066fe:	88bb      	ldrh	r3, [r7, #4]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d007      	beq.n	800671a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	b29b      	uxth	r3, r3
 8006710:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	b2da      	uxtb	r2, r3
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	701a      	strb	r2, [r3, #0]
  }
}
 800671a:	bf00      	nop
 800671c:	372c      	adds	r7, #44	@ 0x2c
 800671e:	46bd      	mov	sp, r7
 8006720:	bc80      	pop	{r7}
 8006722:	4770      	bx	lr

08006724 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	7c1b      	ldrb	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d115      	bne.n	8006768 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800673c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006740:	2202      	movs	r2, #2
 8006742:	2181      	movs	r1, #129	@ 0x81
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fe9c 	bl	8008482 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006750:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006754:	2202      	movs	r2, #2
 8006756:	2101      	movs	r1, #1
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fe92 	bl	8008482 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006766:	e012      	b.n	800678e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006768:	2340      	movs	r3, #64	@ 0x40
 800676a:	2202      	movs	r2, #2
 800676c:	2181      	movs	r1, #129	@ 0x81
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 fe87 	bl	8008482 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800677a:	2340      	movs	r3, #64	@ 0x40
 800677c:	2202      	movs	r2, #2
 800677e:	2101      	movs	r1, #1
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fe7e 	bl	8008482 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800678e:	2308      	movs	r3, #8
 8006790:	2203      	movs	r2, #3
 8006792:	2182      	movs	r1, #130	@ 0x82
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fe74 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80067a0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80067a4:	f001 ff94 	bl	80086d0 <USBD_static_malloc>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
 80067be:	e026      	b.n	800680e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7c1b      	ldrb	r3, [r3, #16]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d109      	bne.n	80067fe <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80067f4:	2101      	movs	r1, #1
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f001 ff33 	bl	8008662 <USBD_LL_PrepareReceive>
 80067fc:	e007      	b.n	800680e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006804:	2340      	movs	r3, #64	@ 0x40
 8006806:	2101      	movs	r1, #1
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f001 ff2a 	bl	8008662 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006828:	2181      	movs	r1, #129	@ 0x81
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fe4f 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006836:	2101      	movs	r1, #1
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fe48 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006846:	2182      	movs	r1, #130	@ 0x82
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fe40 	bl	80084ce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d00e      	beq.n	800687c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686e:	4618      	mov	r0, r3
 8006870:	f001 ff3a 	bl	80086e8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 800687c:	7bfb      	ldrb	r3, [r7, #15]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006896:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d039      	beq.n	8006924 <USBD_CDC_Setup+0x9e>
 80068b0:	2b20      	cmp	r3, #32
 80068b2:	d17f      	bne.n	80069b4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	88db      	ldrh	r3, [r3, #6]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d029      	beq.n	8006910 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da11      	bge.n	80068ea <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80068d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	88d2      	ldrh	r2, [r2, #6]
 80068d8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80068da:	6939      	ldr	r1, [r7, #16]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	88db      	ldrh	r3, [r3, #6]
 80068e0:	461a      	mov	r2, r3
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f001 fa06 	bl	8007cf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80068e8:	e06b      	b.n	80069c2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	785a      	ldrb	r2, [r3, #1]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	88db      	ldrh	r3, [r3, #6]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006900:	6939      	ldr	r1, [r7, #16]
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	88db      	ldrh	r3, [r3, #6]
 8006906:	461a      	mov	r2, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 fa21 	bl	8007d50 <USBD_CtlPrepareRx>
      break;
 800690e:	e058      	b.n	80069c2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	7850      	ldrb	r0, [r2, #1]
 800691c:	2200      	movs	r2, #0
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	4798      	blx	r3
      break;
 8006922:	e04e      	b.n	80069c2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b0b      	cmp	r3, #11
 800692a:	d02e      	beq.n	800698a <USBD_CDC_Setup+0x104>
 800692c:	2b0b      	cmp	r3, #11
 800692e:	dc38      	bgt.n	80069a2 <USBD_CDC_Setup+0x11c>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <USBD_CDC_Setup+0xb4>
 8006934:	2b0a      	cmp	r3, #10
 8006936:	d014      	beq.n	8006962 <USBD_CDC_Setup+0xdc>
 8006938:	e033      	b.n	80069a2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006940:	2b03      	cmp	r3, #3
 8006942:	d107      	bne.n	8006954 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	2202      	movs	r2, #2
 800694a:	4619      	mov	r1, r3
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f001 f9d1 	bl	8007cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006952:	e02e      	b.n	80069b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 f962 	bl	8007c20 <USBD_CtlError>
            ret = USBD_FAIL;
 800695c:	2302      	movs	r3, #2
 800695e:	75fb      	strb	r3, [r7, #23]
          break;
 8006960:	e027      	b.n	80069b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006968:	2b03      	cmp	r3, #3
 800696a:	d107      	bne.n	800697c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800696c:	f107 030f 	add.w	r3, r7, #15
 8006970:	2201      	movs	r2, #1
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f001 f9bd 	bl	8007cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800697a:	e01a      	b.n	80069b2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f001 f94e 	bl	8007c20 <USBD_CtlError>
            ret = USBD_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	75fb      	strb	r3, [r7, #23]
          break;
 8006988:	e013      	b.n	80069b2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006990:	2b03      	cmp	r3, #3
 8006992:	d00d      	beq.n	80069b0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 f942 	bl	8007c20 <USBD_CtlError>
            ret = USBD_FAIL;
 800699c:	2302      	movs	r3, #2
 800699e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069a0:	e006      	b.n	80069b0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f93b 	bl	8007c20 <USBD_CtlError>
          ret = USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	75fb      	strb	r3, [r7, #23]
          break;
 80069ae:	e000      	b.n	80069b2 <USBD_CDC_Setup+0x12c>
          break;
 80069b0:	bf00      	nop
      }
      break;
 80069b2:	e006      	b.n	80069c2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f001 f932 	bl	8007c20 <USBD_CtlError>
      ret = USBD_FAIL;
 80069bc:	2302      	movs	r3, #2
 80069be:	75fb      	strb	r3, [r7, #23]
      break;
 80069c0:	bf00      	nop
  }

  return ret;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	460b      	mov	r3, r1
 80069d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069de:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80069e6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d03a      	beq.n	8006a68 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80069f2:	78fa      	ldrb	r2, [r7, #3]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	331c      	adds	r3, #28
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d029      	beq.n	8006a5c <USBD_CDC_DataIn+0x90>
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	331c      	adds	r3, #28
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	78f9      	ldrb	r1, [r7, #3]
 8006a1c:	68b8      	ldr	r0, [r7, #8]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	00db      	lsls	r3, r3, #3
 8006a26:	4403      	add	r3, r0
 8006a28:	3320      	adds	r3, #32
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d110      	bne.n	8006a5c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006a3a:	78fa      	ldrb	r2, [r7, #3]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	440b      	add	r3, r1
 8006a48:	331c      	adds	r3, #28
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a4e:	78f9      	ldrb	r1, [r7, #3]
 8006a50:	2300      	movs	r3, #0
 8006a52:	2200      	movs	r2, #0
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 fde1 	bl	800861c <USBD_LL_Transmit>
 8006a5a:	e003      	b.n	8006a64 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8006a64:	2300      	movs	r3, #0
 8006a66:	e000      	b.n	8006a6a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006a68:	2302      	movs	r3, #2
  }
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fe0c 	bl	80086a8 <USBD_LL_GetRxDataSize>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00d      	beq.n	8006abe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ab6:	4611      	mov	r1, r2
 8006ab8:	4798      	blx	r3

    return USBD_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ad6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d014      	beq.n	8006b0c <USBD_CDC_EP0_RxReady+0x44>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006ae8:	2bff      	cmp	r3, #255	@ 0xff
 8006aea:	d00f      	beq.n	8006b0c <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006afa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006b02:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	22ff      	movs	r2, #255	@ 0xff
 8006b08:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2243      	movs	r2, #67	@ 0x43
 8006b24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006b26:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	2000009c 	.word	0x2000009c

08006b38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2243      	movs	r2, #67	@ 0x43
 8006b44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006b46:	4b03      	ldr	r3, [pc, #12]	@ (8006b54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000058 	.word	0x20000058

08006b58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2243      	movs	r2, #67	@ 0x43
 8006b64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006b66:	4b03      	ldr	r3, [pc, #12]	@ (8006b74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	200000e0 	.word	0x200000e0

08006b78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	220a      	movs	r2, #10
 8006b84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006b86:	4b03      	ldr	r3, [pc, #12]	@ (8006b94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000014 	.word	0x20000014

08006b98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bc80      	pop	{r7}
 8006bc2:	4770      	bx	lr

08006bc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b087      	sub	sp, #28
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bc80      	pop	{r7}
 8006bf4:	4770      	bx	lr

08006bf6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006bf6:	b480      	push	{r7}
 8006bf8:	b085      	sub	sp, #20
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	6078      	str	r0, [r7, #4]
 8006bfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr

08006c1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01c      	beq.n	8006c70 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d115      	bne.n	8006c6c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	2181      	movs	r1, #129	@ 0x81
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f001 fcda 	bl	800861c <USBD_LL_Transmit>

      return USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e002      	b.n	8006c72 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006c70:	2302      	movs	r3, #2
  }
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}

08006c7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c7a:	b580      	push	{r7, lr}
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c88:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d017      	beq.n	8006cc4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7c1b      	ldrb	r3, [r3, #16]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d109      	bne.n	8006cb0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ca2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f001 fcda 	bl	8008662 <USBD_LL_PrepareReceive>
 8006cae:	e007      	b.n	8006cc0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cb6:	2340      	movs	r3, #64	@ 0x40
 8006cb8:	2101      	movs	r1, #1
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fcd1 	bl	8008662 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e000      	b.n	8006cc6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006cc4:	2302      	movs	r3, #2
  }
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b084      	sub	sp, #16
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d101      	bne.n	8006ce6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	e01a      	b.n	8006d1c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d003      	beq.n	8006cf8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	79fa      	ldrb	r2, [r7, #7]
 8006d12:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 fb3f 	bl	8008398 <USBD_LL_Init>

  return USBD_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d006      	beq.n	8006d46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
 8006d44:	e001      	b.n	8006d4a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006d46:	2302      	movs	r3, #2
 8006d48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3714      	adds	r7, #20
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bc80      	pop	{r7}
 8006d54:	4770      	bx	lr

08006d56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fb74 	bl	800844c <USBD_LL_Start>

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d76:	2300      	movs	r3, #0
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bc80      	pop	{r7}
 8006d80:	4770      	bx	lr

08006d82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00c      	beq.n	8006db6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	4611      	mov	r1, r2
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	4798      	blx	r3
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b082      	sub	sp, #8
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	78fa      	ldrb	r2, [r7, #3]
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	4798      	blx	r3

  return USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3708      	adds	r7, #8
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}

08006de6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b082      	sub	sp, #8
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
 8006dee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fed8 	bl	8007bae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d016      	beq.n	8006e50 <USBD_LL_SetupStage+0x6a>
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d81c      	bhi.n	8006e60 <USBD_LL_SetupStage+0x7a>
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <USBD_LL_SetupStage+0x4a>
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d008      	beq.n	8006e40 <USBD_LL_SetupStage+0x5a>
 8006e2e:	e017      	b.n	8006e60 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f9cb 	bl	80071d4 <USBD_StdDevReq>
      break;
 8006e3e:	e01a      	b.n	8006e76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e46:	4619      	mov	r1, r3
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 fa2d 	bl	80072a8 <USBD_StdItfReq>
      break;
 8006e4e:	e012      	b.n	8006e76 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fa6d 	bl	8007338 <USBD_StdEPReq>
      break;
 8006e5e:	e00a      	b.n	8006e76 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8006e66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fb4c 	bl	800850c <USBD_LL_StallEP>
      break;
 8006e74:	bf00      	nop
  }

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b086      	sub	sp, #24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	460b      	mov	r3, r1
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006e8e:	7afb      	ldrb	r3, [r7, #11]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d14b      	bne.n	8006f2c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006e9a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d134      	bne.n	8006f10 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d919      	bls.n	8006ee6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	68da      	ldr	r2, [r3, #12]
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d203      	bcs.n	8006ed4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	e002      	b.n	8006eda <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	461a      	mov	r2, r3
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f000 ff54 	bl	8007d8c <USBD_CtlContinueRx>
 8006ee4:	e038      	b.n	8006f58 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d105      	bne.n	8006f08 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 ff51 	bl	8007db0 <USBD_CtlSendStatus>
 8006f0e:	e023      	b.n	8006f58 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f16:	2b05      	cmp	r3, #5
 8006f18:	d11e      	bne.n	8006f58 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f22:	2100      	movs	r1, #0
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f001 faf1 	bl	800850c <USBD_LL_StallEP>
 8006f2a:	e015      	b.n	8006f58 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f32:	699b      	ldr	r3, [r3, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f3e:	2b03      	cmp	r3, #3
 8006f40:	d108      	bne.n	8006f54 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	7afa      	ldrb	r2, [r7, #11]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	4798      	blx	r3
 8006f52:	e001      	b.n	8006f58 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006f54:	2302      	movs	r3, #2
 8006f56:	e000      	b.n	8006f5a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d17f      	bne.n	8007076 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d15c      	bne.n	8007040 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d915      	bls.n	8006fbe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 febe 	bl	8007d2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f001 fb53 	bl	8008662 <USBD_LL_PrepareReceive>
 8006fbc:	e04e      	b.n	800705c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	6912      	ldr	r2, [r2, #16]
 8006fc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fca:	fb01 f202 	mul.w	r2, r1, r2
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11c      	bne.n	800700e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d316      	bcc.n	800700e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d20f      	bcs.n	800700e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fe9a 	bl	8007d2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007000:	2300      	movs	r3, #0
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f001 fb2b 	bl	8008662 <USBD_LL_PrepareReceive>
 800700c:	e026      	b.n	800705c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007014:	68db      	ldr	r3, [r3, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007020:	2b03      	cmp	r3, #3
 8007022:	d105      	bne.n	8007030 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007030:	2180      	movs	r1, #128	@ 0x80
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f001 fa6a 	bl	800850c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fecc 	bl	8007dd6 <USBD_CtlReceiveStatus>
 800703e:	e00d      	b.n	800705c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007046:	2b04      	cmp	r3, #4
 8007048:	d004      	beq.n	8007054 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007054:	2180      	movs	r1, #128	@ 0x80
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f001 fa58 	bl	800850c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007062:	2b01      	cmp	r3, #1
 8007064:	d11d      	bne.n	80070a2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f7ff fe81 	bl	8006d6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007074:	e015      	b.n	80070a2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007088:	2b03      	cmp	r3, #3
 800708a:	d108      	bne.n	800709e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	7afa      	ldrb	r2, [r7, #11]
 8007096:	4611      	mov	r1, r2
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	4798      	blx	r3
 800709c:	e001      	b.n	80070a2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800709e:	2302      	movs	r3, #2
 80070a0:	e000      	b.n	80070a4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070b4:	2340      	movs	r3, #64	@ 0x40
 80070b6:	2200      	movs	r2, #0
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f001 f9e1 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2240      	movs	r2, #64	@ 0x40
 80070cc:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80070d0:	2340      	movs	r3, #64	@ 0x40
 80070d2:	2200      	movs	r2, #0
 80070d4:	2180      	movs	r1, #128	@ 0x80
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f001 f9d3 	bl	8008482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2240      	movs	r2, #64	@ 0x40
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6852      	ldr	r2, [r2, #4]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	4611      	mov	r1, r2
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3
  }

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800712e:	b480      	push	{r7}
 8007130:	b083      	sub	sp, #12
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	460b      	mov	r3, r1
 8007138:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	78fa      	ldrb	r2, [r7, #3]
 800713e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2204      	movs	r2, #4
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	bc80      	pop	{r7}
 8007172:	4770      	bx	lr

08007174 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007182:	2b04      	cmp	r3, #4
 8007184:	d105      	bne.n	8007192 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr

0800719e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d10b      	bne.n	80071c8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d005      	beq.n	80071c8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071ea:	2b40      	cmp	r3, #64	@ 0x40
 80071ec:	d005      	beq.n	80071fa <USBD_StdDevReq+0x26>
 80071ee:	2b40      	cmp	r3, #64	@ 0x40
 80071f0:	d84f      	bhi.n	8007292 <USBD_StdDevReq+0xbe>
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d009      	beq.n	800720a <USBD_StdDevReq+0x36>
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d14b      	bne.n	8007292 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	4798      	blx	r3
      break;
 8007208:	e048      	b.n	800729c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	785b      	ldrb	r3, [r3, #1]
 800720e:	2b09      	cmp	r3, #9
 8007210:	d839      	bhi.n	8007286 <USBD_StdDevReq+0xb2>
 8007212:	a201      	add	r2, pc, #4	@ (adr r2, 8007218 <USBD_StdDevReq+0x44>)
 8007214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007218:	08007269 	.word	0x08007269
 800721c:	0800727d 	.word	0x0800727d
 8007220:	08007287 	.word	0x08007287
 8007224:	08007273 	.word	0x08007273
 8007228:	08007287 	.word	0x08007287
 800722c:	0800724b 	.word	0x0800724b
 8007230:	08007241 	.word	0x08007241
 8007234:	08007287 	.word	0x08007287
 8007238:	0800725f 	.word	0x0800725f
 800723c:	08007255 	.word	0x08007255
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f9dc 	bl	8007600 <USBD_GetDescriptor>
          break;
 8007248:	e022      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800724a:	6839      	ldr	r1, [r7, #0]
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 fb3f 	bl	80078d0 <USBD_SetAddress>
          break;
 8007252:	e01d      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007254:	6839      	ldr	r1, [r7, #0]
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fb7e 	bl	8007958 <USBD_SetConfig>
          break;
 800725c:	e018      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fc07 	bl	8007a74 <USBD_GetConfig>
          break;
 8007266:	e013      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007268:	6839      	ldr	r1, [r7, #0]
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fc37 	bl	8007ade <USBD_GetStatus>
          break;
 8007270:	e00e      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fc65 	bl	8007b44 <USBD_SetFeature>
          break;
 800727a:	e009      	b.n	8007290 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800727c:	6839      	ldr	r1, [r7, #0]
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 fc74 	bl	8007b6c <USBD_ClrFeature>
          break;
 8007284:	e004      	b.n	8007290 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 fcc9 	bl	8007c20 <USBD_CtlError>
          break;
 800728e:	bf00      	nop
      }
      break;
 8007290:	e004      	b.n	800729c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007292:	6839      	ldr	r1, [r7, #0]
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fcc3 	bl	8007c20 <USBD_CtlError>
      break;
 800729a:	bf00      	nop
  }

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop

080072a8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072b2:	2300      	movs	r3, #0
 80072b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072be:	2b40      	cmp	r3, #64	@ 0x40
 80072c0:	d005      	beq.n	80072ce <USBD_StdItfReq+0x26>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d82e      	bhi.n	8007324 <USBD_StdItfReq+0x7c>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <USBD_StdItfReq+0x26>
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d12a      	bne.n	8007324 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d4:	3b01      	subs	r3, #1
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d81d      	bhi.n	8007316 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	889b      	ldrh	r3, [r3, #4]
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d813      	bhi.n	800730c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	4798      	blx	r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	88db      	ldrh	r3, [r3, #6]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d110      	bne.n	8007320 <USBD_StdItfReq+0x78>
 80072fe:	7bfb      	ldrb	r3, [r7, #15]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d10d      	bne.n	8007320 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fd53 	bl	8007db0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800730a:	e009      	b.n	8007320 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800730c:	6839      	ldr	r1, [r7, #0]
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fc86 	bl	8007c20 <USBD_CtlError>
          break;
 8007314:	e004      	b.n	8007320 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 fc81 	bl	8007c20 <USBD_CtlError>
          break;
 800731e:	e000      	b.n	8007322 <USBD_StdItfReq+0x7a>
          break;
 8007320:	bf00      	nop
      }
      break;
 8007322:	e004      	b.n	800732e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fc7a 	bl	8007c20 <USBD_CtlError>
      break;
 800732c:	bf00      	nop
  }

  return USBD_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	889b      	ldrh	r3, [r3, #4]
 800734a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d007      	beq.n	8007368 <USBD_StdEPReq+0x30>
 8007358:	2b40      	cmp	r3, #64	@ 0x40
 800735a:	f200 8146 	bhi.w	80075ea <USBD_StdEPReq+0x2b2>
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <USBD_StdEPReq+0x40>
 8007362:	2b20      	cmp	r3, #32
 8007364:	f040 8141 	bne.w	80075ea <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	6839      	ldr	r1, [r7, #0]
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	4798      	blx	r3
      break;
 8007376:	e13d      	b.n	80075f4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007380:	2b20      	cmp	r3, #32
 8007382:	d10a      	bne.n	800739a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	4798      	blx	r3
 8007392:	4603      	mov	r3, r0
 8007394:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007396:	7bfb      	ldrb	r3, [r7, #15]
 8007398:	e12d      	b.n	80075f6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	785b      	ldrb	r3, [r3, #1]
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d007      	beq.n	80073b2 <USBD_StdEPReq+0x7a>
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	f300 811b 	bgt.w	80075de <USBD_StdEPReq+0x2a6>
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d072      	beq.n	8007492 <USBD_StdEPReq+0x15a>
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d03a      	beq.n	8007426 <USBD_StdEPReq+0xee>
 80073b0:	e115      	b.n	80075de <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d002      	beq.n	80073c2 <USBD_StdEPReq+0x8a>
 80073bc:	2b03      	cmp	r3, #3
 80073be:	d015      	beq.n	80073ec <USBD_StdEPReq+0xb4>
 80073c0:	e02b      	b.n	800741a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80073c2:	7bbb      	ldrb	r3, [r7, #14]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <USBD_StdEPReq+0xaa>
 80073c8:	7bbb      	ldrb	r3, [r7, #14]
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	d009      	beq.n	80073e2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 f89a 	bl	800850c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80073d8:	2180      	movs	r1, #128	@ 0x80
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f001 f896 	bl	800850c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80073e0:	e020      	b.n	8007424 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fc1b 	bl	8007c20 <USBD_CtlError>
              break;
 80073ea:	e01b      	b.n	8007424 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	885b      	ldrh	r3, [r3, #2]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10e      	bne.n	8007412 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80073f4:	7bbb      	ldrb	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00b      	beq.n	8007412 <USBD_StdEPReq+0xda>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	2b80      	cmp	r3, #128	@ 0x80
 80073fe:	d008      	beq.n	8007412 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	88db      	ldrh	r3, [r3, #6]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d104      	bne.n	8007412 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f001 f87d 	bl	800850c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fccc 	bl	8007db0 <USBD_CtlSendStatus>

              break;
 8007418:	e004      	b.n	8007424 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fbff 	bl	8007c20 <USBD_CtlError>
              break;
 8007422:	bf00      	nop
          }
          break;
 8007424:	e0e0      	b.n	80075e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800742c:	2b02      	cmp	r3, #2
 800742e:	d002      	beq.n	8007436 <USBD_StdEPReq+0xfe>
 8007430:	2b03      	cmp	r3, #3
 8007432:	d015      	beq.n	8007460 <USBD_StdEPReq+0x128>
 8007434:	e026      	b.n	8007484 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007436:	7bbb      	ldrb	r3, [r7, #14]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00c      	beq.n	8007456 <USBD_StdEPReq+0x11e>
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b80      	cmp	r3, #128	@ 0x80
 8007440:	d009      	beq.n	8007456 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	4619      	mov	r1, r3
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 f860 	bl	800850c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800744c:	2180      	movs	r1, #128	@ 0x80
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f001 f85c 	bl	800850c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007454:	e01c      	b.n	8007490 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007456:	6839      	ldr	r1, [r7, #0]
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fbe1 	bl	8007c20 <USBD_CtlError>
              break;
 800745e:	e017      	b.n	8007490 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	885b      	ldrh	r3, [r3, #2]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d112      	bne.n	800748e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007468:	7bbb      	ldrb	r3, [r7, #14]
 800746a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800746e:	2b00      	cmp	r3, #0
 8007470:	d004      	beq.n	800747c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007472:	7bbb      	ldrb	r3, [r7, #14]
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 f867 	bl	800854a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fc97 	bl	8007db0 <USBD_CtlSendStatus>
              }
              break;
 8007482:	e004      	b.n	800748e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fbca 	bl	8007c20 <USBD_CtlError>
              break;
 800748c:	e000      	b.n	8007490 <USBD_StdEPReq+0x158>
              break;
 800748e:	bf00      	nop
          }
          break;
 8007490:	e0aa      	b.n	80075e8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007498:	2b02      	cmp	r3, #2
 800749a:	d002      	beq.n	80074a2 <USBD_StdEPReq+0x16a>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d032      	beq.n	8007506 <USBD_StdEPReq+0x1ce>
 80074a0:	e097      	b.n	80075d2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074a2:	7bbb      	ldrb	r3, [r7, #14]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d007      	beq.n	80074b8 <USBD_StdEPReq+0x180>
 80074a8:	7bbb      	ldrb	r3, [r7, #14]
 80074aa:	2b80      	cmp	r3, #128	@ 0x80
 80074ac:	d004      	beq.n	80074b8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fbb5 	bl	8007c20 <USBD_CtlError>
                break;
 80074b6:	e091      	b.n	80075dc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da0b      	bge.n	80074d8 <USBD_StdEPReq+0x1a0>
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
 80074c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	3310      	adds	r3, #16
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4413      	add	r3, r2
 80074d4:	3304      	adds	r3, #4
 80074d6:	e00b      	b.n	80074f0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80074de:	4613      	mov	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	3304      	adds	r3, #4
 80074f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	2200      	movs	r2, #0
 80074f6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2202      	movs	r2, #2
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fbf8 	bl	8007cf4 <USBD_CtlSendData>
              break;
 8007504:	e06a      	b.n	80075dc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007506:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800750a:	2b00      	cmp	r3, #0
 800750c:	da11      	bge.n	8007532 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800750e:	7bbb      	ldrb	r3, [r7, #14]
 8007510:	f003 020f 	and.w	r2, r3, #15
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	3318      	adds	r3, #24
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d117      	bne.n	8007558 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007528:	6839      	ldr	r1, [r7, #0]
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fb78 	bl	8007c20 <USBD_CtlError>
                  break;
 8007530:	e054      	b.n	80075dc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	440b      	add	r3, r1
 8007544:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fb65 	bl	8007c20 <USBD_CtlError>
                  break;
 8007556:	e041      	b.n	80075dc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800755c:	2b00      	cmp	r3, #0
 800755e:	da0b      	bge.n	8007578 <USBD_StdEPReq+0x240>
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	3310      	adds	r3, #16
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	3304      	adds	r3, #4
 8007576:	e00b      	b.n	8007590 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007578:	7bbb      	ldrb	r3, [r7, #14]
 800757a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	3304      	adds	r3, #4
 8007590:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d002      	beq.n	800759e <USBD_StdEPReq+0x266>
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b80      	cmp	r3, #128	@ 0x80
 800759c:	d103      	bne.n	80075a6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	e00e      	b.n	80075c4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80075a6:	7bbb      	ldrb	r3, [r7, #14]
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 ffec 	bl	8008588 <USBD_LL_IsStallEP>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2202      	movs	r2, #2
 80075c8:	4619      	mov	r1, r3
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fb92 	bl	8007cf4 <USBD_CtlSendData>
              break;
 80075d0:	e004      	b.n	80075dc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 fb23 	bl	8007c20 <USBD_CtlError>
              break;
 80075da:	bf00      	nop
          }
          break;
 80075dc:	e004      	b.n	80075e8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fb1d 	bl	8007c20 <USBD_CtlError>
          break;
 80075e6:	bf00      	nop
      }
      break;
 80075e8:	e004      	b.n	80075f4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80075ea:	6839      	ldr	r1, [r7, #0]
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fb17 	bl	8007c20 <USBD_CtlError>
      break;
 80075f2:	bf00      	nop
  }

  return ret;
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800760e:	2300      	movs	r3, #0
 8007610:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	885b      	ldrh	r3, [r3, #2]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	2b06      	cmp	r3, #6
 8007622:	f200 8128 	bhi.w	8007876 <USBD_GetDescriptor+0x276>
 8007626:	a201      	add	r2, pc, #4	@ (adr r2, 800762c <USBD_GetDescriptor+0x2c>)
 8007628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800762c:	08007649 	.word	0x08007649
 8007630:	08007661 	.word	0x08007661
 8007634:	080076a1 	.word	0x080076a1
 8007638:	08007877 	.word	0x08007877
 800763c:	08007877 	.word	0x08007877
 8007640:	08007817 	.word	0x08007817
 8007644:	08007843 	.word	0x08007843
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	7c12      	ldrb	r2, [r2, #16]
 8007654:	f107 0108 	add.w	r1, r7, #8
 8007658:	4610      	mov	r0, r2
 800765a:	4798      	blx	r3
 800765c:	60f8      	str	r0, [r7, #12]
      break;
 800765e:	e112      	b.n	8007886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	7c1b      	ldrb	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d10d      	bne.n	8007684 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800766e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007670:	f107 0208 	add.w	r2, r7, #8
 8007674:	4610      	mov	r0, r2
 8007676:	4798      	blx	r3
 8007678:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3301      	adds	r3, #1
 800767e:	2202      	movs	r2, #2
 8007680:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007682:	e100      	b.n	8007886 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800768a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800768c:	f107 0208 	add.w	r2, r7, #8
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
 8007694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	3301      	adds	r3, #1
 800769a:	2202      	movs	r2, #2
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e0f2      	b.n	8007886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	885b      	ldrh	r3, [r3, #2]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	2b05      	cmp	r3, #5
 80076a8:	f200 80ac 	bhi.w	8007804 <USBD_GetDescriptor+0x204>
 80076ac:	a201      	add	r2, pc, #4	@ (adr r2, 80076b4 <USBD_GetDescriptor+0xb4>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076cd 	.word	0x080076cd
 80076b8:	08007701 	.word	0x08007701
 80076bc:	08007735 	.word	0x08007735
 80076c0:	08007769 	.word	0x08007769
 80076c4:	0800779d 	.word	0x0800779d
 80076c8:	080077d1 	.word	0x080077d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	7c12      	ldrb	r2, [r2, #16]
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	4610      	mov	r0, r2
 80076ea:	4798      	blx	r3
 80076ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076ee:	e091      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 fa94 	bl	8007c20 <USBD_CtlError>
            err++;
 80076f8:	7afb      	ldrb	r3, [r7, #11]
 80076fa:	3301      	adds	r3, #1
 80076fc:	72fb      	strb	r3, [r7, #11]
          break;
 80076fe:	e089      	b.n	8007814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	7c12      	ldrb	r2, [r2, #16]
 8007718:	f107 0108 	add.w	r1, r7, #8
 800771c:	4610      	mov	r0, r2
 800771e:	4798      	blx	r3
 8007720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007722:	e077      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 fa7a 	bl	8007c20 <USBD_CtlError>
            err++;
 800772c:	7afb      	ldrb	r3, [r7, #11]
 800772e:	3301      	adds	r3, #1
 8007730:	72fb      	strb	r3, [r7, #11]
          break;
 8007732:	e06f      	b.n	8007814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	7c12      	ldrb	r2, [r2, #16]
 800774c:	f107 0108 	add.w	r1, r7, #8
 8007750:	4610      	mov	r0, r2
 8007752:	4798      	blx	r3
 8007754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007756:	e05d      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007758:	6839      	ldr	r1, [r7, #0]
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 fa60 	bl	8007c20 <USBD_CtlError>
            err++;
 8007760:	7afb      	ldrb	r3, [r7, #11]
 8007762:	3301      	adds	r3, #1
 8007764:	72fb      	strb	r3, [r7, #11]
          break;
 8007766:	e055      	b.n	8007814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	7c12      	ldrb	r2, [r2, #16]
 8007780:	f107 0108 	add.w	r1, r7, #8
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800778a:	e043      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa46 	bl	8007c20 <USBD_CtlError>
            err++;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	3301      	adds	r3, #1
 8007798:	72fb      	strb	r3, [r7, #11]
          break;
 800779a:	e03b      	b.n	8007814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	7c12      	ldrb	r2, [r2, #16]
 80077b4:	f107 0108 	add.w	r1, r7, #8
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077be:	e029      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fa2c 	bl	8007c20 <USBD_CtlError>
            err++;
 80077c8:	7afb      	ldrb	r3, [r7, #11]
 80077ca:	3301      	adds	r3, #1
 80077cc:	72fb      	strb	r3, [r7, #11]
          break;
 80077ce:	e021      	b.n	8007814 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80077e2:	699b      	ldr	r3, [r3, #24]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	7c12      	ldrb	r2, [r2, #16]
 80077e8:	f107 0108 	add.w	r1, r7, #8
 80077ec:	4610      	mov	r0, r2
 80077ee:	4798      	blx	r3
 80077f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077f2:	e00f      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f4:	6839      	ldr	r1, [r7, #0]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fa12 	bl	8007c20 <USBD_CtlError>
            err++;
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3301      	adds	r3, #1
 8007800:	72fb      	strb	r3, [r7, #11]
          break;
 8007802:	e007      	b.n	8007814 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fa0a 	bl	8007c20 <USBD_CtlError>
          err++;
 800780c:	7afb      	ldrb	r3, [r7, #11]
 800780e:	3301      	adds	r3, #1
 8007810:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007812:	e038      	b.n	8007886 <USBD_GetDescriptor+0x286>
 8007814:	e037      	b.n	8007886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	7c1b      	ldrb	r3, [r3, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d109      	bne.n	8007832 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007826:	f107 0208 	add.w	r2, r7, #8
 800782a:	4610      	mov	r0, r2
 800782c:	4798      	blx	r3
 800782e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007830:	e029      	b.n	8007886 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 f9f3 	bl	8007c20 <USBD_CtlError>
        err++;
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	3301      	adds	r3, #1
 800783e:	72fb      	strb	r3, [r7, #11]
      break;
 8007840:	e021      	b.n	8007886 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7c1b      	ldrb	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10d      	bne.n	8007866 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	f107 0208 	add.w	r2, r7, #8
 8007856:	4610      	mov	r0, r2
 8007858:	4798      	blx	r3
 800785a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3301      	adds	r3, #1
 8007860:	2207      	movs	r2, #7
 8007862:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007864:	e00f      	b.n	8007886 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f9d9 	bl	8007c20 <USBD_CtlError>
        err++;
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	3301      	adds	r3, #1
 8007872:	72fb      	strb	r3, [r7, #11]
      break;
 8007874:	e007      	b.n	8007886 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 f9d1 	bl	8007c20 <USBD_CtlError>
      err++;
 800787e:	7afb      	ldrb	r3, [r7, #11]
 8007880:	3301      	adds	r3, #1
 8007882:	72fb      	strb	r3, [r7, #11]
      break;
 8007884:	bf00      	nop
  }

  if (err != 0U)
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d11c      	bne.n	80078c6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800788c:	893b      	ldrh	r3, [r7, #8]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d011      	beq.n	80078b6 <USBD_GetDescriptor+0x2b6>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	88db      	ldrh	r3, [r3, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00d      	beq.n	80078b6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	88da      	ldrh	r2, [r3, #6]
 800789e:	893b      	ldrh	r3, [r7, #8]
 80078a0:	4293      	cmp	r3, r2
 80078a2:	bf28      	it	cs
 80078a4:	4613      	movcs	r3, r2
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80078aa:	893b      	ldrh	r3, [r7, #8]
 80078ac:	461a      	mov	r2, r3
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fa1f 	bl	8007cf4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	88db      	ldrh	r3, [r3, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa76 	bl	8007db0 <USBD_CtlSendStatus>
 80078c4:	e000      	b.n	80078c8 <USBD_GetDescriptor+0x2c8>
    return;
 80078c6:	bf00      	nop
    }
  }
}
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	889b      	ldrh	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d130      	bne.n	8007944 <USBD_SetAddress+0x74>
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	88db      	ldrh	r3, [r3, #6]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d12c      	bne.n	8007944 <USBD_SetAddress+0x74>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	885b      	ldrh	r3, [r3, #2]
 80078ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80078f0:	d828      	bhi.n	8007944 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	885b      	ldrh	r3, [r3, #2]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007904:	2b03      	cmp	r3, #3
 8007906:	d104      	bne.n	8007912 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 f988 	bl	8007c20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007910:	e01d      	b.n	800794e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7bfa      	ldrb	r2, [r7, #15]
 8007916:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fe5d 	bl	80085de <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fa43 	bl	8007db0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007938:	e009      	b.n	800794e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007942:	e004      	b.n	800794e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f96a 	bl	8007c20 <USBD_CtlError>
  }
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}
	...

08007958 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	885b      	ldrh	r3, [r3, #2]
 8007966:	b2da      	uxtb	r2, r3
 8007968:	4b41      	ldr	r3, [pc, #260]	@ (8007a70 <USBD_SetConfig+0x118>)
 800796a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800796c:	4b40      	ldr	r3, [pc, #256]	@ (8007a70 <USBD_SetConfig+0x118>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d904      	bls.n	800797e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f952 	bl	8007c20 <USBD_CtlError>
 800797c:	e075      	b.n	8007a6a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007984:	2b02      	cmp	r3, #2
 8007986:	d002      	beq.n	800798e <USBD_SetConfig+0x36>
 8007988:	2b03      	cmp	r3, #3
 800798a:	d023      	beq.n	80079d4 <USBD_SetConfig+0x7c>
 800798c:	e062      	b.n	8007a54 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800798e:	4b38      	ldr	r3, [pc, #224]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01a      	beq.n	80079cc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007996:	4b36      	ldr	r3, [pc, #216]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80079a8:	4b31      	ldr	r3, [pc, #196]	@ (8007a70 <USBD_SetConfig+0x118>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f9e7 	bl	8006d82 <USBD_SetClassConfig>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d104      	bne.n	80079c4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80079ba:	6839      	ldr	r1, [r7, #0]
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f92f 	bl	8007c20 <USBD_CtlError>
            return;
 80079c2:	e052      	b.n	8007a6a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9f3 	bl	8007db0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80079ca:	e04e      	b.n	8007a6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f9ef 	bl	8007db0 <USBD_CtlSendStatus>
        break;
 80079d2:	e04a      	b.n	8007a6a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80079d4:	4b26      	ldr	r3, [pc, #152]	@ (8007a70 <USBD_SetConfig+0x118>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d112      	bne.n	8007a02 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80079e4:	4b22      	ldr	r3, [pc, #136]	@ (8007a70 <USBD_SetConfig+0x118>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	461a      	mov	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80079ee:	4b20      	ldr	r3, [pc, #128]	@ (8007a70 <USBD_SetConfig+0x118>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff f9e3 	bl	8006dc0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f9d8 	bl	8007db0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a00:	e033      	b.n	8007a6a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007a02:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d01d      	beq.n	8007a4c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7ff f9d1 	bl	8006dc0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a1e:	4b14      	ldr	r3, [pc, #80]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a28:	4b11      	ldr	r3, [pc, #68]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff f9a7 	bl	8006d82 <USBD_SetClassConfig>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d104      	bne.n	8007a44 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a3a:	6839      	ldr	r1, [r7, #0]
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f8ef 	bl	8007c20 <USBD_CtlError>
            return;
 8007a42:	e012      	b.n	8007a6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f9b3 	bl	8007db0 <USBD_CtlSendStatus>
        break;
 8007a4a:	e00e      	b.n	8007a6a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f9af 	bl	8007db0 <USBD_CtlSendStatus>
        break;
 8007a52:	e00a      	b.n	8007a6a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f8e2 	bl	8007c20 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <USBD_SetConfig+0x118>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff f9ac 	bl	8006dc0 <USBD_ClrClassConfig>
        break;
 8007a68:	bf00      	nop
    }
  }
}
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	20002ca4 	.word	0x20002ca4

08007a74 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	88db      	ldrh	r3, [r3, #6]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d004      	beq.n	8007a90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f8c9 	bl	8007c20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007a8e:	e022      	b.n	8007ad6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	dc02      	bgt.n	8007aa0 <USBD_GetConfig+0x2c>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dc03      	bgt.n	8007aa6 <USBD_GetConfig+0x32>
 8007a9e:	e015      	b.n	8007acc <USBD_GetConfig+0x58>
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d00b      	beq.n	8007abc <USBD_GetConfig+0x48>
 8007aa4:	e012      	b.n	8007acc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f91d 	bl	8007cf4 <USBD_CtlSendData>
        break;
 8007aba:	e00c      	b.n	8007ad6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f915 	bl	8007cf4 <USBD_CtlSendData>
        break;
 8007aca:	e004      	b.n	8007ad6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8a6 	bl	8007c20 <USBD_CtlError>
        break;
 8007ad4:	bf00      	nop
}
 8007ad6:	bf00      	nop
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b082      	sub	sp, #8
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aee:	3b01      	subs	r3, #1
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d81e      	bhi.n	8007b32 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	88db      	ldrh	r3, [r3, #6]
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	d004      	beq.n	8007b06 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f88e 	bl	8007c20 <USBD_CtlError>
        break;
 8007b04:	e01a      	b.n	8007b3c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f043 0202 	orr.w	r2, r3, #2
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	330c      	adds	r3, #12
 8007b26:	2202      	movs	r2, #2
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8e2 	bl	8007cf4 <USBD_CtlSendData>
      break;
 8007b30:	e004      	b.n	8007b3c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f873 	bl	8007c20 <USBD_CtlError>
      break;
 8007b3a:	bf00      	nop
  }
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	885b      	ldrh	r3, [r3, #2]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d106      	bne.n	8007b64 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f926 	bl	8007db0 <USBD_CtlSendStatus>
  }
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d80b      	bhi.n	8007b9a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	885b      	ldrh	r3, [r3, #2]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d10c      	bne.n	8007ba4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f90c 	bl	8007db0 <USBD_CtlSendStatus>
      }
      break;
 8007b98:	e004      	b.n	8007ba4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f83f 	bl	8007c20 <USBD_CtlError>
      break;
 8007ba2:	e000      	b.n	8007ba6 <USBD_ClrFeature+0x3a>
      break;
 8007ba4:	bf00      	nop
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b083      	sub	sp, #12
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781a      	ldrb	r2, [r3, #0]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	785a      	ldrb	r2, [r3, #1]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3302      	adds	r3, #2
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	3303      	adds	r3, #3
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	4413      	add	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	3304      	adds	r3, #4
 8007be6:	781b      	ldrb	r3, [r3, #0]
 8007be8:	461a      	mov	r2, r3
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	3305      	adds	r3, #5
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	3306      	adds	r3, #6
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3307      	adds	r3, #7
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	4413      	add	r3, r2
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	80da      	strh	r2, [r3, #6]

}
 8007c16:	bf00      	nop
 8007c18:	370c      	adds	r7, #12
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bc80      	pop	{r7}
 8007c1e:	4770      	bx	lr

08007c20 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c2a:	2180      	movs	r1, #128	@ 0x80
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fc6d 	bl	800850c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c32:	2100      	movs	r1, #0
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fc69 	bl	800850c <USBD_LL_StallEP>
}
 8007c3a:	bf00      	nop
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d032      	beq.n	8007cbe <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f000 f834 	bl	8007cc6 <USBD_GetLen>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	3301      	adds	r3, #1
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	b29a      	uxth	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	75fa      	strb	r2, [r7, #23]
 8007c72:	461a      	mov	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	4413      	add	r3, r2
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	75fa      	strb	r2, [r7, #23]
 8007c84:	461a      	mov	r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	4413      	add	r3, r2
 8007c8a:	2203      	movs	r2, #3
 8007c8c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007c8e:	e012      	b.n	8007cb6 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	60fa      	str	r2, [r7, #12]
 8007c96:	7dfa      	ldrb	r2, [r7, #23]
 8007c98:	1c51      	adds	r1, r2, #1
 8007c9a:	75f9      	strb	r1, [r7, #23]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	75fa      	strb	r2, [r7, #23]
 8007cac:	461a      	mov	r2, r3
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e8      	bne.n	8007c90 <USBD_GetString+0x4e>
    }
  }
}
 8007cbe:	bf00      	nop
 8007cc0:	3718      	adds	r7, #24
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}

08007cc6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007cc6:	b480      	push	{r7}
 8007cc8:	b085      	sub	sp, #20
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007cd2:	e005      	b.n	8007ce0 <USBD_GetLen+0x1a>
  {
    len++;
 8007cd4:	7bfb      	ldrb	r3, [r7, #15]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f5      	bne.n	8007cd4 <USBD_GetLen+0xe>
  }

  return len;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr

08007cf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	60f8      	str	r0, [r7, #12]
 8007cfc:	60b9      	str	r1, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007d0a:	88fa      	ldrh	r2, [r7, #6]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d10:	88fa      	ldrh	r2, [r7, #6]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fc7d 	bl	800861c <USBD_LL_Transmit>

  return USBD_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4613      	mov	r3, r2
 8007d38:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	68ba      	ldr	r2, [r7, #8]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 fc6b 	bl	800861c <USBD_LL_Transmit>

  return USBD_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2203      	movs	r2, #3
 8007d62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007d66:	88fa      	ldrh	r2, [r7, #6]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007d6e:	88fa      	ldrh	r2, [r7, #6]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d76:	88fb      	ldrh	r3, [r7, #6]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	2100      	movs	r1, #0
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 fc70 	bl	8008662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	4613      	mov	r3, r2
 8007d98:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f000 fc5e 	bl	8008662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007da6:	2300      	movs	r3, #0
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fc28 	bl	800861c <USBD_LL_Transmit>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2205      	movs	r2, #5
 8007de2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fc38 	bl	8008662 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e00:	2200      	movs	r2, #0
 8007e02:	4912      	ldr	r1, [pc, #72]	@ (8007e4c <MX_USB_DEVICE_Init+0x50>)
 8007e04:	4812      	ldr	r0, [pc, #72]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e06:	f7fe ff62 	bl	8006cce <USBD_Init>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d001      	beq.n	8007e14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e10:	f7f8 fcaa 	bl	8000768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007e14:	490f      	ldr	r1, [pc, #60]	@ (8007e54 <MX_USB_DEVICE_Init+0x58>)
 8007e16:	480e      	ldr	r0, [pc, #56]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e18:	f7fe ff84 	bl	8006d24 <USBD_RegisterClass>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e22:	f7f8 fca1 	bl	8000768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007e26:	490c      	ldr	r1, [pc, #48]	@ (8007e58 <MX_USB_DEVICE_Init+0x5c>)
 8007e28:	4809      	ldr	r0, [pc, #36]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e2a:	f7fe feb5 	bl	8006b98 <USBD_CDC_RegisterInterface>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007e34:	f7f8 fc98 	bl	8000768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e38:	4805      	ldr	r0, [pc, #20]	@ (8007e50 <MX_USB_DEVICE_Init+0x54>)
 8007e3a:	f7fe ff8c 	bl	8006d56 <USBD_Start>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007e44:	f7f8 fc90 	bl	8000768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e48:	bf00      	nop
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000134 	.word	0x20000134
 8007e50:	20002ca8 	.word	0x20002ca8
 8007e54:	20000020 	.word	0x20000020
 8007e58:	20000124 	.word	0x20000124

08007e5c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007e60:	2200      	movs	r2, #0
 8007e62:	4905      	ldr	r1, [pc, #20]	@ (8007e78 <CDC_Init_FS+0x1c>)
 8007e64:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <CDC_Init_FS+0x20>)
 8007e66:	f7fe fead 	bl	8006bc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007e6a:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <CDC_Init_FS+0x24>)
 8007e6c:	4803      	ldr	r0, [pc, #12]	@ (8007e7c <CDC_Init_FS+0x20>)
 8007e6e:	f7fe fec2 	bl	8006bf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007e72:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	2000336c 	.word	0x2000336c
 8007e7c:	20002ca8 	.word	0x20002ca8
 8007e80:	20002f6c 	.word	0x20002f6c

08007e84 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007e88:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bc80      	pop	{r7}
 8007e90:	4770      	bx	lr
	...

08007e94 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  // static uint8_t lineCoding[10];
  switch (cmd)
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b23      	cmp	r3, #35	@ 0x23
 8007ea8:	d85f      	bhi.n	8007f6a <CDC_Control_FS+0xd6>
 8007eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb0 <CDC_Control_FS+0x1c>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007f6b 	.word	0x08007f6b
 8007eb4:	08007f6b 	.word	0x08007f6b
 8007eb8:	08007f6b 	.word	0x08007f6b
 8007ebc:	08007f6b 	.word	0x08007f6b
 8007ec0:	08007f6b 	.word	0x08007f6b
 8007ec4:	08007f6b 	.word	0x08007f6b
 8007ec8:	08007f6b 	.word	0x08007f6b
 8007ecc:	08007f6b 	.word	0x08007f6b
 8007ed0:	08007f6b 	.word	0x08007f6b
 8007ed4:	08007f6b 	.word	0x08007f6b
 8007ed8:	08007f6b 	.word	0x08007f6b
 8007edc:	08007f6b 	.word	0x08007f6b
 8007ee0:	08007f6b 	.word	0x08007f6b
 8007ee4:	08007f6b 	.word	0x08007f6b
 8007ee8:	08007f6b 	.word	0x08007f6b
 8007eec:	08007f6b 	.word	0x08007f6b
 8007ef0:	08007f6b 	.word	0x08007f6b
 8007ef4:	08007f6b 	.word	0x08007f6b
 8007ef8:	08007f6b 	.word	0x08007f6b
 8007efc:	08007f6b 	.word	0x08007f6b
 8007f00:	08007f6b 	.word	0x08007f6b
 8007f04:	08007f6b 	.word	0x08007f6b
 8007f08:	08007f6b 	.word	0x08007f6b
 8007f0c:	08007f6b 	.word	0x08007f6b
 8007f10:	08007f6b 	.word	0x08007f6b
 8007f14:	08007f6b 	.word	0x08007f6b
 8007f18:	08007f6b 	.word	0x08007f6b
 8007f1c:	08007f6b 	.word	0x08007f6b
 8007f20:	08007f6b 	.word	0x08007f6b
 8007f24:	08007f6b 	.word	0x08007f6b
 8007f28:	08007f6b 	.word	0x08007f6b
 8007f2c:	08007f6b 	.word	0x08007f6b
 8007f30:	08007f6b 	.word	0x08007f6b
 8007f34:	08007f6b 	.word	0x08007f6b
 8007f38:	08007f41 	.word	0x08007f41
 8007f3c:	08007f6b 	.word	0x08007f6b
  case CDC_GET_LINE_CODING:
    // memcpy(pbuf, lineCoding, length);
    break;

  case CDC_SET_CONTROL_LINE_STATE:
    uint16_t ControlSignalBitmap = ((USBD_SetupReqTypedef *)pbuf)->wValue;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	885b      	ldrh	r3, [r3, #2]
 8007f44:	81fb      	strh	r3, [r7, #14]
    uint8_t rts = ((ControlSignalBitmap & 0x0002) == 2) ? 1 : 0;
 8007f46:	89fb      	ldrh	r3, [r7, #14]
 8007f48:	105b      	asrs	r3, r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 0301 	and.w	r3, r3, #1
 8007f50:	737b      	strb	r3, [r7, #13]
    uint8_t dtr = ((ControlSignalBitmap & 0x0001) == 1) ? 1 : 0;
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	f003 0301 	and.w	r3, r3, #1
 8007f5a:	733b      	strb	r3, [r7, #12]

    uart_setControlLine(rts, dtr);
 8007f5c:	7b3a      	ldrb	r2, [r7, #12]
 8007f5e:	7b7b      	ldrb	r3, [r7, #13]
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7f8 fc74 	bl	8000850 <uart_setControlLine>

    break;
 8007f68:	e000      	b.n	8007f6c <CDC_Control_FS+0xd8>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007f6a:	bf00      	nop
  }

  return (USBD_OK);
 8007f6c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop

08007f78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	uart_cmdRecv(Buf, *Len);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4619      	mov	r1, r3
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7f8 fcf5 	bl	8000978 <uart_cmdRecv>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	4805      	ldr	r0, [pc, #20]	@ (8007fa8 <CDC_Receive_FS+0x30>)
 8007f92:	f7fe fe30 	bl	8006bf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007f96:	4804      	ldr	r0, [pc, #16]	@ (8007fa8 <CDC_Receive_FS+0x30>)
 8007f98:	f7fe fe6f 	bl	8006c7a <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007f9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20002ca8 	.word	0x20002ca8

08007fac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)hUsbDeviceFS.pClassData;
 8007fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <CDC_Transmit_FS+0x26>
  {
    return USBD_BUSY;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e00b      	b.n	8007fea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007fd2:	887b      	ldrh	r3, [r7, #2]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	4806      	ldr	r0, [pc, #24]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fda:	f7fe fdf3 	bl	8006bc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007fde:	4805      	ldr	r0, [pc, #20]	@ (8007ff4 <CDC_Transmit_FS+0x48>)
 8007fe0:	f7fe fe1c 	bl	8006c1c <USBD_CDC_TransmitPacket>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20002ca8 	.word	0x20002ca8

08007ff8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	6039      	str	r1, [r7, #0]
 8008002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	2212      	movs	r2, #18
 8008008:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800800a:	4b03      	ldr	r3, [pc, #12]	@ (8008018 <USBD_FS_DeviceDescriptor+0x20>)
}
 800800c:	4618      	mov	r0, r3
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	20000150 	.word	0x20000150

0800801c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	4603      	mov	r3, r0
 8008024:	6039      	str	r1, [r7, #0]
 8008026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	2204      	movs	r2, #4
 800802c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800802e:	4b03      	ldr	r3, [pc, #12]	@ (800803c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	20000164 	.word	0x20000164

08008040 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	4603      	mov	r3, r0
 8008048:	6039      	str	r1, [r7, #0]
 800804a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d105      	bne.n	800805e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4907      	ldr	r1, [pc, #28]	@ (8008074 <USBD_FS_ProductStrDescriptor+0x34>)
 8008056:	4808      	ldr	r0, [pc, #32]	@ (8008078 <USBD_FS_ProductStrDescriptor+0x38>)
 8008058:	f7ff fdf3 	bl	8007c42 <USBD_GetString>
 800805c:	e004      	b.n	8008068 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	4904      	ldr	r1, [pc, #16]	@ (8008074 <USBD_FS_ProductStrDescriptor+0x34>)
 8008062:	4805      	ldr	r0, [pc, #20]	@ (8008078 <USBD_FS_ProductStrDescriptor+0x38>)
 8008064:	f7ff fded 	bl	8007c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008068:	4b02      	ldr	r3, [pc, #8]	@ (8008074 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	2000376c 	.word	0x2000376c
 8008078:	080087f4 	.word	0x080087f4

0800807c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	4904      	ldr	r1, [pc, #16]	@ (800809c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800808c:	4804      	ldr	r0, [pc, #16]	@ (80080a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800808e:	f7ff fdd8 	bl	8007c42 <USBD_GetString>
  return USBD_StrDesc;
 8008092:	4b02      	ldr	r3, [pc, #8]	@ (800809c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	2000376c 	.word	0x2000376c
 80080a0:	08008810 	.word	0x08008810

080080a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	221a      	movs	r2, #26
 80080b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80080b6:	f000 f843 	bl	8008140 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80080ba:	4b02      	ldr	r3, [pc, #8]	@ (80080c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}
 80080c4:	20000168 	.word	0x20000168

080080c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d105      	bne.n	80080e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	4907      	ldr	r1, [pc, #28]	@ (80080fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080de:	4808      	ldr	r0, [pc, #32]	@ (8008100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080e0:	f7ff fdaf 	bl	8007c42 <USBD_GetString>
 80080e4:	e004      	b.n	80080f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	4904      	ldr	r1, [pc, #16]	@ (80080fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80080ea:	4805      	ldr	r0, [pc, #20]	@ (8008100 <USBD_FS_ConfigStrDescriptor+0x38>)
 80080ec:	f7ff fda9 	bl	8007c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 80080f0:	4b02      	ldr	r3, [pc, #8]	@ (80080fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3708      	adds	r7, #8
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	bf00      	nop
 80080fc:	2000376c 	.word	0x2000376c
 8008100:	08008820 	.word	0x08008820

08008104 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	6039      	str	r1, [r7, #0]
 800810e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d105      	bne.n	8008122 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4907      	ldr	r1, [pc, #28]	@ (8008138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800811a:	4808      	ldr	r0, [pc, #32]	@ (800813c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800811c:	f7ff fd91 	bl	8007c42 <USBD_GetString>
 8008120:	e004      	b.n	800812c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4904      	ldr	r1, [pc, #16]	@ (8008138 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008126:	4805      	ldr	r0, [pc, #20]	@ (800813c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008128:	f7ff fd8b 	bl	8007c42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800812c:	4b02      	ldr	r3, [pc, #8]	@ (8008138 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800812e:	4618      	mov	r0, r3
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	2000376c 	.word	0x2000376c
 800813c:	0800882c 	.word	0x0800882c

08008140 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b084      	sub	sp, #16
 8008144:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008146:	4b0f      	ldr	r3, [pc, #60]	@ (8008184 <Get_SerialNum+0x44>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800814c:	4b0e      	ldr	r3, [pc, #56]	@ (8008188 <Get_SerialNum+0x48>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008152:	4b0e      	ldr	r3, [pc, #56]	@ (800818c <Get_SerialNum+0x4c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4413      	add	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d009      	beq.n	800817a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008166:	2208      	movs	r2, #8
 8008168:	4909      	ldr	r1, [pc, #36]	@ (8008190 <Get_SerialNum+0x50>)
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 f814 	bl	8008198 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008170:	2204      	movs	r2, #4
 8008172:	4908      	ldr	r1, [pc, #32]	@ (8008194 <Get_SerialNum+0x54>)
 8008174:	68b8      	ldr	r0, [r7, #8]
 8008176:	f000 f80f 	bl	8008198 <IntToUnicode>
  }
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	1ffff7e8 	.word	0x1ffff7e8
 8008188:	1ffff7ec 	.word	0x1ffff7ec
 800818c:	1ffff7f0 	.word	0x1ffff7f0
 8008190:	2000016a 	.word	0x2000016a
 8008194:	2000017a 	.word	0x2000017a

08008198 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]
 80081ae:	e027      	b.n	8008200 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	0f1b      	lsrs	r3, r3, #28
 80081b4:	2b09      	cmp	r3, #9
 80081b6:	d80b      	bhi.n	80081d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	0f1b      	lsrs	r3, r3, #28
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	7dfb      	ldrb	r3, [r7, #23]
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4619      	mov	r1, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	440b      	add	r3, r1
 80081c8:	3230      	adds	r2, #48	@ 0x30
 80081ca:	b2d2      	uxtb	r2, r2
 80081cc:	701a      	strb	r2, [r3, #0]
 80081ce:	e00a      	b.n	80081e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	0f1b      	lsrs	r3, r3, #28
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	005b      	lsls	r3, r3, #1
 80081da:	4619      	mov	r1, r3
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	440b      	add	r3, r1
 80081e0:	3237      	adds	r2, #55	@ 0x37
 80081e2:	b2d2      	uxtb	r2, r2
 80081e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	3301      	adds	r3, #1
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
 80081fc:	3301      	adds	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
 8008200:	7dfa      	ldrb	r2, [r7, #23]
 8008202:	79fb      	ldrb	r3, [r7, #7]
 8008204:	429a      	cmp	r2, r3
 8008206:	d3d3      	bcc.n	80081b0 <IntToUnicode+0x18>
  }
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	bc80      	pop	{r7}
 8008212:	4770      	bx	lr

08008214 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0d      	ldr	r2, [pc, #52]	@ (8008258 <HAL_PCD_MspInit+0x44>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d113      	bne.n	800824e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <HAL_PCD_MspInit+0x48>)
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	4a0c      	ldr	r2, [pc, #48]	@ (800825c <HAL_PCD_MspInit+0x48>)
 800822c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008230:	61d3      	str	r3, [r2, #28]
 8008232:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <HAL_PCD_MspInit+0x48>)
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800823e:	2200      	movs	r2, #0
 8008240:	2100      	movs	r1, #0
 8008242:	2014      	movs	r0, #20
 8008244:	f7f9 fb11 	bl	800186a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008248:	2014      	movs	r0, #20
 800824a:	f7f9 fb2a 	bl	80018a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800824e:	bf00      	nop
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	40005c00 	.word	0x40005c00
 800825c:	40021000 	.word	0x40021000

08008260 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008274:	4619      	mov	r1, r3
 8008276:	4610      	mov	r0, r2
 8008278:	f7fe fdb5 	bl	8006de6 <USBD_LL_SetupStage>
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	440b      	add	r3, r1
 80082a4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	78fb      	ldrb	r3, [r7, #3]
 80082ac:	4619      	mov	r1, r3
 80082ae:	f7fe fde7 	bl	8006e80 <USBD_LL_DataOutStage>
}
 80082b2:	bf00      	nop
 80082b4:	3708      	adds	r7, #8
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	6879      	ldr	r1, [r7, #4]
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	440b      	add	r3, r1
 80082da:	3324      	adds	r3, #36	@ 0x24
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f7fe fe3e 	bl	8006f62 <USBD_LL_DataInStage>
}
 80082e6:	bf00      	nop
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe ff4e 	bl	800719e <USBD_LL_SOF>
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008312:	2301      	movs	r3, #1
 8008314:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	799b      	ldrb	r3, [r3, #6]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d001      	beq.n	8008322 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800831e:	f7f8 fa23 	bl	8000768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008328:	7bfa      	ldrb	r2, [r7, #15]
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fefe 	bl	800712e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008338:	4618      	mov	r0, r3
 800833a:	f7fe feb7 	bl	80070ac <USBD_LL_Reset>
}
 800833e:	bf00      	nop
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008356:	4618      	mov	r0, r3
 8008358:	f7fe fef8 	bl	800714c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7a9b      	ldrb	r3, [r3, #10]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008364:	4b04      	ldr	r3, [pc, #16]	@ (8008378 <HAL_PCD_SuspendCallback+0x30>)
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	4a03      	ldr	r2, [pc, #12]	@ (8008378 <HAL_PCD_SuspendCallback+0x30>)
 800836a:	f043 0306 	orr.w	r3, r3, #6
 800836e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed00 	.word	0xe000ed00

0800837c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fef2 	bl	8007174 <USBD_LL_Resume>
}
 8008390:	bf00      	nop
 8008392:	3708      	adds	r7, #8
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80083a0:	4a28      	ldr	r2, [pc, #160]	@ (8008444 <USBD_LL_Init+0xac>)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a26      	ldr	r2, [pc, #152]	@ (8008444 <USBD_LL_Init+0xac>)
 80083ac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 80083b0:	4b24      	ldr	r3, [pc, #144]	@ (8008444 <USBD_LL_Init+0xac>)
 80083b2:	4a25      	ldr	r2, [pc, #148]	@ (8008448 <USBD_LL_Init+0xb0>)
 80083b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80083b6:	4b23      	ldr	r3, [pc, #140]	@ (8008444 <USBD_LL_Init+0xac>)
 80083b8:	2208      	movs	r2, #8
 80083ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80083bc:	4b21      	ldr	r3, [pc, #132]	@ (8008444 <USBD_LL_Init+0xac>)
 80083be:	2202      	movs	r2, #2
 80083c0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80083c2:	4b20      	ldr	r3, [pc, #128]	@ (8008444 <USBD_LL_Init+0xac>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80083c8:	4b1e      	ldr	r3, [pc, #120]	@ (8008444 <USBD_LL_Init+0xac>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80083ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008444 <USBD_LL_Init+0xac>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80083d4:	481b      	ldr	r0, [pc, #108]	@ (8008444 <USBD_LL_Init+0xac>)
 80083d6:	f7f9 fc1b 	bl	8001c10 <HAL_PCD_Init>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80083e0:	f7f8 f9c2 	bl	8000768 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083ea:	2318      	movs	r3, #24
 80083ec:	2200      	movs	r2, #0
 80083ee:	2100      	movs	r1, #0
 80083f0:	f7fb f92c 	bl	800364c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80083fa:	2358      	movs	r3, #88	@ 0x58
 80083fc:	2200      	movs	r2, #0
 80083fe:	2180      	movs	r1, #128	@ 0x80
 8008400:	f7fb f924 	bl	800364c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800840a:	23c0      	movs	r3, #192	@ 0xc0
 800840c:	2200      	movs	r2, #0
 800840e:	2181      	movs	r1, #129	@ 0x81
 8008410:	f7fb f91c 	bl	800364c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800841a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800841e:	2200      	movs	r2, #0
 8008420:	2101      	movs	r1, #1
 8008422:	f7fb f913 	bl	800364c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800842c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008430:	2200      	movs	r2, #0
 8008432:	2182      	movs	r1, #130	@ 0x82
 8008434:	f7fb f90a 	bl	800364c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	2000396c 	.word	0x2000396c
 8008448:	40005c00 	.word	0x40005c00

0800844c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008462:	4618      	mov	r0, r3
 8008464:	f7f9 fcca 	bl	8001dfc <HAL_PCD_Start>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4618      	mov	r0, r3
 8008470:	f000 f94e 	bl	8008710 <USBD_Get_USB_Status>
 8008474:	4603      	mov	r3, r0
 8008476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008478:	7bbb      	ldrb	r3, [r7, #14]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	4608      	mov	r0, r1
 800848c:	4611      	mov	r1, r2
 800848e:	461a      	mov	r2, r3
 8008490:	4603      	mov	r3, r0
 8008492:	70fb      	strb	r3, [r7, #3]
 8008494:	460b      	mov	r3, r1
 8008496:	70bb      	strb	r3, [r7, #2]
 8008498:	4613      	mov	r3, r2
 800849a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 80084aa:	78bb      	ldrb	r3, [r7, #2]
 80084ac:	883a      	ldrh	r2, [r7, #0]
 80084ae:	78f9      	ldrb	r1, [r7, #3]
 80084b0:	f7f9 fe1e 	bl	80020f0 <HAL_PCD_EP_Open>
 80084b4:	4603      	mov	r3, r0
 80084b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b8:	7bfb      	ldrb	r3, [r7, #15]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f928 	bl	8008710 <USBD_Get_USB_Status>
 80084c0:	4603      	mov	r3, r0
 80084c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b084      	sub	sp, #16
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	460b      	mov	r3, r1
 80084d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80084e8:	78fa      	ldrb	r2, [r7, #3]
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f9 fe5c 	bl	80021aa <HAL_PCD_EP_Close>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f6:	7bfb      	ldrb	r3, [r7, #15]
 80084f8:	4618      	mov	r0, r3
 80084fa:	f000 f909 	bl	8008710 <USBD_Get_USB_Status>
 80084fe:	4603      	mov	r3, r0
 8008500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008502:	7bbb      	ldrb	r3, [r7, #14]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	4611      	mov	r1, r2
 800852a:	4618      	mov	r0, r3
 800852c:	f7f9 ff04 	bl	8002338 <HAL_PCD_EP_SetStall>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	4618      	mov	r0, r3
 8008538:	f000 f8ea 	bl	8008710 <USBD_Get_USB_Status>
 800853c:	4603      	mov	r3, r0
 800853e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b084      	sub	sp, #16
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	4618      	mov	r0, r3
 800856a:	f7f9 ff45 	bl	80023f8 <HAL_PCD_EP_ClrStall>
 800856e:	4603      	mov	r3, r0
 8008570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008572:	7bfb      	ldrb	r3, [r7, #15]
 8008574:	4618      	mov	r0, r3
 8008576:	f000 f8cb 	bl	8008710 <USBD_Get_USB_Status>
 800857a:	4603      	mov	r3, r0
 800857c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800857e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800859a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800859c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	da0b      	bge.n	80085bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085a4:	78fb      	ldrb	r3, [r7, #3]
 80085a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085aa:	68f9      	ldr	r1, [r7, #12]
 80085ac:	4613      	mov	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	00db      	lsls	r3, r3, #3
 80085b4:	440b      	add	r3, r1
 80085b6:	3312      	adds	r3, #18
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	e00b      	b.n	80085d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	00db      	lsls	r3, r3, #3
 80085cc:	440b      	add	r3, r1
 80085ce:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80085d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80085f8:	78fa      	ldrb	r2, [r7, #3]
 80085fa:	4611      	mov	r1, r2
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7f9 fd53 	bl	80020a8 <HAL_PCD_SetAddress>
 8008602:	4603      	mov	r3, r0
 8008604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f881 	bl	8008710 <USBD_Get_USB_Status>
 800860e:	4603      	mov	r3, r0
 8008610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008612:	7bbb      	ldrb	r3, [r7, #14]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	461a      	mov	r2, r3
 8008628:	460b      	mov	r3, r1
 800862a:	72fb      	strb	r3, [r7, #11]
 800862c:	4613      	mov	r3, r2
 800862e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800863e:	893b      	ldrh	r3, [r7, #8]
 8008640:	7af9      	ldrb	r1, [r7, #11]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	f7f9 fe41 	bl	80022ca <HAL_PCD_EP_Transmit>
 8008648:	4603      	mov	r3, r0
 800864a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	4618      	mov	r0, r3
 8008650:	f000 f85e 	bl	8008710 <USBD_Get_USB_Status>
 8008654:	4603      	mov	r3, r0
 8008656:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008658:	7dbb      	ldrb	r3, [r7, #22]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b086      	sub	sp, #24
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	461a      	mov	r2, r3
 800866e:	460b      	mov	r3, r1
 8008670:	72fb      	strb	r3, [r7, #11]
 8008672:	4613      	mov	r3, r2
 8008674:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867a:	2300      	movs	r3, #0
 800867c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008684:	893b      	ldrh	r3, [r7, #8]
 8008686:	7af9      	ldrb	r1, [r7, #11]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	f7f9 fdd6 	bl	800223a <HAL_PCD_EP_Receive>
 800868e:	4603      	mov	r3, r0
 8008690:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f83b 	bl	8008710 <USBD_Get_USB_Status>
 800869a:	4603      	mov	r3, r0
 800869c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800869e:	7dbb      	ldrb	r3, [r7, #22]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80086ba:	78fa      	ldrb	r2, [r7, #3]
 80086bc:	4611      	mov	r1, r2
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f9 fdec 	bl	800229c <HAL_PCD_EP_GetRxCount>
 80086c4:	4603      	mov	r3, r0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086d8:	4b02      	ldr	r3, [pc, #8]	@ (80086e4 <USBD_static_malloc+0x14>)
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bc80      	pop	{r7}
 80086e2:	4770      	bx	lr
 80086e4:	20003c44 	.word	0x20003c44

080086e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bc80      	pop	{r7}
 80086f8:	4770      	bx	lr

080086fa <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008706:	bf00      	nop
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800871a:	2300      	movs	r3, #0
 800871c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d817      	bhi.n	8008754 <USBD_Get_USB_Status+0x44>
 8008724:	a201      	add	r2, pc, #4	@ (adr r2, 800872c <USBD_Get_USB_Status+0x1c>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	0800873d 	.word	0x0800873d
 8008730:	08008743 	.word	0x08008743
 8008734:	08008749 	.word	0x08008749
 8008738:	0800874f 	.word	0x0800874f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73fb      	strb	r3, [r7, #15]
    break;
 8008740:	e00b      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008742:	2302      	movs	r3, #2
 8008744:	73fb      	strb	r3, [r7, #15]
    break;
 8008746:	e008      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008748:	2301      	movs	r3, #1
 800874a:	73fb      	strb	r3, [r7, #15]
    break;
 800874c:	e005      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800874e:	2302      	movs	r3, #2
 8008750:	73fb      	strb	r3, [r7, #15]
    break;
 8008752:	e002      	b.n	800875a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008754:	2302      	movs	r3, #2
 8008756:	73fb      	strb	r3, [r7, #15]
    break;
 8008758:	bf00      	nop
  }
  return usb_status;
 800875a:	7bfb      	ldrb	r3, [r7, #15]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop

08008768 <memset>:
 8008768:	4603      	mov	r3, r0
 800876a:	4402      	add	r2, r0
 800876c:	4293      	cmp	r3, r2
 800876e:	d100      	bne.n	8008772 <memset+0xa>
 8008770:	4770      	bx	lr
 8008772:	f803 1b01 	strb.w	r1, [r3], #1
 8008776:	e7f9      	b.n	800876c <memset+0x4>

08008778 <__libc_init_array>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	2600      	movs	r6, #0
 800877c:	4d0c      	ldr	r5, [pc, #48]	@ (80087b0 <__libc_init_array+0x38>)
 800877e:	4c0d      	ldr	r4, [pc, #52]	@ (80087b4 <__libc_init_array+0x3c>)
 8008780:	1b64      	subs	r4, r4, r5
 8008782:	10a4      	asrs	r4, r4, #2
 8008784:	42a6      	cmp	r6, r4
 8008786:	d109      	bne.n	800879c <__libc_init_array+0x24>
 8008788:	f000 f828 	bl	80087dc <_init>
 800878c:	2600      	movs	r6, #0
 800878e:	4d0a      	ldr	r5, [pc, #40]	@ (80087b8 <__libc_init_array+0x40>)
 8008790:	4c0a      	ldr	r4, [pc, #40]	@ (80087bc <__libc_init_array+0x44>)
 8008792:	1b64      	subs	r4, r4, r5
 8008794:	10a4      	asrs	r4, r4, #2
 8008796:	42a6      	cmp	r6, r4
 8008798:	d105      	bne.n	80087a6 <__libc_init_array+0x2e>
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a0:	4798      	blx	r3
 80087a2:	3601      	adds	r6, #1
 80087a4:	e7ee      	b.n	8008784 <__libc_init_array+0xc>
 80087a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80087aa:	4798      	blx	r3
 80087ac:	3601      	adds	r6, #1
 80087ae:	e7f2      	b.n	8008796 <__libc_init_array+0x1e>
 80087b0:	08008860 	.word	0x08008860
 80087b4:	08008860 	.word	0x08008860
 80087b8:	08008860 	.word	0x08008860
 80087bc:	08008864 	.word	0x08008864

080087c0 <memcpy>:
 80087c0:	440a      	add	r2, r1
 80087c2:	4291      	cmp	r1, r2
 80087c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c8:	d100      	bne.n	80087cc <memcpy+0xc>
 80087ca:	4770      	bx	lr
 80087cc:	b510      	push	{r4, lr}
 80087ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d2:	4291      	cmp	r1, r2
 80087d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d8:	d1f9      	bne.n	80087ce <memcpy+0xe>
 80087da:	bd10      	pop	{r4, pc}

080087dc <_init>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr

080087e8 <_fini>:
 80087e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ea:	bf00      	nop
 80087ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ee:	bc08      	pop	{r3}
 80087f0:	469e      	mov	lr, r3
 80087f2:	4770      	bx	lr
